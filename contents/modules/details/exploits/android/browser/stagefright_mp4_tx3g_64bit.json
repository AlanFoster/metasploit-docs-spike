{
  "name": "Android Stagefright MP4 tx3g Integer Overflow",
  "fullname": "exploit/android/browser/stagefright_mp4_tx3g_64bit",
  "aliases": [

  ],
  "rank": 300,
  "disclosure_date": "2015-08-13",
  "type": "exploit",
  "author": [
    "jduck <jduck@metasploit.com>",
    "NorthBit"
  ],
  "description": "This module exploits an integer overflow vulnerability in the Stagefright\n        Library (libstagefright.so). The vulnerability occurs when parsing specially\n        crafted MP4 files. While a wide variety of remote attack vectors exist, this\n        particular exploit is designed to work within an HTML5 compliant browser.\n\n          Exploitation is done by supplying a specially crafted MP4 file with two\n        tx3g atoms that, when their sizes are summed, cause an integer overflow when\n        processing the second atom. As a result, a temporary buffer is allocated\n        with insufficient size and a memcpy call leads to a heap overflow.\n\n          This version of the exploit uses a two-stage information leak based on\n        corrupting the MetaData that the browser reads from mediaserver. This method\n        is based on a technique published in NorthBit's Metaphor paper. First,\n        we use a variant of their technique to read the address of a heap buffer\n        located adjacent to a SampleIterator object as the video HTML element's\n        videoHeight. Next, we read the vtable pointer from an empty Vector within\n        the SampleIterator object using the video element's duration. This gives\n        us a code address that we can use to determine the base address of\n        libstagefright and construct a ROP chain dynamically.\n\n        NOTE: the mediaserver process on many Android devices (Nexus, for example) is\n        constrained by SELinux and thus cannot use the execve system call. To avoid\n        this problem, the original exploit uses a kernel exploit payload that disables\n        SELinux and spawns a shell as root. Work is underway to make the framework\n        more amenable to these types of situations. Until that work is complete, this\n        exploit will only yield a shell on devices without SELinux or with SELinux in\n        permissive mode.",
  "references": [
    "https://cvedetails.com/cve/CVE-2015-3864/",
    "https://blog.exodusintel.com/2015/08/13/stagefright-mission-accomplished/",
    "http://googleprojectzero.blogspot.com/2015/09/stagefrightened.html",
    "https://raw.githubusercontent.com/NorthBit/Public/master/NorthBit-Metaphor.pdf",
    "https://github.com/NorthBit/Metaphor",
    "http://drops.wooyun.org/papers/7558",
    "http://translate.wooyun.io/2015/08/08/Stagefright-Vulnerability-Disclosure.html",
    "https://www.nccgroup.trust/globalassets/our-research/uk/whitepapers/2016/01/libstagefright-exploit-notespdf/"
  ],
  "platform": "Linux",
  "arch": "armle",
  "autofilter_ports": [

  ],
  "autofilter_services": [

  ],
  "targets": [
    "Automatic",
    "Nexus 7 (Wi-Fi) (razor) with Android 5.0 (LRX21P)",
    "Nexus 7 (Wi-Fi) (razor) with Android 5.0.1 (LRX22C)",
    "Nexus 7 (Wi-Fi) (razor) with Android 5.0.2 (LRX22G)",
    "Nexus 7 (Wi-Fi) (razor) with Android 5.1 (LMY47O)",
    "Nexus 7 (Wi-Fi) (razor) with Android 5.1.1 (LMY47V)",
    "Nexus 7 (Wi-Fi) (razor) with Android 5.1.1 (LMY48G)",
    "Nexus 7 (Wi-Fi) (razor) with Android 5.1.1 (LMY48I)",
    "Nexus 7 (Mobile) (razorg) with Android 5.0.2 (LRX22G)",
    "Nexus 7 (Mobile) (razorg) with Android 5.1 (LMY47O)",
    "Nexus 7 (Mobile) (razorg) with Android 5.1.1 (LMY47V)",
    "Nexus 5 (hammerhead) with Android 5.0 (LRX21O)",
    "Nexus 5 (hammerhead) with Android 5.0.1 (LRX22C)",
    "Nexus 5 (hammerhead) with Android 5.1 (LMY47D)",
    "Nexus 5 (hammerhead) with Android 5.1 (LMY47I)",
    "Nexus 5 (hammerhead) with Android 5.1.1 (LMY48B)",
    "Nexus 5 (hammerhead) with Android 5.1.1 (LMY48I)",
    "Nexus 6 (shamu) with Android 5.0 (LRX21O)",
    "Nexus 6 (shamu) with Android 5.0.1 (LRX22C)",
    "Nexus 6 (shamu) with Android 5.1 (LMY47D)",
    "Nexus 6 (shamu) with Android 5.1 (LMY47E)",
    "Nexus 6 (shamu) with Android 5.1 (LMY47I)",
    "Nexus 6 (shamu) with Android 5.1.1 (LYZ28E)",
    "Nexus 6 (shamu) with Android 5.1 (LMY47M)",
    "Nexus 6 (shamu) with Android 5.1.1 (LMY47Z)",
    "Nexus 6 (shamu) with Android 5.1.1 (LVY48C)",
    "Nexus 6 (shamu) with Android 5.1.1 (LMY48I)",
    "Nexus 6 (shamu) with Android 5.1.1 (LYZ28J)",
    "Nexus 6 (shamu) with Android 5.1.1 (LVY48E)",
    "Samsung Galaxy S5 (VZW SM-G900V) with Android 5.0 (LRX21T)"
  ],
  "path": "/modules/exploits/android/browser/stagefright_mp4_tx3g_64bit.rb",
  "ref_name": "android/browser/stagefright_mp4_tx3g_64bit",
  "check": false,
  "post_auth": false,
  "default_credential": false,
  "notes": {
    "AKA": [
      "stagefright"
    ]
  },
  "needs_cleanup": null,
  "options": [
    {
      "type": "string",
      "name": "WORKSPACE",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "Specify the workspace for this module"
    },
    {
      "type": "bool",
      "name": "VERBOSE",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Enable detailed status messages"
    },
    {
      "type": "bool",
      "name": "EnableContextEncoding",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Use transient context when encoding payloads"
    },
    {
      "type": "path",
      "name": "ContextInformationFile",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "The information file that contains context information"
    },
    {
      "type": "bool",
      "name": "DisablePayloadHandler",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Disable the handler code for the selected payload"
    },
    {
      "type": "address",
      "name": "SRVHOST",
      "required": true,
      "default": "0.0.0.0",
      "aliases": [

      ],
      "advanced": false,
      "description": "The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses."
    },
    {
      "type": "port",
      "name": "SRVPORT",
      "required": true,
      "default": 8080,
      "aliases": [

      ],
      "advanced": false,
      "description": "The local port to listen on."
    },
    {
      "type": "string",
      "name": "ListenerComm",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "The specific communication channel to use for this service"
    },
    {
      "type": "bool",
      "name": "SSL",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": false,
      "description": "Negotiate SSL for incoming connections"
    },
    {
      "type": "path",
      "name": "SSLCert",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": false,
      "description": "Path to a custom SSL certificate (default is randomly generated)"
    },
    {
      "type": "bool",
      "name": "SSLCompression",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Enable SSL/TLS-level compression"
    },
    {
      "type": "string",
      "name": "SSLCipher",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "String for SSL cipher spec - \"DHE-RSA-AES256-SHA\" or \"ADH\""
    },
    {
      "type": "integer",
      "name": "TCP::max_send_size",
      "required": false,
      "default": 0,
      "aliases": [

      ],
      "advanced": false,
      "description": "Maximum tcp segment size.  (0 = disable)"
    },
    {
      "type": "integer",
      "name": "TCP::send_delay",
      "required": false,
      "default": 0,
      "aliases": [

      ],
      "advanced": false,
      "description": "Delays inserted before every send.  (0 = disable)"
    },
    {
      "type": "string",
      "name": "URIPATH",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": false,
      "description": "The URI to use for this exploit (default is random)"
    },
    {
      "type": "bool",
      "name": "HTTP::no_cache",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": false,
      "description": "Disallow the browser to cache HTTP content"
    },
    {
      "type": "bool",
      "name": "HTTP::chunked",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable chunking of HTTP responses via \"Transfer-Encoding: chunked\""
    },
    {
      "type": "bool",
      "name": "HTTP::header_folding",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable folding of HTTP headers"
    },
    {
      "type": "bool",
      "name": "HTTP::junk_headers",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable insertion of random junk HTTP headers"
    },
    {
      "type": "enum",
      "name": "HTTP::compression",
      "required": false,
      "default": "none",
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable compression of HTTP responses via content encoding (Accepted: none, gzip, deflate)"
    },
    {
      "type": "string",
      "name": "HTTP::server_name",
      "required": true,
      "default": "Apache",
      "aliases": [

      ],
      "advanced": false,
      "description": "Configures the Server header of all outgoing replies"
    },
    {
      "type": "address",
      "name": "URIHOST",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "Host to use in URI (useful for tunnels)"
    },
    {
      "type": "port",
      "name": "URIPORT",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "Port to use in URI (useful for tunnels)"
    },
    {
      "type": "bool",
      "name": "SendRobots",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Return a robots.txt file if asked for one"
    },
    {
      "type": "enum",
      "name": "HTML::unicode",
      "required": false,
      "default": "none",
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable HTTP obfuscation via unicode (Accepted: none, utf-16le, utf-16be, utf-16be-marker, utf-32le, utf-32be)"
    },
    {
      "type": "enum",
      "name": "HTML::base64",
      "required": false,
      "default": "none",
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable HTML obfuscation via an embeded base64 html object (IE not supported) (Accepted: none, plain, single_pad, double_pad, random_space_injection)"
    },
    {
      "type": "integer",
      "name": "HTML::javascript::escape",
      "required": false,
      "default": 0,
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable HTML obfuscation via HTML escaping (number of iterations)"
    }
  ]
}