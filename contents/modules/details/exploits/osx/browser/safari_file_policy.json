{
  "name": "Apple Safari file:// Arbitrary Code Execution",
  "fullname": "exploit/osx/browser/safari_file_policy",
  "aliases": [

  ],
  "rank": 300,
  "disclosure_date": "2011-10-12",
  "type": "exploit",
  "author": [
    "Aaron Sigel",
    "sinn3r <sinn3r@metasploit.com>"
  ],
  "description": "This module exploits a vulnerability found in Apple Safari on OS X platform.\n        A policy issue in the handling of file:// URLs may allow arbitrary remote code\n        execution under the context of the user.\n\n          In order to trigger arbitrary remote code execution, the best way seems to\n        be opening a share on the victim machine first (this can be SMB/WebDav/FTP, or\n        a file format that OS X might automount), and then execute it in /Volumes/[share].\n        If there's some kind of bug that leaks the victim machine's current username,\n        then it's also possible to execute the payload in /Users/[username]/Downloads/,\n        or else bruteforce your way to getting that information.\n\n          Please note that non-java payloads (*.sh extension) might get launched by\n        Xcode instead of executing it, in that case please try the Java ones instead.",
  "references": [
    "https://cvedetails.com/cve/CVE-2011-3230/",
    "OSVDB (76389)",
    "http://vttynotes.blogspot.com/2011/10/cve-2011-3230-launch-any-file-path-from.html#comments",
    "http://support.apple.com/kb/HT5000"
  ],
  "platform": "Java, OSX, Unix",
  "arch": "cmd, java",
  "autofilter_ports": [

  ],
  "autofilter_services": [

  ],
  "targets": [
    "Safari 5.1 on OS X",
    "Safari 5.1 on OS X with Java"
  ],
  "path": "/modules/exploits/osx/browser/safari_file_policy.rb",
  "ref_name": "osx/browser/safari_file_policy",
  "check": false,
  "post_auth": false,
  "default_credential": false,
  "notes": {
  },
  "needs_cleanup": null,
  "options": [
    {
      "type": "string",
      "name": "WORKSPACE",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "Specify the workspace for this module"
    },
    {
      "type": "bool",
      "name": "VERBOSE",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Enable detailed status messages"
    },
    {
      "type": "bool",
      "name": "EnableContextEncoding",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Use transient context when encoding payloads"
    },
    {
      "type": "path",
      "name": "ContextInformationFile",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "The information file that contains context information"
    },
    {
      "type": "bool",
      "name": "DisablePayloadHandler",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Disable the handler code for the selected payload"
    },
    {
      "type": "address",
      "name": "SRVHOST",
      "required": true,
      "default": "0.0.0.0",
      "aliases": [

      ],
      "advanced": false,
      "description": "The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses."
    },
    {
      "type": "port",
      "name": "SRVPORT",
      "required": true,
      "default": 21,
      "aliases": [

      ],
      "advanced": false,
      "description": "The local port to use for the FTP server (Do not change)"
    },
    {
      "type": "string",
      "name": "ListenerComm",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "The specific communication channel to use for this service"
    },
    {
      "type": "bool",
      "name": "SSL",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": false,
      "description": "Negotiate SSL for incoming connections"
    },
    {
      "type": "path",
      "name": "SSLCert",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": false,
      "description": "Path to a custom SSL certificate (default is randomly generated)"
    },
    {
      "type": "bool",
      "name": "SSLCompression",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Enable SSL/TLS-level compression"
    },
    {
      "type": "string",
      "name": "SSLCipher",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "String for SSL cipher spec - \"DHE-RSA-AES256-SHA\" or \"ADH\""
    },
    {
      "type": "integer",
      "name": "TCP::max_send_size",
      "required": false,
      "default": 0,
      "aliases": [

      ],
      "advanced": false,
      "description": "Maximum tcp segment size.  (0 = disable)"
    },
    {
      "type": "integer",
      "name": "TCP::send_delay",
      "required": false,
      "default": 0,
      "aliases": [

      ],
      "advanced": false,
      "description": "Delays inserted before every send.  (0 = disable)"
    },
    {
      "type": "port",
      "name": "PASVPORT",
      "required": false,
      "default": 0,
      "aliases": [

      ],
      "advanced": false,
      "description": "The local PASV data port to listen on (0 is random)"
    },
    {
      "type": "string",
      "name": "URIPATH",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": false,
      "description": "The URI to use for this exploit (default is random)"
    },
    {
      "type": "port",
      "name": "HTTPPORT",
      "required": true,
      "default": 80,
      "aliases": [

      ],
      "advanced": false,
      "description": "The HTTP server port"
    }
  ]
}