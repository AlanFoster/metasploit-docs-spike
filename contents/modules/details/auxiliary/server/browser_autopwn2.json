{
  "name": "HTTP Client Automatic Exploiter 2 (Browser Autopwn)",
  "fullname": "auxiliary/server/browser_autopwn2",
  "aliases": [

  ],
  "rank": 300,
  "disclosure_date": "2015-07-05",
  "type": "auxiliary",
  "author": [
    "sinn3r <sinn3r@metasploit.com>"
  ],
  "description": "This module will automatically serve browser exploits. Here are the options you can\n        configure:\n\n        The INCLUDE_PATTERN option allows you to specify the kind of exploits to be loaded. For example,\n        if you wish to load just Adobe Flash exploits, then you can set Include to 'adobe_flash'.\n\n        The EXCLUDE_PATTERN option will ignore exploits. For example, if you don't want any Adobe Flash\n        exploits, you can set this. Also note that the Exclude option will always be evaluated\n        after the Include option.\n\n        The MaxExploitCount option specifies the max number of exploits to load by Browser Autopwn.\n        By default, 20 will be loaded. But note that the client will probably not be vulnerable\n        to all 20 of them, so only some will actually be served to the client.\n\n        The HTMLContent option allows you to provide a basic webpage. This is what the user behind\n        the vulnerable browser will see. You can simply set a string, or you can do the file://\n        syntax to load an HTML file. Note this option might break exploits so try to keep it\n        as simple as possible.\n\n        The MaxSessionCount option is used to limit how many sessions Browser Autopwn is allowed to\n        get. The default -1 means unlimited. Combining this with other options such as RealList\n        and Custom404, you can get information about which visitors (IPs) clicked on your malicious\n        link, what exploits they might be vulnerable to, redirect them to your own internal\n        training website without actually attacking them.\n\n        For more information about Browser Autopwn, please see the referenced blog post.",
  "references": [
    "https://blog.rapid7.com/2015/07/16/the-new-metasploit-browser-autopwn-strikes-faster-and-smarter--part-2"
  ],
  "platform": "",
  "arch": "",
  "autofilter_ports": [

  ],
  "autofilter_services": [

  ],
  "targets": null,
  "path": "/modules/auxiliary/server/browser_autopwn2.rb",
  "ref_name": "server/browser_autopwn2",
  "check": false,
  "post_auth": false,
  "default_credential": false,
  "notes": {
  },
  "needs_cleanup": null,
  "options": [
    {
      "type": "string",
      "name": "WORKSPACE",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "Specify the workspace for this module"
    },
    {
      "type": "bool",
      "name": "VERBOSE",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Enable detailed status messages"
    },
    {
      "type": "address",
      "name": "SRVHOST",
      "required": true,
      "default": "0.0.0.0",
      "aliases": [

      ],
      "advanced": false,
      "description": "The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses."
    },
    {
      "type": "port",
      "name": "SRVPORT",
      "required": true,
      "default": 8080,
      "aliases": [

      ],
      "advanced": false,
      "description": "The local port to listen on."
    },
    {
      "type": "string",
      "name": "ListenerComm",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "The specific communication channel to use for this service"
    },
    {
      "type": "bool",
      "name": "SSL",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": false,
      "description": "Negotiate SSL for incoming connections"
    },
    {
      "type": "path",
      "name": "SSLCert",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": false,
      "description": "Path to a custom SSL certificate (default is randomly generated)"
    },
    {
      "type": "bool",
      "name": "SSLCompression",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Enable SSL/TLS-level compression"
    },
    {
      "type": "string",
      "name": "SSLCipher",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "String for SSL cipher spec - \"DHE-RSA-AES256-SHA\" or \"ADH\""
    },
    {
      "type": "integer",
      "name": "TCP::max_send_size",
      "required": false,
      "default": 0,
      "aliases": [

      ],
      "advanced": false,
      "description": "Maximum tcp segment size.  (0 = disable)"
    },
    {
      "type": "integer",
      "name": "TCP::send_delay",
      "required": false,
      "default": 0,
      "aliases": [

      ],
      "advanced": false,
      "description": "Delays inserted before every send.  (0 = disable)"
    },
    {
      "type": "string",
      "name": "URIPATH",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": false,
      "description": "The URI to use for this exploit (default is random)"
    },
    {
      "type": "bool",
      "name": "HTTP::no_cache",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": false,
      "description": "Disallow the browser to cache HTTP content"
    },
    {
      "type": "bool",
      "name": "HTTP::chunked",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable chunking of HTTP responses via \"Transfer-Encoding: chunked\""
    },
    {
      "type": "bool",
      "name": "HTTP::header_folding",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable folding of HTTP headers"
    },
    {
      "type": "bool",
      "name": "HTTP::junk_headers",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable insertion of random junk HTTP headers"
    },
    {
      "type": "enum",
      "name": "HTTP::compression",
      "required": false,
      "default": "none",
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable compression of HTTP responses via content encoding (Accepted: none, gzip, deflate)"
    },
    {
      "type": "string",
      "name": "HTTP::server_name",
      "required": true,
      "default": "Apache",
      "aliases": [

      ],
      "advanced": false,
      "description": "Configures the Server header of all outgoing replies"
    },
    {
      "type": "address",
      "name": "URIHOST",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "Host to use in URI (useful for tunnels)"
    },
    {
      "type": "port",
      "name": "URIPORT",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "Port to use in URI (useful for tunnels)"
    },
    {
      "type": "bool",
      "name": "SendRobots",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Return a robots.txt file if asked for one"
    },
    {
      "type": "enum",
      "name": "HTML::unicode",
      "required": false,
      "default": "none",
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable HTTP obfuscation via unicode (Accepted: none, utf-16le, utf-16be, utf-16be-marker, utf-32le, utf-32be)"
    },
    {
      "type": "enum",
      "name": "HTML::base64",
      "required": false,
      "default": "none",
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable HTML obfuscation via an embeded base64 html object (IE not supported) (Accepted: none, plain, single_pad, double_pad, random_space_injection)"
    },
    {
      "type": "integer",
      "name": "HTML::javascript::escape",
      "required": false,
      "default": 0,
      "aliases": [

      ],
      "advanced": false,
      "description": "Enable HTML obfuscation via HTML escaping (number of iterations)"
    },
    {
      "type": "integer",
      "name": "JsObfuscate",
      "required": false,
      "default": 0,
      "aliases": [

      ],
      "advanced": true,
      "description": "Number of times to obfuscate JavaScript"
    },
    {
      "type": "string",
      "name": "JsIdentifiers",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "Identifiers to preserve for JsObfu"
    },
    {
      "type": "bool",
      "name": "Retries",
      "required": false,
      "default": true,
      "aliases": [

      ],
      "advanced": false,
      "description": "Allow the browser to retry the module"
    },
    {
      "type": "string",
      "name": "CookieName",
      "required": false,
      "default": "__ua",
      "aliases": [

      ],
      "advanced": true,
      "description": "The name of the tracking cookie"
    },
    {
      "type": "string",
      "name": "CookieExpiration",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "Cookie expiration in years (blank=expire on exit)"
    },
    {
      "type": "string",
      "name": "Custom404",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "An external custom 404 URL (Example: http://example.com/404.html)"
    },
    {
      "type": "string",
      "name": "PAYLOAD_FIREFOX",
      "required": true,
      "default": "firefox/shell_reverse_tcp",
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload for firefox browser exploits"
    },
    {
      "type": "integer",
      "name": "PAYLOAD_FIREFOX_LPORT",
      "required": true,
      "default": 4442,
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload LPORT for firefox browser exploits"
    },
    {
      "type": "address",
      "name": "LHOST",
      "required": true,
      "default": "192.168.1.205",
      "aliases": [

      ],
      "advanced": true,
      "description": "The local host for the exploits and handlers"
    },
    {
      "type": "string",
      "name": "PAYLOAD_ANDROID",
      "required": true,
      "default": "android/meterpreter/reverse_tcp",
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload for android browser exploits"
    },
    {
      "type": "integer",
      "name": "PAYLOAD_ANDROID_LPORT",
      "required": true,
      "default": 4443,
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload LPORT for android browser exploits"
    },
    {
      "type": "string",
      "name": "PAYLOAD_WIN",
      "required": true,
      "default": "windows/meterpreter/reverse_tcp",
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload for win browser exploits"
    },
    {
      "type": "integer",
      "name": "PAYLOAD_WIN_LPORT",
      "required": true,
      "default": 4444,
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload LPORT for win browser exploits"
    },
    {
      "type": "string",
      "name": "PAYLOAD_LINUX",
      "required": true,
      "default": "linux/x86/meterpreter/reverse_tcp",
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload for linux browser exploits"
    },
    {
      "type": "integer",
      "name": "PAYLOAD_LINUX_LPORT",
      "required": true,
      "default": 4445,
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload LPORT for linux browser exploits"
    },
    {
      "type": "string",
      "name": "PAYLOAD_UNIX",
      "required": true,
      "default": "cmd/unix/reverse",
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload for unix browser exploits"
    },
    {
      "type": "integer",
      "name": "PAYLOAD_UNIX_LPORT",
      "required": true,
      "default": 4446,
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload LPORT for unix browser exploits"
    },
    {
      "type": "string",
      "name": "PAYLOAD_OSX",
      "required": true,
      "default": "osx/x86/shell_reverse_tcp",
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload for osx browser exploits"
    },
    {
      "type": "integer",
      "name": "PAYLOAD_OSX_LPORT",
      "required": true,
      "default": 4447,
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload LPORT for osx browser exploits"
    },
    {
      "type": "string",
      "name": "PAYLOAD_JAVA",
      "required": true,
      "default": "java/meterpreter/reverse_tcp",
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload for java browser exploits"
    },
    {
      "type": "integer",
      "name": "PAYLOAD_JAVA_LPORT",
      "required": true,
      "default": 4448,
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload LPORT for java browser exploits"
    },
    {
      "type": "string",
      "name": "PAYLOAD_GENERIC",
      "required": true,
      "default": "generic/shell_reverse_tcp",
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload for generic browser exploits"
    },
    {
      "type": "integer",
      "name": "PAYLOAD_GENERIC_LPORT",
      "required": true,
      "default": 4459,
      "aliases": [

      ],
      "advanced": true,
      "description": "Payload LPORT for generic browser exploits"
    },
    {
      "type": "regexp",
      "name": "INCLUDE_PATTERN",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": false,
      "description": "Pattern search to include specific modules"
    },
    {
      "type": "regexp",
      "name": "EXCLUDE_PATTERN",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": false,
      "description": "Pattern search to exclude specific modules"
    },
    {
      "type": "integer",
      "name": "ExploitReloadTimeout",
      "required": false,
      "default": 3000,
      "aliases": [

      ],
      "advanced": true,
      "description": "Number of milliseconds before trying the next exploit"
    },
    {
      "type": "integer",
      "name": "MaxExploitCount",
      "required": false,
      "default": 21,
      "aliases": [

      ],
      "advanced": true,
      "description": "Number of browser exploits to load"
    },
    {
      "type": "string",
      "name": "HTMLContent",
      "required": false,
      "default": "",
      "aliases": [

      ],
      "advanced": true,
      "description": "HTML Content"
    },
    {
      "type": "addressrange",
      "name": "AllowedAddresses",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "A range of IPs you're interested in attacking"
    },
    {
      "type": "integer",
      "name": "MaxSessionCount",
      "required": false,
      "default": -1,
      "aliases": [

      ],
      "advanced": true,
      "description": "Number of sessions to get"
    },
    {
      "type": "bool",
      "name": "ShowExploitList",
      "required": true,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Show which exploits will actually be served to each client"
    }
  ]
}