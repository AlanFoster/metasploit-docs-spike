{
  "name": "Schneider Modicon Ladder Logic Upload/Download",
  "fullname": "auxiliary/admin/scada/modicon_stux_transfer",
  "aliases": [

  ],
  "rank": 300,
  "disclosure_date": "2012-04-05",
  "type": "auxiliary",
  "author": [
    "K. Reid Wightman <wightman@digitalbond.com>",
    "todb <todb@metasploit.com>"
  ],
  "description": "The Schneider Modicon with Unity series of PLCs use Modbus function\n        code 90 (0x5a) to send and receive ladder logic.  The protocol is\n        unauthenticated, and allows a rogue host to retrieve the existing\n        logic and to upload new logic.\n\n        Two modes are supported: \"SEND\" and \"RECV,\" which behave as one might\n        expect -- use 'set mode ACTIONAME' to use either mode of operation.\n\n        In either mode, FILENAME must be set to a valid path to an existing\n        file (for SENDing) or a new file (for RECVing), and the directory must\n        already exist.  The default, 'modicon_ladder.apx' is a blank\n        ladder logic file which can be used for testing.\n\n        This module is based on the original 'modiconstux.rb' Basecamp module from\n        DigitalBond.",
  "references": [
    "http://www.digitalbond.com/tools/basecamp/metasploit-modules/"
  ],
  "platform": "",
  "arch": "",
  "autofilter_ports": [

  ],
  "autofilter_services": [

  ],
  "targets": null,
  "path": "/modules/auxiliary/admin/scada/modicon_stux_transfer.rb",
  "ref_name": "admin/scada/modicon_stux_transfer",
  "check": false,
  "post_auth": false,
  "default_credential": false,
  "notes": {
  },
  "needs_cleanup": null,
  "options": [
    {
      "type": "string",
      "name": "WORKSPACE",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "Specify the workspace for this module"
    },
    {
      "type": "bool",
      "name": "VERBOSE",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Enable detailed status messages"
    },
    {
      "type": "addressrange",
      "name": "RHOSTS",
      "required": true,
      "default": null,
      "aliases": [
        "RHOST"
      ],
      "advanced": false,
      "description": "The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'"
    },
    {
      "type": "port",
      "name": "RPORT",
      "required": true,
      "default": 502,
      "aliases": [

      ],
      "advanced": false,
      "description": "The target port"
    },
    {
      "type": "bool",
      "name": "SSL",
      "required": false,
      "default": false,
      "aliases": [

      ],
      "advanced": true,
      "description": "Negotiate SSL/TLS for outgoing connections"
    },
    {
      "type": "enum",
      "name": "SSLVersion",
      "required": true,
      "default": "Auto",
      "aliases": [

      ],
      "advanced": true,
      "description": "Specify the version of SSL/TLS to be used (Auto, TLS and SSL23 are auto-negotiate) (Accepted: Auto, TLS, SSL23, SSL3, TLS1, TLS1.1, TLS1.2)"
    },
    {
      "type": "enum",
      "name": "SSLVerifyMode",
      "required": false,
      "default": "PEER",
      "aliases": [

      ],
      "advanced": true,
      "description": "SSL verification method (Accepted: CLIENT_ONCE, FAIL_IF_NO_PEER_CERT, NONE, PEER)"
    },
    {
      "type": "string",
      "name": "SSLCipher",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "String for SSL cipher - \"DHE-RSA-AES256-SHA\" or \"ADH\""
    },
    {
      "type": "string",
      "name": "Proxies",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "A proxy chain of format type:host:port[,type:host:port][...]"
    },
    {
      "type": "port",
      "name": "CPORT",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "The local client port"
    },
    {
      "type": "address",
      "name": "CHOST",
      "required": false,
      "default": null,
      "aliases": [

      ],
      "advanced": true,
      "description": "The local client address"
    },
    {
      "type": "integer",
      "name": "ConnectTimeout",
      "required": true,
      "default": 10,
      "aliases": [

      ],
      "advanced": true,
      "description": "Maximum number of seconds to establish a TCP connection"
    },
    {
      "type": "integer",
      "name": "TCP::max_send_size",
      "required": false,
      "default": 0,
      "aliases": [

      ],
      "advanced": false,
      "description": "Maxiumum tcp segment size.  (0 = disable)"
    },
    {
      "type": "integer",
      "name": "TCP::send_delay",
      "required": false,
      "default": 0,
      "aliases": [

      ],
      "advanced": false,
      "description": "Delays inserted before every send.  (0 = disable)"
    },
    {
      "type": "string",
      "name": "FILENAME",
      "required": true,
      "default": "/Users/alan/Documents/code/metasploit-framework/data/exploits/modicon_ladder.apx",
      "aliases": [

      ],
      "advanced": false,
      "description": "The file to send or receive"
    },
    {
      "type": "enum",
      "name": "MODE",
      "required": true,
      "default": "SEND",
      "aliases": [

      ],
      "advanced": false,
      "description": "File transfer operation (Accepted: SEND, RECV)"
    }
  ]
}