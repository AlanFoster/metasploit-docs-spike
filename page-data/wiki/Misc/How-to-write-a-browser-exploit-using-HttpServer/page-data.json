{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/How-to-write-a-browser-exploit-using-HttpServer","result":{"data":{"markdownRemark":{"id":"b681fca9-bfea-5d14-9c1e-f75c3f90b717","frontmatter":{"title":"How to write a browser exploit using HttpServer","root":null},"html":"<p>The Metasploit Framework provides different mixins you can use to develop a browser exploit, mainly they are <a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-write-a-browser-exploit-using-HttpServer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Msf::Exploit::Remote::HttpServer</a>, Msf::Exploit::Remote::HttpServer::HTML and <a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-write-a-browser-exploit-using-BrowserExploitServer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Msf::Exploit::Remote::BrowserExploitServer</a>. This writeup covers the HttpServer mixin.</p>\n<p>The HttpServer mixin is kind of the mother of all HTTP server mixins (like BrowserExploitServer and HttpServer::HTML). To use it, your module is required to have a \"on<em>request</em>uri\" method, which is a callback triggered when the HTTP server receives a HTTP request from the browser. An example of setting up \"on<em>request</em>uri\":</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\">#</span>\n<span class=\"token comment\"># Listens for a HTTP request.</span>\n<span class=\"token comment\"># cli is the socket object, and request is a Rex::Proto::Http::Request object</span>\n<span class=\"token comment\">#</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">on_request_uri</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span>\n\tprint_status<span class=\"token punctuation\">(</span><span class=\"token string\">\"Client requests URI: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>request<span class=\"token punctuation\">.</span>uri<span class=\"token delimiter tag\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The \"on<em>request</em>uri\" method is also where you can create the HTTP response. Here's a couple of choices you can use to do that:</p>\n<ul>\n<li><strong>send<em>not</em>found(cli)</strong> - Sends a 404 to the client. Make sure to pass the cli (socket) object.</li>\n<li><strong>send_redirect(cli, location='/', body='', headers={})</strong> - Redirects the client to a new location.</li>\n<li><strong>send_response(cli, body, headers={})</strong> - Sends a response to the client. This method is probably what you'll be using most of the time.</li>\n</ul>\n<p>If you've seen some of our exploit modules, you will also see them using Exploit::Remote::HttpServer::HTML instead of Exploit::Remote::HttpServer. Usage is mostly the same, the difference is the Exploit::Remote::HttpServer::HTML mixin gives you access to some Javascript functions like Base64, heap spraying, OS detection, etc.</p>\n<p>Here's an example of sending a HTTP response:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\">#</span>\n<span class=\"token comment\"># Sends a \"Hello, world!\" to the client</span>\n<span class=\"token comment\">#</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">on_request_uri</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span>\n\thtml <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span>\n\tsend_response<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Also note that in order to handle a HTTP request, it must contain the base URIPATH, which by default is random. This means if you want to handle multiple URIs (possible if you need to handle a redirect or a link), you also need to make sure they have the base URIPATH. To retrieve the base URIPATH, you can use the \"get_resource\" method, here's an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">serve_page_1</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span>\n\thtml <span class=\"token operator\">=</span> <span class=\"token string\">\"This is page 1\"</span>\n\tsend_response<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">serve_page_2</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span>\n\thtml <span class=\"token operator\">=</span> <span class=\"token string\">\"This is page 2\"</span>\n\tsend_response<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">serve_default_page</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span>\n\thtml <span class=\"token operator\">=</span> <span class=\"token string\">%Q|\n\t&lt;html>\n\t&lt;a href=\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>get_resource<span class=\"token punctuation\">.</span>chomp<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token delimiter tag\">}</span></span>/page_1.html\">Go to page 1&lt;/a>&lt;br>\n\t&lt;a href=\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>get_resource<span class=\"token punctuation\">.</span>chomp<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token delimiter tag\">}</span></span>/page_2.html\">Go to page 2&lt;/a>\n\t&lt;/html>\n\t|</span>\n\n\tsend_response<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">on_request_uri</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> request<span class=\"token punctuation\">.</span>uri\n\t<span class=\"token keyword\">when</span> <span class=\"token regex\">/page_1\\.html$/</span>\n\t\tserve_page_1<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">when</span> <span class=\"token regex\">/page_2\\.html$/</span>\n\t\tserve_page_2<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">else</span>\n\t\tserve_default_page<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Of course, when you write a Metasploit browser exploit there's a lot more you need to think about. For example, your module probably needs to do browser detection, because it wouldn't make any sense to allow Chrome to receive an IE exploit, would it? You probably also need to build a payload that's specific to the target, which means your module needs to know what target it's hitting, and you have to build a method to customize the exploit accordingly, etc. The HttpServer and HttpServer::HTML mixin provies all kinds of methods to allow you to accomplish all these. Make sure to check out the API documentation (you can either do this by running msf/documentation/gendocs.sh, or just run \"yard\" in the msf directory), or checkout existing code examples (especially the recent ones).</p>\n<p>To get things started, you can always use the following template to start developing your browser exploit:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\">##</span>\n<span class=\"token comment\"># This module requires Metasploit: http://metasploit.com/download</span>\n<span class=\"token comment\"># Current source: https://github.com/rapid7/metasploit-framework</span>\n<span class=\"token comment\">##</span>\n\n<span class=\"token keyword\">require</span> <span class=\"token string\">'msf/core'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MetasploitModule</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Remote</span>\n  <span class=\"token constant\">Rank</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NormalRanking</span>\n\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Remote</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HttpServer</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>update_info<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Name'</span>           <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"HttpServer mixin example\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Description'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">%q{\n        Here's an example of using the HttpServer mixin\n      }</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'License'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token constant\">MSF_LICENSE</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Author'</span>         <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'sinn3r'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'References'</span>     <span class=\"token operator\">=</span><span class=\"token operator\">></span> \n        <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">[</span> <span class=\"token string\">'URL'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://metasploit.com'</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Platform'</span>       <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'win'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Targets'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">[</span> <span class=\"token string\">'Generic'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'DisclosureDate'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"Apr 1 2013\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'DefaultTarget'</span>  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">on_request_uri</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span>\n    html <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n    send_response<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If you want to take a closer look at what the mixin can do, see:\n<a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/exploit/http/server.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/exploit/http/server.rb</a></p>"}},"pageContext":{"id":"b681fca9-bfea-5d14-9c1e-f75c3f90b717"}}}