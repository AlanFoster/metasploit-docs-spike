{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/How-to-obfuscate-JavaScript-in-Metasploit","result":{"data":{"markdownRemark":{"id":"10dc1ba8-fc67-5dcd-b4f3-70b3f664da75","frontmatter":{"title":"How to obfuscate JavaScript in Metasploit","root":null},"html":"<p>Stealth is an important feature to think about during exploit development. If your exploit gets caught all the time, it doesn't matter how awesome or how technically challenging your exploit is, it is most likely not very usable in a real penetration test. Browser exploits in particular, heavily rely on JavaScript to trigger vulnerabilities, therefore a lot of antivirus or signature-based intrusion detection/prevention systems will scan the JavaScript and flag specific lines as malicious. The following code used to be considered as MS12-063 by multiple <a href=\"https://www.virustotal.com/en/file/90fdf2beab48cf3c269f70d8c9cf7736f3442430ea023d06b65ff073f724870e/analysis/1388888489/\">antivirus vendors</a> even though it is not necessarily harmful or malicious, we'll use this as an example throughout the wiki:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arrr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narrr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> windows<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narrr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>To avoid getting flagged, there are some common evasive tricks we can try. For example, you can manually modify the code a little bit to make it not recognizable by any signatures. Or if the antivirus relies on cached webpages to scan for exploits, it is possible to make the browser not cache your exploit so you stay undetected. Or in this case, you can obfuscate your code, which is what this writeup will focus on.</p>\n<p>In Metasploit, there are three common ways to obfuscate your JavaScript. The first one is simply by using the <code class=\"language-text\">rand_text_alpha</code> method (in <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/text.rb#L1223\">Rex</a>) to randomize your variables. The second one is by using the <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/obfuscatejs.rb\">ObfuscateJS</a> class. And the third option is the <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/jsobfu.rb\">JSObfu</a> class.</p>\n<h2 id=\"the-randtextalpha-trick\" style=\"position:relative;\"><a href=\"#the-randtextalpha-trick\" aria-label=\"the randtextalpha trick permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The rand<em>text</em>alpha trick</h2>\n<p>Using <code class=\"language-text\">rand_text_alpha</code> is the most basic form of evasion, but also the least effective. If this is your choice, you should randomize whatever can be randomized without breaking the code.</p>\n<p>By using the above MS12-063, here's how you would use <code class=\"language-text\">rand_text_alpha</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\"># Randomizes the array variable</span>\n<span class=\"token comment\"># Max size = 6, Min = 3</span>\nvar_array <span class=\"token operator\">=</span> rand_text_alpha<span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Randomizes the src value</span>\nval_src   <span class=\"token operator\">=</span> rand_text_alpha<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\njs <span class=\"token operator\">=</span> <span class=\"token string\">%Q|\nvar <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>var_array<span class=\"token delimiter tag\">}</span></span> = new Array();\n<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>var_array<span class=\"token delimiter tag\">}</span></span>[0] = windows.document.createElement(\"img\");\n<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>var_array<span class=\"token delimiter tag\">}</span></span>[0][\"src\"] = \"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>val_src<span class=\"token delimiter tag\">}</span></span>\";\n|</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"the-obfuscatejs-class\" style=\"position:relative;\"><a href=\"#the-obfuscatejs-class\" aria-label=\"the obfuscatejs class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The ObfuscateJS class</h2>\n<p>The ObfuscateJS class is like the <code class=\"language-text\">rand_text_alpha</code> technique on steroids, but even better. It allows you to replace symbol names such as variables, methods, classes, and namespaces. It can also obfuscate strings by either randomly using <code class=\"language-text\">fromCharCode</code> or <code class=\"language-text\">unescape</code>. And lastly, it can strip JavaScript comments, which is handy because exploits often are hard to understand and read so you need comments to remember why something is written in a specific way, but you don't want to show or leak those comments in a pentest.</p>\n<p>To use ObfuscateJS, let's use the MS12-063 example again to demonstrate. If you feel like following the steps yourself without writing a module, what you can do is go ahead and run <code class=\"language-text\">msfconsole</code>, and then switch to irb, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ ./msfconsole -q\nmsf &gt; irb\n[*] Starting IRB shell...\n\n&gt;&gt; </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And then you are ready to go.</p>\n<p>The first thing you do with ObfuscateJS is you need to initialize it with the JavaScript you want to obfuscate, so in this case, begin like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">js = %Q|\nvar arrr = new Array();\narrr[0] = windows.document.createElement(&quot;img&quot;);\narrr[0][&quot;src&quot;] = &quot;a&quot;;\n|\n\nobfu = ::Rex::Exploitation::ObfuscateJS.new(js)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">obfu</code> should return a <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/obfuscatejs.rb\">Rex::Exploitation::ObfuscateJS</a> object. It allows you to do a lot of things, you can really just call <code class=\"language-text\">methods</code>, or look at the source to see what methods are available (with additional API documentation). But for demo purposes, we'll showcase the most common one: the <code class=\"language-text\">obfuscate</code> method.</p>\n<p>To actually obfuscate, you need to call the <code class=\"language-text\">obfuscate</code> method. This method accepts a symbols argument that allows you to manually specify what symbol names (variables, methods, classes, etc) to obfuscate, it should be in a hash like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">'Variables'</span>  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'var1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'Methods'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'method1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'Namespaces'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'Classes'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'Namespace'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Class'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So if I want to obfuscate the variable <code class=\"language-text\">arrr</code>, and I want to obfuscate the src string, here's how:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; obfu.obfuscate(&#39;Symbols&#39; =&gt; {&#39;Variables&#39;=&gt;[&#39;arrr&#39;]}, &#39;Strings&#39; =&gt; true)\n=&gt; &quot;\\nvar QqLFS = new Array();\\nQqLFS[0] = windows.document.createElement(unescape(String.fromCharCode(  37, 54, 071, 045, 0x36, 0144, 37, 066, 067 )));\\nQqLFS[0][String.fromCharCode(  115, 0x72, 0143 )] = unescape(String.fromCharCode(  045, 0x36, 0x31 ));\\n&quot;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>In some cases, you might actually want to know the obfuscated version of a symbol name. One scenario is calling a JavaScript function from an element's event handler, such as this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\nfunction test() {\n\talert(&quot;hello, world!&quot;);\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=&quot;test();&quot;&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The obfuscated version would look like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">js <span class=\"token operator\">=</span> <span class=\"token string\">%Q|\nfunction test() {\n\talert(\"hello, world!\");\n}\n|</span>\n\nobfu <span class=\"token operator\">=</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Rex</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploitation</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ObfuscateJS</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>js<span class=\"token punctuation\">)</span>\nobfu<span class=\"token punctuation\">.</span>obfuscate<span class=\"token punctuation\">(</span><span class=\"token string\">'Symbols'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Methods'</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Strings'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\nhtml <span class=\"token operator\">=</span> <span class=\"token string\">%Q|\n&lt;html>\n&lt;head>\n&lt;script>\n<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>js<span class=\"token delimiter tag\">}</span></span>\n&lt;/script>\n&lt;/head>\n&lt;body onload=\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>obfu<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token delimiter tag\">}</span></span>();\">\n&lt;/body>\n&lt;/html>\n|</span>\n\nputs html</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"the-jsobfu-class\" style=\"position:relative;\"><a href=\"#the-jsobfu-class\" aria-label=\"the jsobfu class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The JSObfu class</h2>\n<p>The JSObfu class used to be ObfuscateJS' cousin, but it has been completely rewritten since September 2014, and packaged as a <a href=\"https://rubygems.org/gems/jsobfu\">gem</a>. The obfuscation is more complex and you can actually tell it to obfuscate multiple times. You also no longer have to manually specify what symbol names to change, it just knows.</p>\n<p><strong>Trying JSObfu in Rex</strong></p>\n<p>Let's get back to irb again to demonstrate how easy it is to use JSObfu:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ ./msfconsole -q\nmsf &gt; irb\n[*] Starting IRB shell...\n\n&gt;&gt; </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This time we'll do a \"hello world\" example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; js = ::Rex::Exploitation::JSObfu.new %Q|alert(&#39;hello, world!&#39;);|\n=&gt; alert(&#39;hello, world!&#39;);\n&gt;&gt; js.obfuscate\n=&gt; nil</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And here's the output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">window[(function () { var _d=&quot;t&quot;,y=&quot;ler&quot;,N=&quot;a&quot;; return N+y+_d })()]((function () { var f=&#39;d!&#39;,B=&#39;orl&#39;,Q2=&#39;h&#39;,m=&#39;ello, w&#39;; return Q2+m+B+f })());</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Like ObfuscateJS, if you need to get the randomized version of a symbol name, you can still do that. We'll demonstrate this with the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token operator\">></span><span class=\"token operator\">></span> js <span class=\"token operator\">=</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Rex</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploitation</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">JSObfu</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token string\">%Q|function test() { alert(\"hello\"); }|</span>\n<span class=\"token operator\">=</span><span class=\"token operator\">></span> function test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  alert<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span><span class=\"token operator\">></span> js<span class=\"token punctuation\">.</span>obfuscate</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Say we want to know the randomized version of the method name \"test\":</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token operator\">></span><span class=\"token operator\">></span> puts js<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n_</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>OK, double check right quick:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; puts js\nfunction _(){window[(function () { var N=&quot;t&quot;,r=&quot;r&quot;,i=&quot;ale&quot;; return i+r+N })()](String.fromCharCode(0150,0x65,0154,0x6c,0x6f));}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Yup, that looks good to me.</p>\n<p>And finally, let's try to obfuscate a few times to see how that goes:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; js = ::Rex::Exploitation::JSObfu.new %Q|alert(&#39;hello, world!&#39;);|\n=&gt; alert(&#39;hello, world!&#39;);\n&gt;&gt; js.obfuscate(:iterations=&gt;3)\n=&gt; window[String[((function(){var s=(function () { var r=&quot;e&quot;; return r })(),Q=(function () { var I=&quot;d&quot;,dG=&quot;o&quot;; return dG+I })(),c=String.fromCharCode(0x66,114),w=(function () { var i=&quot;C&quot;,v=&quot;r&quot;,f=&quot;omCh&quot;,j=&quot;a&quot;; return f+j+v+i })();return c+w+Q+s;})())]((&#39;Urx&#39;.length*((0x1*(01*(1*020+5)+1)+3)*&#39;u&#39;.length+(&#39;SGgdrAJ&#39;.length-7))+((&#39;Iac&#39;.length*&#39;XLR&#39;.length+2)*&#39;qm&#39;.length+0)),((&#39;l&#39;.length*((function () { var vZ=&#39;k&#39;; return vZ })()[((function () { var E=&quot;h&quot;,t=&quot;t&quot;,O=&quot;leng&quot;; return O+t+E })())]*(0x12*1+0)+&#39;xE&#39;.length)+&#39;h&#39;.length)*(function () { var Z=&#39;uA&#39;,J=&#39;tR&#39;,D=&#39;x&#39;; return D+J+Z })()[((function () { var m=&quot;th&quot;,o=&quot;g&quot;,U=&quot;l&quot;,Y=&quot;en&quot;; return U+Y+o+m })())]+&#39;lLc&#39;.length),(&#39;mQ&#39;.length*(02*023+2)+(&#39;Tt&#39;.length*&#39;OEzGiMVf&#39;.length+5)),(String.fromCharCode(0x48,0131)[((function () { var i=&quot;gth&quot;,r=&quot;len&quot;; return r+i })())]*(&#39;E&#39;.length*0x21+19)+(0x1*&#39;XlhgGJ&#39;.length+4)),(String.fromCharCode(0x69)[((function () { var L=&quot;th&quot;,Q=&quot;n&quot;,$=&quot;l&quot;,I=&quot;g&quot;,x=&quot;e&quot;; return $+x+Q+I+L })())]*(&#39;QC&#39;.length*0x2b+3)+(01*26+1)))]((function(){var C=String[((function () { var w=&quot;rCode&quot;,j=&quot;mCha&quot;,A=&quot;fr&quot;,B=&quot;o&quot;; return A+B+j+w })())]((6*0x10+15),(&#39;riHey&#39;.length*(&#39;NHnex&#39;.length*0x4+2)+4),(01*95+13),(1*(&#39;Z&#39;.length*(0x1*(01*(0x3*6+5)+1)+18)+12)+46),(0x1*(01*013+6)+16)),JQ=String[((function () { var NO=&quot;ode&quot;,T=&quot;rC&quot;,HT=&quot;fromCha&quot;; return HT+T+NO })())]((&#39;J&#39;.length*0x54+17),(0x2*051+26),(&#39;TFJAGR&#39;.length*(&#39;ymYaSJtR&#39;.length*&#39;gv&#39;.length+0)+12),(01*0155+2),(0xe*&#39;FBc&#39;.length+2),(0x1*22+10),(3*(01*043+1)+11)),g=(function(){var N=(function () { var s=&#39;h&#39;; return s })();return N;})();return g+JQ+C;})());</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Using JSObfu for module development</strong></p>\n<p>When you are writing a module, you should not call Rex directly like the above examples. Instead, you should be using the <code class=\"language-text\">#js_obfuscate</code> method found in <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/exploit/jsobfu.rb\">JSObfu mixin</a>. When you're using JavaScript in your module, always do write it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\"># This returns a Rex::Exploitation::JSObfu object</span>\njs <span class=\"token operator\">=</span> js_obfuscate<span class=\"token punctuation\">(</span>your_code<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Note that by default, even though your module is calling the #js_obfuscate method, obfuscation will not kick in unless the user sets the JsObfuscate datastore option. This option is an OptInt, which allows you to set the number of times to obfuscate (default is 0).</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference(s)</h2>\n<p><a href=\"https://community.rapid7.com/community/metasploit/blog/2011/07/08/jsobfu\">https://community.rapid7.com/community/metasploit/blog/2011/07/08/jsobfu</a></p>"}},"pageContext":{"id":"10dc1ba8-fc67-5dcd-b4f3-70b3f664da75"}}}