{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/How-to-Send-an-HTTP-Request-Using-HTTPClient","result":{"data":{"markdownRemark":{"id":"3a88eeee-a323-5909-90f5-80b3f184264e","frontmatter":{"title":"How to Send an HTTP Request Using HTTPClient","root":null},"html":"<p>This is an example of how to write a module that uses the <a href=\"https://rapid7.github.io/metasploit-framework/api/Msf/Exploit/Remote/HttpClient.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HttpClient</a> mixin to send a basic HTTP request.</p>\n<h3 id=\"there-are-mainly-two-common-methods-you-will-see\" style=\"position:relative;\"><a href=\"#there-are-mainly-two-common-methods-you-will-see\" aria-label=\"there are mainly two common methods you will see permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>There are mainly two common methods you will see:</h3>\n<ul>\n<li><strong><a href=\"https://rapid7.github.io/metasploit-framework/api/Msf/Exploit/Remote/HttpClient.html#send_request_raw-instance_method\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">send<em>request</em>raw</a></strong> - You use this to send a raw HTTP request. Usually, you will want this method if you need something that violates the specification; in most other cases, you should prefer <code class=\"language-text\">send_request_cgi</code>.  If you wish to learn about how this method works, look at the documentation for <a href=\"https://rapid7.github.io/metasploit-framework/api/Rex/Proto/Http/Client.html#request_raw-instance_method\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Rex::Proto::Http::Client#request_raw</code></a>.</li>\n</ul>\n<p>Here's a basic example of how to use <code class=\"language-text\">send_request_raw</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">\tsend_request_raw<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'uri'</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token string\">'/index.php'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li><strong><a href=\"https://rapid7.github.io/metasploit-framework/api/Msf/Exploit/Remote/HttpClient.html#send_request_cgi-instance_method\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">send<em>request</em>cgi</a></strong> - You use this to send a more CGI-compatible HTTP request. If your request contains a query string (or POST data), then you should use this.  If you wish to learn about how this method works, check out <a href=\"https://rapid7.github.io/metasploit-framework/api/Rex/Proto/Http/Client.html#request_cgi-instance_method\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Rex::Proto::Http::Client#request_cgi</code></a>.</li>\n</ul>\n<p>Here's a very basic example for <code class=\"language-text\">send_request_cgi</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">\tsend_request_cgi<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">'method'</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'uri'</span>      <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'/hello_world.php'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'vars_get'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">'param_1'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">'param_2'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'123'</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Please note</strong>: <code class=\"language-text\">send_request_raw</code> and <code class=\"language-text\">send_request_cgi</code> will return a <code class=\"language-text\">nil</code> if there's a timeout, so please make sure to account for that condition when you handle the return value.</p>\n<h3 id=\"uri-parsing\" style=\"position:relative;\"><a href=\"#uri-parsing\" aria-label=\"uri parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URI Parsing</h3>\n<p>Before you send a HTTP request, you will most likely have to do some URI parsing.  This is a tricky task, because sometimes when you join paths, you may accidentally get double slashes, like this: \"/test//index.php\".  Or for some reason you have a missing slash.  These are really commonly made mistakes.  So here's how you can handle it safely:</p>\n<p><strong>1</strong> - Register your default URI datastore option as 'TARGETURI':</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">\tregister_options<span class=\"token punctuation\">(</span>\n\t\t<span class=\"token punctuation\">[</span>\n\t\t\t<span class=\"token constant\">OptString</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TARGETURI'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The base path to XXX application'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/xxx_v1/'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>2</strong> - Load your TARGETURI with <a href=\"https://rapid7.github.io/metasploit-framework/api/Msf/Exploit/Remote/HttpClient.html#target_uri-instance_method\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">target_uri</code></a>, that way the URI input validation will kick in, and then you get a real <code class=\"language-text\">URI</code> object:</p>\n<p>In this example, we'll just load the path:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">\turi <span class=\"token operator\">=</span> target_uri<span class=\"token punctuation\">.</span>path</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>3</strong> - When you want to join another URI, always use <a href=\"https://rapid7.github.io/metasploit-framework/api/Msf/Exploit/Remote/HttpClient.html#normalize_uri-instance_method\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">normalize_uri</code></a>:</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">\t<span class=\"token comment\"># Returns: \"/xxx_v1/admin/upload.php\"</span>\n\turi <span class=\"token operator\">=</span> normalize_uri<span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> <span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'upload.php'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>4</strong> - When you're done normalizing the URI, you're ready to use <code class=\"language-text\">send_request_cgi</code> or <code class=\"language-text\">send_request_raw</code></p>\n<p>Please note: The <code class=\"language-text\">normalize_uri</code> method will always follow these rules:</p>\n<ol>\n<li>The URI should always begin with a slash.</li>\n<li>You will have to decide if you need the trailing slash or not.</li>\n<li>There should be no double slashes.</li>\n</ol>\n<h3 id=\"full-example\" style=\"position:relative;\"><a href=\"#full-example\" aria-label=\"full example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Full Example</h3>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">\t<span class=\"token keyword\">require</span> <span class=\"token string\">'msf/core'</span>\n\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">MetasploitModule</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Auxiliary</span>\n\n\t\t<span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Remote</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HttpClient</span>\n\n\t\t<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>update_info<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">'Name'</span>           <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'HttpClient Example'</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">'Description'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">%q{\n\t\t\t\t\tDo a send_request_cgi()\n\t\t\t\t}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">'Author'</span>         <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'sinn3r'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">'License'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token constant\">MSF_LICENSE</span>\n\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t\t\tregister_options<span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token punctuation\">[</span>\n\t\t\t\t\t<span class=\"token constant\">OptString</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TARGETURI'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The base path'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\n\n\t\t<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">run</span></span>\n\t\t\turi <span class=\"token operator\">=</span> target_uri<span class=\"token punctuation\">.</span>path\n\n\t\t\tres <span class=\"token operator\">=</span> send_request_cgi<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token string\">'method'</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">'uri'</span>      <span class=\"token operator\">=</span><span class=\"token operator\">></span> normalize_uri<span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> <span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">'vars_get'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token string\">'p1'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"This is param 1\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token string\">'p2'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"This is param 2\"</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t\t\t<span class=\"token keyword\">if</span> res <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> <span class=\"token number\">200</span>\n\t\t\t\tprint_good<span class=\"token punctuation\">(</span><span class=\"token string\">\"I got a 200, awesome\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tprint_error<span class=\"token punctuation\">(</span><span class=\"token string\">\"No 200, feeling blue\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">end</span>\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"working-with-burp-suite\" style=\"position:relative;\"><a href=\"#working-with-burp-suite\" aria-label=\"working with burp suite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with Burp Suite</h3>\n<p>Burp Suite is a useful tool to examine or modify HTTPS traffic while developing a module using HttpClient. To do this:</p>\n<ol>\n<li>Start Burp: <code class=\"language-text\">java -jar burpsuite.jar</code></li>\n<li>In Burp, click on the Proxies tab, and then Options. Configure the proxy listener there. In this example, let's say we have a listener on port 6666.</li>\n<li>Once the Burp listener is up, start msfconsole and load the module you're working on.</li>\n<li>Enter: <code class=\"language-text\">set Proxies HTTP:127.0.0.1:6666</code></li>\n<li>Go ahead and run the module, Burp should intercept the HTTPS traffic.</li>\n</ol>\n<p>Note that Burp only supports HTTPS for HttpClient. This problem is only specific to Burp and Metasploit.</p>\n<p>If you need to examine HTTP traffic for HttpClient, a workaround is adding the following method in your module. This will override HttpClient's send<em>request</em>* method, and return the modified output:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">send_request_cgi</span></span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span>\n  res <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span>\n  puts res<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>to_s\n  puts\n  puts res<span class=\"token punctuation\">.</span>to_s\n  puts\n  puts\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>You can do the same for send<em>request</em>raw as well.</p>\n<h3 id=\"other-common-questions\" style=\"position:relative;\"><a href=\"#other-common-questions\" aria-label=\"other common questions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other Common questions:</h3>\n<p><strong>1 - Can I use <code class=\"language-text\">vars_get</code> and <code class=\"language-text\">vars_post</code> together?</strong></p>\n<p>Yes. When you supply a hash to <code class=\"language-text\">vars_get</code>, basically it means \"put all this data in the query string\". When you supply a hash to <code class=\"language-text\">vars_post</code>, it means \"put all this data in the body.\" All of them will be in the same request. You do need to make sure you're using <code class=\"language-text\">send_request_cgi</code>, of course.</p>\n<p><strong>2 - I can't use <code class=\"language-text\">vars_get</code> or <code class=\"language-text\">vars_post</code> due to some weird reason, what to do?</strong></p>\n<p>Do mention about this problem in the code (as a comment). If you can't use <code class=\"language-text\">vars_post</code>, you can try the <code class=\"language-text\">data</code> key instead, which will send your post data raw. Normally, the most common solution to get around <code class=\"language-text\">vars_get</code> is to leave your stuff in the <code class=\"language-text\">uri</code> key. msftidy will flag this, but only as an \"Info\" and not a warning, which means you should still pass msftidy anyway. If this is a common problem, we can always change msftidy.</p>\n<p><strong>3 - Do I need to manually do basic auth?</strong></p>\n<p>You do not need to manually do basic auth in your request, because HttpClient should automatically do that for you. All you have to do is set the username and password in the datastore options, and then the mixin will use that when the web server asks.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-send-an-HTTP-request-using-Rex%3A%3AProto%3A%3AHttp%3A%3AClient\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/rapid7/metasploit-framework/wiki/How-to-send-an-HTTP-request-using-Rex%3A%3AProto%3A%3AHttp%3A%3AClient</a></p>"}},"pageContext":{"id":"3a88eeee-a323-5909-90f5-80b3f184264e"}}}