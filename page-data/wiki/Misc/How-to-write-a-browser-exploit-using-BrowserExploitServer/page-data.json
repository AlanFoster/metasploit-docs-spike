{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/How-to-write-a-browser-exploit-using-BrowserExploitServer","result":{"data":{"markdownRemark":{"id":"39e96187-1bd9-5b39-bc40-074536f60334","frontmatter":{"title":"How to write a browser exploit using BrowserExploitServer","root":null},"html":"<p>The Metasploit Framework provides different mixins you can use to develop a browser exploit, mainly they are:</p>\n<ul>\n<li><strong><a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-write-a-browser-exploit-using-HttpServer\">Msf::Exploit::Remote::HttpServer</a></strong> - The most basic form of a HTTP server.</li>\n<li><strong>Msf::Exploit::Remote::HttpServer::HTML</strong> - which provides Javascript functions that the module can use when crafting HTML contents.</li>\n<li><strong><a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-write-a-browser-exploit-using-BrowserExploitServer\">Msf::Exploit::Remote::BrowserExploitServer</a></strong> - which includes features from both HttpServer and HttpServer::HTML, but with even more goodies. This writeup covers the <a href=\"https://rapid7.github.io/metasploit-framework/Msf/Exploit/Remote/BrowserExploitServer.html\">BrowserExploitServer</a> mixin.</li>\n</ul>\n<h3 id=\"the-automatic-exploitation-procedure\" style=\"position:relative;\"><a href=\"#the-automatic-exploitation-procedure\" aria-label=\"the automatic exploitation procedure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Automatic Exploitation Procedure</h3>\n<p>The BrowserExploitServer mixin is the only mixin specially designed for browser exploitation. Before you use this mixin, you should understand what it does behind the scenes for you:</p>\n<ol>\n<li>It automatically collects the browser information, including things like: OS name, version, browser name, browser version, whether a proxy is used, Java plugin version, Microsoft Office version, etc, etc. If the browser doesn't have Javascript enabled, then it knows less about the target. All the info gathered will be stored in a profile managed by the mixin.</li>\n<li>The mixin will then tag the browser to track the session. It will also use the same tag to retrieve the profile when needed.</li>\n<li>Before the mixin decides if it should serve the exploit to the browser, it will check with the module for any exploitable requirements. If the requirements aren't met, it will send a 404 to the browser, and the operation bails.</li>\n<li>If the requirements are met, the mixin will pass the profile (information about the browser gathered during the detection stage) to the module, and let it take over the rest.</li>\n</ol>\n<p>Hint: In the module, you can check the :source key in the profile to determine whether Javascript is enabled or not: If the :source is \"script\", it means Javascript is enabled. If it's \"headers\" (as in HTTP headers), then the browser has Javascript disabled.</p>\n<h3 id=\"setting-exploitable-requirements\" style=\"position:relative;\"><a href=\"#setting-exploitable-requirements\" aria-label=\"setting exploitable requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting Exploitable Requirements</h3>\n<p>Being able to set browser requirements is an important feature of the mixin. It allows your attack to be smarter, more targeted, and prevents accidents. Here's a scenario: Say you have a vulnerability against Internet Explorer that only affects a specific range of MSHTML builds, you can set the :os<em>name, :ua</em>name, :ua<em>ver, and :mshtml</em>build to make sure it doesn't blindly exploit against anything else. The :mshtml_build requirement can be found in \"Product version\" under MSHTML's file properties.</p>\n<p>Exploitable browser requirements are defined under \"BrowserRequirements\" in the module's metadata. Here's an example of defining a vulnerable target running some ActiveX control:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'BrowserRequirements'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n\tsource<span class=\"token punctuation\">:</span> <span class=\"token regex\">/script/i</span><span class=\"token punctuation\">,</span>\n        activex<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            clsid<span class=\"token punctuation\">:</span> <span class=\"token string\">'{D27CDB6E-AE6D-11cf-96B8-444553540000}'</span><span class=\"token punctuation\">,</span>\n            method<span class=\"token punctuation\">:</span> <span class=\"token string\">'LoadMovie'</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\tos_name<span class=\"token punctuation\">:</span> <span class=\"token regex\">/win/i</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>You can also define target-specific requirements. This is also how the mixin is able to automatically select a target, and you can get it with the \"get_target\" method. Here's an example of how to define target-specific requirements for IE8 on Win XP and IE 9 on Win 7:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'BrowserRequirements'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token symbol\">:source</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token regex\">/script|headers/i</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'ua_name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token constant\">HttpClients</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">IE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'Targets'</span>             <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token string\">'Automatic'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'Windows XP with IE 8'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token symbol\">:os_name</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'Windows XP'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'ua_ver'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'8.0'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Rop'</span>       <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Offset'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0x100</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'Windows 7 with IE 9'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'os_name'</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'Windows 7'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'ua_ver'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'9.0'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Rop'</span>       <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Offset'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0x200</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>You can use these for <strong>:os_name</strong>:</p>\n<table>\n<thead>\n<tr>\n<th>Constant</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OperatingSystems::Match::WINDOWS</td>\n<td>Match all versions of Windows</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_95</td>\n<td>Match Windows 95</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_98</td>\n<td>Match Windows 98</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_ME</td>\n<td>Match Windows ME</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_NT3</td>\n<td>Match Windows NT 3</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_NT4</td>\n<td>Match Windows NT 4</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_2000</td>\n<td>Match Windows 2000</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_XP</td>\n<td>Match Windows XP</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_2003</td>\n<td>Match Windows Server 2003</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_VISTA</td>\n<td>Match Windows Vista</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_2008</td>\n<td>Match Windows Server 2008</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_7</td>\n<td>Match Windows 7</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_2012</td>\n<td>Match Windows 2012</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_8</td>\n<td>Match Windows 8</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::WINDOWS_81</td>\n<td>Match Windows 8.1</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::LINUX</td>\n<td>Match a Linux distro</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::MAC_OSX</td>\n<td>Match Mac OSX</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::FREEBSD</td>\n<td>Match FreeBSD</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::NETBSD</td>\n<td>Match NetBSD</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::OPENBSD</td>\n<td>Match OpenBSD</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::VMWARE</td>\n<td>Match VMWare</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::ANDROID</td>\n<td>Match Android</td>\n</tr>\n<tr>\n<td>OperatingSystems::Match::APPLE_IOS</td>\n<td>Match Apple IOS</td>\n</tr>\n</tbody>\n</table>\n<p>You can use these for <strong>:ua_name</strong>:</p>\n<table>\n<thead>\n<tr>\n<th>Constant</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HttpClients::IE</td>\n<td>\"MSIE\"</td>\n</tr>\n<tr>\n<td>HttpClients::FF</td>\n<td>\"Firefox\"</td>\n</tr>\n<tr>\n<td>HttpClients::SAFARI</td>\n<td>\"Safari\"</td>\n</tr>\n<tr>\n<td>HttpClients::OPERA</td>\n<td>\"Opera\"</td>\n</tr>\n<tr>\n<td>HttpClients::CHROME</td>\n<td>\"Chrome\"</td>\n</tr>\n</tbody>\n</table>\n<p>More of these constants can be found here:\n<a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/constants.rb\">https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/constants.rb</a></p>\n<p>All currently supported requirements by the mixin can be found here (see REQUIREMENT<em>KEY</em>SET):\n<a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/exploit/remote/browser_exploit_server.rb#L46\">https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/exploit/remote/browser_exploit_server.rb#L46</a></p>\n<h3 id=\"set-up-a-listener\" style=\"position:relative;\"><a href=\"#set-up-a-listener\" aria-label=\"set up a listener permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set up a listener</h3>\n<p>After the detection stage and the requirement check, the mixin will trigger the \"on<em>request</em>exploit\" callback method, that's where you handle the HTTP request, craft the HTML, and send back the exploit response. Here's an example of how to set up \"on<em>request</em>exploit\":</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\">#</span>\n<span class=\"token comment\"># Listens for the HTTP request</span>\n<span class=\"token comment\"># cli is the socket</span>\n<span class=\"token comment\"># request is the Rex::Proto::Http::Request object</span>\n<span class=\"token comment\"># target_info is a hash that contains all the browser info (aka the profile)</span>\n<span class=\"token comment\">#</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">on_request_exploit</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> target_info<span class=\"token punctuation\">)</span>\n\tprint_status<span class=\"token punctuation\">(</span><span class=\"token string\">\"Here's what I know about the target: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>target_info<span class=\"token punctuation\">.</span>inspect<span class=\"token delimiter tag\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"crafting-html-with-browserexploitserver\" style=\"position:relative;\"><a href=\"#crafting-html-with-browserexploitserver\" aria-label=\"crafting html with browserexploitserver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Crafting HTML with BrowserExploitServer</h3>\n<p>There are two coding styles the BrowserExploitServer mixin supports: The good old HTML, or <a href=\"http://ruby-doc.org/stdlib-2.1.3/libdoc/erb/rdoc/ERB.html\">ERB</a> template. The first is pretty self-explanatory:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">on_request_exploit</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> target_info<span class=\"token punctuation\">)</span>\n\thtml <span class=\"token operator\">=</span> <span class=\"token string\">%Q|\n\t&lt;html>\n\tHello, world!\n\t&lt;/html>\n\t|</span>\n\tsend_exploit_html<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span> </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://ruby-doc.org/stdlib-2.1.3/libdoc/erb/rdoc/ERB.html\">ERB</a> is a new way to write Metasploit browser exploits. If you've written one or two web applications, this is no stranger to you. When you're using the BrowserExploitServer mixin to write an exploit, what really happens is you're writing a rails template. Here's an example of using of this feature:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">on_request_exploit</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> target_info<span class=\"token punctuation\">)</span>\n\thtml <span class=\"token operator\">=</span> <span class=\"token string\">%Q|\n\t&lt;html>\n\tDo you feel lucky, punk?&lt;br>\n\t&lt;% if [true, false].sample %>\n\tLucky!&lt;br>\n\t&lt;% else %>\n\tBad luck, bro!&lt;Br>\n\t&lt;% end %>\n\t&lt;/html>\n\t|</span>\n\tsend_exploit_html<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If you want to access local variables or arguments, make sure to pass the binding object to send<em>exploit</em>html:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">exploit_template1</span></span><span class=\"token punctuation\">(</span>target_info<span class=\"token punctuation\">,</span> txt<span class=\"token punctuation\">)</span>\n\ttxt2 <span class=\"token operator\">=</span> <span class=\"token string\">\"I can use local vars!\"</span>\n\n\ttemplate <span class=\"token operator\">=</span> <span class=\"token string\">%Q|\n\t&lt;% msg = \"This page is generated by an exploit\" %>\n\t&lt;%=msg%>&lt;br>\n\t&lt;%=txt%>&lt;br>\n\t&lt;%=txt2%>&lt;br>\n\t&lt;p>&lt;/p>\n\tData gathered from source: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>target_info<span class=\"token punctuation\">[</span><span class=\"token symbol\">:source</span><span class=\"token punctuation\">]</span><span class=\"token delimiter tag\">}</span></span>&lt;br>\n\tOS name: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>target_info<span class=\"token punctuation\">[</span><span class=\"token symbol\">:os_name</span><span class=\"token punctuation\">]</span><span class=\"token delimiter tag\">}</span></span>&lt;br>\n\tUA name: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>target_info<span class=\"token punctuation\">[</span><span class=\"token symbol\">:ua_name</span><span class=\"token punctuation\">]</span><span class=\"token delimiter tag\">}</span></span>&lt;br>\n\tUA version: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>target_info<span class=\"token punctuation\">[</span><span class=\"token symbol\">:ua_ver</span><span class=\"token punctuation\">]</span><span class=\"token delimiter tag\">}</span></span>&lt;br>\n\tJava version: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>target_info<span class=\"token punctuation\">[</span><span class=\"token symbol\">:java</span><span class=\"token punctuation\">]</span><span class=\"token delimiter tag\">}</span></span>&lt;br>\n\tOffice version: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>target_info<span class=\"token punctuation\">[</span><span class=\"token symbol\">:office</span><span class=\"token punctuation\">]</span><span class=\"token delimiter tag\">}</span></span>\n\t|</span>\n\n\t<span class=\"token keyword\">return</span> template<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">on_request_exploit</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> target_info<span class=\"token punctuation\">)</span>\n\tsend_exploit_html<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> exploit_template<span class=\"token punctuation\">(</span>target_info<span class=\"token punctuation\">,</span> txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The BrowserExploitServer mixin also offers plenty of other things useful while crafting the exploit. For example: it can generate a target-specific payload when you call the \"get_payload\" method. It also gives you access to the RopDb mixin, which contains a collection of ROPs to bypass DEP (Data Execution Prevention). Make sure to check out the API documentation for more information.</p>\n<p>To get thing started, here's a code example you can use start developing your browser exploit:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\">##</span>\n<span class=\"token comment\"># This module requires Metasploit: http://metasploit.com/download</span>\n<span class=\"token comment\"># Current source: https://github.com/rapid7/metasploit-framework</span>\n<span class=\"token comment\">##</span>\n\n<span class=\"token keyword\">require</span> <span class=\"token string\">'msf/core'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MetasploitModule</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Remote</span>\n  <span class=\"token constant\">Rank</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NormalRanking</span>\n\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Remote</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">BrowserExploitServer</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>update_info<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Name'</span>           <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"BrowserExploitServer Example\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Description'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">%q{\n        This is an example of building a browser exploit using the BrowserExploitServer mixin\n      }</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'License'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token constant\">MSF_LICENSE</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Author'</span>         <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'sinn3r'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'References'</span>     <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">[</span> <span class=\"token string\">'URL'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://metasploit.com'</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Platform'</span>       <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'win'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'BrowserRequirements'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token symbol\">:source</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token regex\">/script|headers/i</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Targets'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">[</span> <span class=\"token string\">'Automatic'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'Windows XP with IE 8'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">'os_name'</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'Windows XP'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'ua_name'</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'MSIE'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'ua_ver'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'8.0'</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'Windows 7 with IE 9'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">'os_name'</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'Windows 7'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'ua_name'</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'MSIE'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'ua_ver'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'9.0'</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Payload'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'BadChars'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"\\x00\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'DisclosureDate'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"Apr 1 2013\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'DefaultTarget'</span>  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">exploit_template</span></span><span class=\"token punctuation\">(</span>target_info<span class=\"token punctuation\">)</span>\n    template <span class=\"token operator\">=</span> <span class=\"token string\">%Q|\n    Data source: &lt;%=target_info[:source]%>&lt;br>\n    OS name: &lt;%=target_info[:os_name]%>&lt;br>\n    UA name: &lt;%=target_info[:ua_name]%>&lt;br>\n    UA version: &lt;%=target_info[:ua_ver]%>&lt;br>\n    Java version: &lt;%=target_info[:java]%>&lt;br>\n    Office version: &lt;%=target_info[:office]%>\n    |</span>\n\n    <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">on_request_exploit</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> target_info<span class=\"token punctuation\">)</span>\n    send_exploit_html<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> exploit_template<span class=\"token punctuation\">(</span>target_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"javascript-obfuscation\" style=\"position:relative;\"><a href=\"#javascript-obfuscation\" aria-label=\"javascript obfuscation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript Obfuscation</h3>\n<p>BrowserExploitServer relies on the <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/exploit/jsobfu.rb\">JSObfu mixin</a> to support JavaScript obfuscation. When you're writing JavaScript, you should always write it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">js <span class=\"token operator\">=</span> js_obfuscate<span class=\"token punctuation\">(</span>your_code<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The <code class=\"language-text\">#js_obfuscate</code> will return a <code class=\"language-text\">Rex::Exploitation::JSObfu</code> object. To get the obfuscated JavaScript, call the <code class=\"language-text\">#to_s</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">js<span class=\"token punctuation\">.</span>to_s</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>If you need to access an obfuscated symbol name, you can use then <code class=\"language-text\">#sym</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\"># Get the obfuscated version of function name test()</span>\nvar_name <span class=\"token operator\">=</span> js<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Note that by default, even though your module is calling the <code class=\"language-text\">#js_obfuscate</code> method, obfuscation will not kick in unless the user sets the JsObfuscate datastore option. This option is an OptInt, which allows you to set the number of times to obfuscate (default is 0).</p>\n<p>If your BES-based exploit does not want obfuscation at all, always make sure you call the <code class=\"language-text\">#deregister_options</code> and remove the JsObfuscate option. Like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">deregister_options<span class=\"token punctuation\">(</span><span class=\"token string\">'JsObfuscate'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>To learn more about Metasploit's JavaScript obfuscation capabilities, please read <a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-obfuscate-JavaScript-in-Metasploit\">How to obfuscate JavaScript in Metasploit</a>.</p>\n<h3 id=\"related-articles\" style=\"position:relative;\"><a href=\"#related-articles\" aria-label=\"related articles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related Articles:</h3>\n<ul>\n<li><a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-write-a-browser-exploit-using-HttpServer\">https://github.com/rapid7/metasploit-framework/wiki/How-to-write-a-browser-exploit-using-HttpServer</a></li>\n<li><a href=\"https://github.com/rapid7/metasploit-framework/wiki/Information-About-Unmet-Browser-Exploit-Requirements\">https://github.com/rapid7/metasploit-framework/wiki/Information-About-Unmet-Browser-Exploit-Requirements</a></li>\n</ul>"}},"pageContext":{"id":"39e96187-1bd9-5b39-bc40-074536f60334"}}}