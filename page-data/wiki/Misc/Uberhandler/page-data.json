{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/Uberhandler","result":{"data":{"markdownRemark":{"id":"378dbdcc-2602-572a-bfc0-27a5d7bb2fc9","frontmatter":{"title":"Uberhandler","root":null},"html":"<h1 id=\"current-design\" style=\"position:relative;\"><a href=\"#current-design\" aria-label=\"current design permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Current Design</h1>\n<p>Metasploit payload modules are Ruby <code class=\"language-text\">Modules</code> and come in three types:</p>\n<ul>\n<li><code class=\"language-text\">Payload::Type::Single</code></li>\n<li><code class=\"language-text\">Payload::Type::Stage</code></li>\n<li><code class=\"language-text\">Payload::Type::Stager</code></li>\n</ul>\n<p>Payloads are created by creating an anonymous <code class=\"language-text\">Class</code> and including\nmixins for a <code class=\"language-text\">Handler</code> and either a single-stage payload or both a stage\nand stager, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">build_payload</span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>modules<span class=\"token punctuation\">)</span>\n  klass <span class=\"token operator\">=</span> <span class=\"token builtin\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Payload</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># Remove nil modules</span>\n  modules<span class=\"token punctuation\">.</span>compact<span class=\"token operator\">!</span>\n\n  <span class=\"token comment\"># Include the modules supplied to us with the mad skillz</span>\n  <span class=\"token comment\"># spoonfu style</span>\n  klass<span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>modules<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> klass\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The result is a <code class=\"language-text\">Class</code> for each combination of stage + stager +\nhandler.  E.g., <code class=\"language-text\">windows/meterpreter/reverse_tcp</code> includes\n<code class=\"language-text\">Msf::Handler::ReverseTcp</code> and the <code class=\"language-text\">Module</code>s defined in\n<code class=\"language-text\">modules/payloads/stagers/windows/reverse_tcp</code> and\n<code class=\"language-text\">modules/payloads/stages/windows/meterpreter</code>. As a corollary, this\nmeans that stages and stagers are intricately linked with each other and\ntheir handlers.</p>\n<h1 id=\"what-we-need\" style=\"position:relative;\"><a href=\"#what-we-need\" aria-label=\"what we need permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What we need</h1>\n<p>For the Uberhandler to function, it needs to:</p>\n<ul>\n<li>Track how many exploits currently need its services</li>\n<li>Be independent of the payload modules that use it</li>\n</ul>\n<p>The stagers need to:</p>\n<ul>\n<li>Communicate to the handler what kind of stage to send</li>\n</ul>\n<p>From a user's perspective, we need some way to indicate a generic\npayload type along with the handler.  The generic handlers were an\nearly attempt at providing this same concept.  Perhaps something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set PAYLOAD uber/meterpreter/reverse_tcp</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>"}},"pageContext":{"id":"378dbdcc-2602-572a-bfc0-27a5d7bb2fc9"}}}