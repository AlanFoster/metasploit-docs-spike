{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/How-to-do-reporting-or-store-data-in-module-development","result":{"data":{"markdownRemark":{"id":"69e275da-779d-5c15-8938-fb02883a08b3","frontmatter":{"title":"How to do reporting or store data in module development","root":null},"html":"<ul>\n<li><strong>store_loot()</strong> - Used to store both stolen files (both text and binary) and \"screencaps\" of commands such as a <code class=\"language-text\">ps -ef</code> and <code class=\"language-text\">ifconfig</code>. The file itself need not be of forensic-level integrity -- they may be parsed by a post module to extract only the relevant information for a penetration tester.</li>\n<li><strong>report<em>auth</em>info()</strong> - Used to store working credentials that are immediately reusable by another module. For example, a module dumping the local SMB hashes would use this, as would a module which reads username:password combinations for a specific host and service. Specifically, merely \"likely\" usernames and passwords should use store_loot() instead.</li>\n<li><strong>report_vuln()</strong> - Auxiliary and post modules that exercise a particular vulnerability should report<em>vuln() upon success. Note that exploit modules automatically report</em>vuln() as part of opening a session (there is no need to call it especially).</li>\n<li><strong>report_note()</strong> - Modules should make an effort to avoid report<em>note() when one of the above methods would be a better fit, but there are often cases where \"loot\" or \"cred\" or \"vuln\" classifications are not immediately appropriate. report</em>note() calls should always set a OID-style dotted :type, such as domain.hosts, so other modules may easily find them in the database.</li>\n<li><strong>report_host()</strong> - Reports a host's liveness and attributes such as operating system and service pack. This is less common because other reporting methods already do this, such as <code class=\"language-text\">report_service</code>, <code class=\"language-text\">report_exploit_success</code>, <code class=\"language-text\">report_client</code>, <code class=\"language-text\">report_note</code>, <code class=\"language-text\">report_host_tag</code>, <code class=\"language-text\">report_vuln</code>, <code class=\"language-text\">report_event</code>, <code class=\"language-text\">report_loot</code>, etc. Try not to repeat it.</li>\n<li><strong>report_service()</strong> - Reports a new service (port) that's been detected by your module.</li>\n<li><strong>report_client()</strong> - Reports a client running a host, such as a web browser.</li>\n<li><strong>report<em>web</em>site()</strong> - Reports a website, and must be tied to an existing <code class=\"language-text\">:service</code>. If there is no <code class=\"language-text\">:service</code>, you will have to supply <code class=\"language-text\">:host</code>, <code class=\"language-text\">:port</code>, <code class=\"language-text\">:ssl</code>.</li>\n<li><strong>report<em>web</em>page()</strong> - You can use this if your module discovers a webpage that look interesting.</li>\n<li><strong>report<em>web</em>form()</strong> - You can use this if your module discovers web forms that look interesting.</li>\n<li><strong>report<em>web</em>vuln()</strong> - Reports a web application vulnerability. Exploits don't really need to use this. It's more suitable for auxiliary modules that exploit a bug that determines that it is vulnerable.</li>\n<li><strong>report_loot()</strong> - Very rarely, modules might actually want to export loots without using store<em>loot(). Typically they do this with Ruby's file IO, but this won't be logged in the database so can't be tracked by Metasploit Framework. In that case, a `<code class=\"language-text\"></code>report</em>loot()<code class=\"language-text\">is needed. However, 99.9% of the time you should be using</code>store_loot()`<code class=\"language-text\"></code>.</li>\n</ul>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/wiki/Guidelines-for-Accepting-Modules-and-Enhancements\">https://github.com/rapid7/metasploit-framework/wiki/Guidelines-for-Accepting-Modules-and-Enhancements</a></p>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/auxiliary/report.rb\">https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/auxiliary/report.rb</a></p>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/db.rb\">https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/db.rb</a></p>"}},"pageContext":{"id":"69e275da-779d-5c15-8938-fb02883a08b3"}}}