{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/How-to-use-the-Seh-mixin-to-exploit-an-exception-handler","result":{"data":{"markdownRemark":{"id":"6ecce634-e6c6-5bca-b969-64af658a0246","frontmatter":{"title":"How to use the Seh mixin to exploit an exception handler","root":null},"html":"<p>Exception handler overwriting was once a very popular technique to exploit stack buffer overflows, but isn't so common anymore in newer programs because most likely they're compiled with SafeSEH. At one point, even with SafeSEH enabled, it was still possible to abuse an exception handler by heap spraying, but of course, memory protections didn't stop there. DEP/FASLR eventually came to the rescue, so that pretty much ended the glory days of SEH exploits. You can probably still find vulnerable applications not compiled with SafeSEH, but chances are the app is outdated, no longer maintained, or it is more of a learning experiment for the developer. Oh, and there's probably an exploit for that already. Nonetheless, exploiting a stack buffer overflow with exception handling is still fun, so if you do come across it, here's how it's supposed to be written with Metasploit's <code class=\"language-text\">Seh</code> mixin.</p>\n<h3 id=\"requirements\" style=\"position:relative;\"><a href=\"#requirements\" aria-label=\"requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Requirements</h3>\n<p>To be able to use the SEH mixin, some exploitable requirements must be met:</p>\n<ul>\n<li>The vulnerable program does not have SafeSEH in place.</li>\n<li>No DEP (Data Execution Prevention). The mixin uses a short jump to be able to execute the payload, which means the memory must be executable. DEP, as the name implies, prevents that.</li>\n</ul>\n<h3 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h3>\n<p>First, make sure you include the <code class=\"language-text\">Seh</code> mixin under the scope of your module's <code class=\"language-text\">Metasploit3</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Seh</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Next, you need to set up a <code class=\"language-text\">Ret</code> address for the SE handler. This address should be placed in your module's metadata, specifically under <code class=\"language-text\">Targets</code>. In Metasploit, each target is actually an array of two elements. The first element is just the name of the target (and there is currently no strict naming style), the second element is actually a hash that contains information specific to that target, such as the target address. Here's an example of setting up a <code class=\"language-text\">Ret</code> address:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'Targets'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token string\">'Windows XP'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Ret'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0x75022ac4</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span> <span class=\"token comment\"># p/p/r in ws2help.dll</span>\n  <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can see, it's also a good habit to document what the <code class=\"language-text\">Ret</code> address does, and which DLL it points to.</p>\n<p><code class=\"language-text\">Ret</code> is actually kind of a special key, because it can be retrieved by using <code class=\"language-text\">target.ret</code> in the module. In our next examples, you will see <code class=\"language-text\">target.ret</code> being used instead of coding the target address raw.</p>\n<p>If you need a tool to find a POP/POP/RET for the <code class=\"language-text\">Ret</code> address, you can use Metasploit's <code class=\"language-text\">msfbinscan</code> utility, which is located under the tools directory.</p>\n<p>OK now, let's move on to the methods. There are two methods provided by the <code class=\"language-text\">Seh</code> mixin:</p>\n<ul>\n<li><code class=\"language-text\">generate_seh_payload</code> - Generates a fake SEH record with the payload attached right after. Here's an example:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">buffer <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\nbuffer <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token string\">\"A\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token comment\"># 1024 bytes of padding</span>\nbuffer <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> generate_seh_payload<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>ret<span class=\"token punctuation\">)</span> <span class=\"token comment\"># SE record overwritten after 1024 bytes</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>The actual layout of <code class=\"language-text\">buffer</code> should look like this in memory:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[ 1024 bytes of &#39;A&#39; ][ A short jump ][ target.ret ][ Payload ]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li><code class=\"language-text\">generate_seh_record</code> - Generates a fake SEH record without the payload, in case you prefer to place the payload somewhere else. Code example:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">buffer <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\nbuffer <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token string\">\"A\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token comment\"># 1024 bytes of padding</span>\nbuffer <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> generate_seh_payload<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>ret<span class=\"token punctuation\">)</span>\nbuffer <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token string\">\"B\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token comment\"># More padding</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The memory layout should like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[ 1024 bytes of &#39;A&#39; ][ A short jump ][ target.ret ][ Padding ]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<p><a href=\"https://www.corelan.be/index.php/2009/07/25/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-3-seh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.corelan.be/index.php/2009/07/25/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-3-seh/</a></p>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/seh.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/seh.rb</a></p>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/exploit/seh.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/exploit/seh.rb</a></p>"}},"pageContext":{"id":"6ecce634-e6c6-5bca-b969-64af658a0246"}}}