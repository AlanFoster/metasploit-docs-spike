{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/How-to-get-started-with-writing-a-post-module","result":{"data":{"markdownRemark":{"id":"2c68c003-0539-5380-9852-59050237e70a","frontmatter":{"title":"How to get started with writing a post module","root":null},"html":"<p>Post module development is a challenge to your programming skills. It's not like writing a memory corruption based exploit, where technically speaking is usually about crafting a malicious input - a string. A post module is more about proper module design, practical knowledge in Ruby and the Metasploit library. It's also a very valuable skill to have, because if you don't know what to do after popping a shell, what's the point of the penetration test, right? Also, what if a module doesn't work? Are you willing to wait days, weeks, or maybe even months for someone else to fix it for you? Probably not. If you know how to do it yourself, you can probably fix it a lot sooner, and continue with your pentest and do more things. So learn post module development! It's good for you, and your career.</p>\n<h2 id=\"plan-your-module\" style=\"position:relative;\"><a href=\"#plan-your-module\" aria-label=\"plan your module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plan your module</h2>\n<p>Just like writing a software, before you start coding you should have a clear and specific goal for what your post module does. It's never a good idea to have multiple functionalities in a single module. For example: having it steal the network configuration files, steal passwd, hashes, shell history, etc. Instead, you should break it down into multiple modules.</p>\n<p>You should also think about what session types to support: meterpreter, or shell. Ideally, support both. But if you have to choose between the two, on Windows you should favor Windows Meterpreter. On Linux, the shell session type has been a stronger candidate than the Linux Meterpreter, but hopefully this will change in the near future. For platforms that don't have a Meterpreter, obviously your only choice is a shell.</p>\n<p>Another important thing is to think about how your module will perform on different distributions/systems. For example, say you want to run a <code class=\"language-text\">ifconfig</code> command on Linux. On Ubuntu it's a no-brainer, simply run the <code class=\"language-text\">ifconfig</code> command. Well, a different Linux distro might not actually know what you're asking, so you have to be more specific and do <code class=\"language-text\">/sbin/ifconfig</code> instead. Same thing with Windows. Is it <code class=\"language-text\">C:\\WINDOWS\\</code> or <code class=\"language-text\">C:\\WinNT</code>? It's both. Is it <code class=\"language-text\">C:\\Documents and Settings\\[User name]</code>, or <code class=\"language-text\">C:\\Users\\[User name]</code>? Both, depends on that Windows version. A better solution to that would be use an environment variable :-)</p>\n<p>Always do your homework, and contain as many scenarios you can think of. And most importantly, get your VMs and TEST!</p>\n<h3 id=\"categories-of-post-modules\" style=\"position:relative;\"><a href=\"#categories-of-post-modules\" aria-label=\"categories of post modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Categories of post modules</h3>\n<p>Post modules are categorized based on their behavior. For example, if it collects data, naturally it goes to the \"gather\" category. If it adds/updates/or removes an user, it belongs to \"manage\". Here's a list as a reference:</p>\n<table>\n<thead>\n<tr>\n<th>Category</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>gather</strong></td>\n<td>Modules that involve data gathering/collecting/enumeration.</td>\n</tr>\n<tr>\n<td><strong>gather/credentials</strong></td>\n<td>Modules that steal credentials.</td>\n</tr>\n<tr>\n<td><strong>gather/forensics</strong></td>\n<td>Modules that involve forensics data gathering.</td>\n</tr>\n<tr>\n<td><strong>manage</strong></td>\n<td>Modules that modifies/operates/manipulates something on the system. Session management related tasks such as migration, injection also go here.</td>\n</tr>\n<tr>\n<td><strong>recon</strong></td>\n<td>Modules that will help you learn more about the system in terms of reconnaissance, but not about data stealing. Understand this is not the same as \"gather\" type modules.</td>\n</tr>\n<tr>\n<td><strong>wlan</strong></td>\n<td>Modules that are for WLAN related tasks.</td>\n</tr>\n<tr>\n<td><strong>escalate</strong></td>\n<td>This is deprecated, but the modules remain there due to popularity. This used to be the place for privilege escalation modules. All privilege escalation modules are no longer considered as post modules, they're now exploits.</td>\n</tr>\n<tr>\n<td><strong>capture</strong></td>\n<td>Modules that involve monitoring something for data collection. For example: key logging.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"session-object\" style=\"position:relative;\"><a href=\"#session-object\" aria-label=\"session object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Session object</h3>\n<p>So you know how in Lord of the Rings, people are totally obsessed with the One Ring? Well, that's how it is with the session object. The one object you cannot live without, it's your precious. All post modules and other related mixins basically are built on top of the session object, because it knows everything about the compromised host, and allows you to command it.</p>\n<p>You can use the <code class=\"language-text\">session</code> method to access the session object, or its alias <code class=\"language-text\">client</code>. The best way to interact with one is via irb, here's an example of how:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(handler) &gt; run\n\n[*] Started reverse handler on 192.168.1.64:4444 \n[*] Starting the payload handler...\n[*] Sending stage (769536 bytes) to 192.168.1.106\n[*] Meterpreter session 1 opened (192.168.1.64:4444 -&gt; 192.168.1.106:55157) at 2014-07-31 17:59:36 -0500\n\nmeterpreter &gt; irb\n[*] Starting IRB shell\n[*] The &#39;client&#39; variable holds the meterpreter client\n\n&gt;&gt; session.class\n=&gt; Msf::Sessions::Meterpreter_x86_Win</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>At this point you have the power to rule them all. But notice that the above example is a <code class=\"language-text\">Msf::Sessions::Meterpreter_x86_Win</code> object. There are actually several more different ones: command<em>shell.rb, meterpreter</em>php.rb, meterpreter<em>java.rb, meterpreter</em>x86_linux.rb, etc. Each behaves differently so it's actually kind of difficult to explain them all, but they are defined in the <a href=\"https://github.com/rapid7/metasploit-framework/tree/master/lib/msf/base/sessions\">lib/msf/base/sessions/</a> directory so you can see how they work. Or you can play with one since you're already in the irb prompt.</p>\n<p>In Ruby, there are two object methods that are handy for debugging purposes.  The first is <code class=\"language-text\">methods</code>, which will list all the public and protected methods from that object:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">session<span class=\"token punctuation\">.</span>methods</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The other one is <code class=\"language-text\">inspect</code>, which returns a string of a human-readable representation of the object:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">session<span class=\"token punctuation\">.</span>inspect</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>You can also look at <a href=\"https://github.com/rapid7/metasploit-framework/tree/master/modules/post\">other current post modules</a> and see how they use their session object.</p>\n<h3 id=\"the-msfpost-mixin\" style=\"position:relative;\"><a href=\"#the-msfpost-mixin\" aria-label=\"the msfpost mixin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Msf::Post Mixin</h3>\n<p>As we explained, most post module mixins are built on top of the session object, and there are many out there. However, there is a main one you obviously cannot live without: the <code class=\"language-text\">Msf::Post</code> mixin. When you create a post module with this mixin, a lot of other mixins are also already included for all kinds of scenarios, to be more specific:</p>\n<ul>\n<li><strong><a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/post/common.rb\">msf/core/post/common</a></strong> - Common methods post modules use, for example: <code class=\"language-text\">cmd_exec</code>.</li>\n<li><strong><a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/post_mixin.rb\">msf/core/post_mixin</a></strong> - Keeps track of the session state.</li>\n<li><strong><a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/post/file.rb\">msf/core/post/file</a></strong> - File system related methods.</li>\n<li><strong><a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/post/webrtc.rb\">msf/core/post/webrtc</a></strong> - Uses WebRTC to interact with the target machine's webcam.</li>\n<li><strong><a href=\"https://github.com/rapid7/metasploit-framework/tree/master/lib/msf/core/post/linux\">msf/core/post/linux</a></strong> - There actually isn't a lot going on, just <code class=\"language-text\">get_sysinfo</code> and <code class=\"language-text\">is_root?</code> specifically for Linux.</li>\n<li><strong><a href=\"https://github.com/rapid7/metasploit-framework/tree/master/lib/msf/core/post/osx\">msf/core/post/osx</a></strong> - <code class=\"language-text\">get_sysinfo</code>, <code class=\"language-text\">get_users</code>, <code class=\"language-text\">get_system_accounts</code>, <code class=\"language-text\">get_groups</code>, and methods for operating the target machine's webcam.</li>\n<li><strong><a href=\"https://github.com/rapid7/metasploit-framework/tree/master/lib/msf/core/post/solaris\">msf/core/post/solaris</a></strong> - Pretty much like the linux mixin. Same methods, but for Solaris.</li>\n<li><strong><a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/post/unix.rb\">msf/core/post/unix</a></strong> - <code class=\"language-text\">get_users</code>, <code class=\"language-text\">get_groups</code>, <code class=\"language-text\">enum_user_directories</code></li>\n<li><strong><a href=\"https://github.com/rapid7/metasploit-framework/tree/master/lib/msf/core/post/windows\">msf/core/post/windows</a></strong> - Most of the development time are spent here. From Windows account management, event log, file info, Railgun, LDAP, netapi, powershell, registry, wmic, services, etc.</li>\n</ul>\n<h3 id=\"template\" style=\"position:relative;\"><a href=\"#template\" aria-label=\"template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template</h3>\n<p>Here we have a post module template. As you can see, there are some required fields that need to be filled. We'll explain each:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\">##</span>\n<span class=\"token comment\"># This module requires Metasploit: https://metasploit.com/download</span>\n<span class=\"token comment\"># Current source: https://github.com/rapid7/metasploit-framework</span>\n<span class=\"token comment\">##</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MetasploitModule</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Post</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>update_info<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Name'</span>          <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'[Platform] [Module Category] [Software] [Function]'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Description'</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">%q{\n          Say something that the user might want to know.\n        }</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'License'</span>       <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token constant\">MSF_LICENSE</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Author'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'Name'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Platform'</span>      <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'win'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'osx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unix'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bsd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'solaris'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'SessionTypes'</span>  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'meterpreter'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'shell'</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">run</span></span>\n    <span class=\"token comment\"># Main method</span>\n  <span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <strong>Name</strong> field should begin with a platform, such as: Multi, Windows, Linux, OS X, etc. Followed by the module's category, such as: Gather, Manage, Recon, Capture, Wlan. Followed by the name of the software, and then finally a few wrods that describe the functionality of the module. A naming example: \"Multi Gather RndFTP Credential Enumeration\".</p>\n<p>The <strong>Description</strong> field should explain what the module does, things to watch out for, specific requirements, the more the better. The goal is to let the user understand what he's using without the need to actually read the module's source and figure things out. And trust me, most of them don't.</p>\n<p>The <strong>Author</strong> field is where you put your name. The format should be \"Name &#x3C;email>\". If you want to have your Twitter handle there, leave it as a comment, for example: \"Name &#x3C;email> # handle\"</p>\n<p>The <strong>Platform</strong> field indicates what platforms are supported, for example: win, linux, osx, unix, bsd.</p>\n<p>The <strong>SessionTypes</strong> field should be either meterpreter, or shell. You should try to support both.</p>\n<p>And finally, the <code class=\"language-text\">run</code> method is like your main method. Start writing your code there.</p>\n<h3 id=\"basic-git-commands\" style=\"position:relative;\"><a href=\"#basic-git-commands\" aria-label=\"basic git commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic git commands</h3>\n<p>Metasploit no longer uses svn for source code management, instead we use git, so knowing some tricks with git go a long way. We're not here to lecture you about how awesome git is, we know it has a learning curve and it's not surprising to find new users making mistakes. Every once a while, your git \"rage\" will kick in, and we understand. However, it's important for you to take advantage of branching.</p>\n<p>Every time you make a module, or make some changes to existing code, you should not do so on the default master branch. Why? Because when you do a <code class=\"language-text\">msfupdate</code>, which is Metasploit's utility for updating your repository, it will do a git reset before merging the changes, and all your code go bye-bye.</p>\n<p>Another mistake people tend to do is have all the changes on <code class=\"language-text\">master</code> before submitting a pull request. This is a bad idea, because most likely you're submitting other crap you don't intend to change, and/or you're probably asking us to merge other unnecessary commit history when there only needs to be one commit. Thanks for contributing your module to the community, but no thanks to your crazy commit history.</p>\n<p>So as a habit, when you want to make something new, or change something, begin with a new branch that's up to date to master. First off, make sure you're on master. If you do a <code class=\"language-text\">git status</code> it will tell you what branch you're currently on:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ git status\n# On branch upstream-master\nnothing to commit, working directory clean</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Ok, now do a <code class=\"language-text\">git pull</code> to download the latest changes from Metasploit:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ git pull\nAlready up-to-date.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>At this point, you're ready to start a new branch. In this case, we'll name our new branch \"my<em>awesome</em>branch\":</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ git checkout -b my_awesome_module\nSwitched to a new branch &#39;my_awesome_module&#39;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>And then you can go ahead and add that module. Make sure it's in the appropriate path:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ git add [module path]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>When you decide to save the changes, commit (if there's only one module, you can do <code class=\"language-text\">git commit -a</code> too so you don't have to type the module path. Note <code class=\"language-text\">-a</code> really means EVERYTHING):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ git commit [module path]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>When you're done, push your changes, which will upload your code to your remote branch \"my<em>awesome</em>branch\". You must push your changes in order to submit the pull request, or share it with others on the Internet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ git push origin my_awesome_branch</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/tree/master/modules/post\">https://github.com/rapid7/metasploit-framework/tree/master/modules/post</a></p>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/tree/master/lib/msf/core/post\">https://github.com/rapid7/metasploit-framework/tree/master/lib/msf/core/post</a></p>"}},"pageContext":{"id":"2c68c003-0539-5380-9852-59050237e70a"}}}