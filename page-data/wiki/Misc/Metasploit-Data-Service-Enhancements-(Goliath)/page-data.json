{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/Metasploit-Data-Service-Enhancements-(Goliath)","result":{"data":{"markdownRemark":{"id":"40022092-d10d-5b58-8bee-8a8f0039171e","frontmatter":{"title":"Metasploit Data Service Enhancements (Goliath)","root":null},"html":"<p>Project Goliath came about primarilly around the need to enhance the current data service and data models to increase the value of data in metasploit to our end users.</p>\n<p>This work is currently being done in 2 stages:</p>\n<p><strong><em>Stage 1</em></strong></p>\n<p>This is currently a work in progress (which is why Goliath is currently not fully functional).\nThe work being done or already done include:</p>\n<ul>\n<li>Port of the current data models to be used over HTTP / HTTPS</li>\n<li>Creation of a web service that serves the metasploit data model</li>\n<li>Creation of a new command in metasploit to remote (web based) data services</li>\n<li>Creation of a Metasploit Data Service API V1 document</li>\n</ul>\n<p><strong><em>Stage 2</em></strong></p>\n<ul>\n<li>Enhance the current data model</li>\n<li>\n<p>Creation of a Metasploit Data Service API V2 document\nPotential Changes include (feel free to submit ideas):</p>\n<ul>\n<li>Creation of a generic data type (for when you can't figure out which data type data belongs)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"rationale\" style=\"position:relative;\"><a href=\"#rationale\" aria-label=\"rationale permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rationale</h2>\n<p>The current data storage mechanism couples the metasploit core framework code to the current data storage technology. Coupling causes inflexibility which are reflected via the following problems:</p>\n<ul>\n<li>Changes to the current data model are complex</li>\n<li>The ability to support/use different data storage technologies is difficult</li>\n<li>Promotes a monolithic architecture where poor performance in any segment of the software affects the entire system (large network scans)</li>\n</ul>\n<p>Our solution to this is a data service proxy.  A data service proxy allows us to separate core metasploit framework code from the underlying data service technology.  The <code class=\"language-text\">framework.db</code> reference to data services is no longer tied directly to the underlying data storage, but instead all calls are proxied to an underlying implementation.</p>\n<p>Currently we plan to support the legacy data storage technology stack (RAILS/PostgreSQL) which we hope to eventually phase out.  The new implementation will use a RESTful (<a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Representational_state_transfer</a>) approach whereby calls to <code class=\"language-text\">framework.db</code> can be proxied to a remote web service that supports the same data service API.  We have built a web service that runs atop the current data storage service for the community.</p>\n<p>This approach enables us to:</p>\n<ul>\n<li>More easily enhance the metasploit data model </li>\n<li>\n<p>Run a web-based data service independent of the metasploit framework</p>\n<ul>\n<li>Reduces the memory used by a metasploit framework instance using a data service by no longer requiring a DB client</li>\n<li>Increases throughput as storage calls don't necessarily need to be asynchronous</li>\n<li>Allow teams to collaborate easily by connecting to a centralized data service</li>\n</ul>\n</li>\n<li>Quickly build out data services that leverage different technology stacks</li>\n<li>Isolate component testing</li>\n<li>Users of metasploit can now leverage a rigid API to build other tools easily (documentation to be provided soon)</li>\n</ul>\n<h2 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>For more information on setting up the web service and using the data services see <a href=\"https://github.com/rapid7/metasploit-framework/wiki/Metasploit-Web-Service\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Metasploit Web Service</a>.</p>"}},"pageContext":{"id":"40022092-d10d-5b58-8bee-8a8f0039171e"}}}