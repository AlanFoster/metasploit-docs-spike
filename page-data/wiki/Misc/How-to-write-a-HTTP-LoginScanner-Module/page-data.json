{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/How-to-write-a-HTTP-LoginScanner-Module","result":{"data":{"markdownRemark":{"id":"7887cb6c-71a9-54e9-ab06-eb8ee72c31af","frontmatter":{"title":"How to write a HTTP LoginScanner Module","root":null},"html":"<p>This is a step-by-step guide on how to write a HTTP login module using the latest LoginScanner and Credential APIs.</p>\n<p>Before we begin, it's probably a good idea to read <a href=\"https://github.com/rapid7/metasploit-framework/wiki/Creating-Metasploit-Framework-LoginScanners\">Creating Metasploit Framework LoginScanners</a>, which explains about the APIs in-depth. The LoginScanner API can be found in the <a href=\"https://github.com/rapid7/metasploit-framework/tree/master/lib/metasploit/framework/login_scanner\">lib/metasploit/framework/loginscanner</a> directory, and the Credential API can found as a <a href=\"https://github.com/rapid7/metasploit-credential\">metasploit-credential gem here</a>. You will most likely want to read them while writing the login module.</p>\n<h2 id=\"step-1-set-up-your-target-environment\" style=\"position:relative;\"><a href=\"#step-1-set-up-your-target-environment\" aria-label=\"step 1 set up your target environment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Set up your target environment</h2>\n<p>For our demonstration, we will be using <a href=\"http://www.symantec.com/web-gateway/\">Symantec Web Gateway</a>. A trial is available at the vendor's website. Obviously downloading/installing it would be your first step.</p>\n<h2 id=\"step-2-set-up-a-client\" style=\"position:relative;\"><a href=\"#step-2-set-up-a-client\" aria-label=\"step 2 set up a client permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Set up a client</h2>\n<p>The purpose of setting up a client is to sample the login request and response. Normally you can do this with:</p>\n<ul>\n<li>\n<p><strong>A web browser plus a sniffer</strong></p>\n<ol>\n<li>For the sniffer, you can download <a href=\"https://www.wireshark.org/download.html\">Wireshark</a>, and have it running.</li>\n<li>Use a web browser to login.</li>\n<li>Go back to Wireshark and save the HTTP request, this is exactly what you will send in the login module. You will also need to save the HTTP response so that you can check for a successful and a failed login.</li>\n</ol>\n</li>\n<li>\n<p><strong>A browser with Burp</strong></p>\n<p><a href=\"http://portswigger.net/burp/download.html\">Burp</a> is a tool for performing security testing of web applications. You can download the free version from the vendor's website. In some cases, Burp is way better than a sniffer because you can modify HTTP requests, it's also a very convenient way to capture HTTPS traffic.</p>\n<p>Here's what you do.</p>\n<ol>\n<li>Start Burp.</li>\n<li>Configure your web browser's proxy so Burp can forward traffic.</li>\n<li>Use the web browser to login.</li>\n<li>Go back to Burp, you can find the history of all the requests and responses.</li>\n</ol>\n</li>\n</ul>\n<p>For our example, this is the request the browser sends to Symantec Web Gateway:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">POST /spywall/login.php HTTP/1.1\nHost: 192.168.1.176\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:27.0) Gecko/20100101 Firefox/27.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://192.168.1.176/spywall/login.php\nCookie: PHPSESSID=otgam4mgjrl00h2esk3o2npt05\nConnection: keep-alive\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 54\n\nUSERNAME=gooduser&amp;PASSWORD=GoodPassword&amp;loginBtn=Login</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And this is the response Symantec Web Gateway returns for a successful login:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">HTTP/1.1 302 Found\nDate: Tue, 12 May 2015 19:32:31 GMT\nServer: Apache\nX-Frame-Options: SAMEORIGIN\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\nCache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0\nPragma: no-cache\nSet-Cookie: PHPSESSID=vmb56vhd7740oqcmth8cqtagq5; path=/; secure; HttpOnly\nLocation: https://192.168.1.176/spywall/executive_summary.php\nContent-Length: 0\nKeep-Alive: timeout=15, max=5000\nConnection: Keep-Alive\nContent-Type: text/html; charset=UTF-8</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>A failed login response is an HTTP 200 with the following message in the body:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">We&#39;re sorry, but the username or password you have entered is incorrect.  Please retype your username and password. The username and password are case sensitive.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"step-3-start-with-a-loginscanner-template\" style=\"position:relative;\"><a href=\"#step-3-start-with-a-loginscanner-template\" aria-label=\"step 3 start with a loginscanner template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Start with a LoginScanner template</h2>\n<p>Your login module mainly consists of three components: the LoginScanner portion, the auxiliary portion, and rpsec. The actual HTTP requests and responses are handled in the LoginScanner portion, so we'll start from there.</p>\n<p>Your most basic HTTP LoginScanner template will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'metasploit/framework/login_scanner/http'</span>\n\n<span class=\"token keyword\">module</span> <span class=\"token constant\">Metasploit</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">Framework</span>\n    <span class=\"token keyword\">module</span> <span class=\"token constant\">LoginScanner</span>\n      <span class=\"token keyword\">class</span> <span class=\"token class-name\">SymantecWebGateway</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">HTTP</span>\n\n\n        <span class=\"token comment\"># Attemps to login to the server.</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\"># @param [Metasploit::Framework::Credential] credential The credential information.</span>\n        <span class=\"token comment\"># @return [Result] A Result object indicating success or failure</span>\n        <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">attempt_login</span></span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">)</span>\n          \n        <span class=\"token keyword\">end</span>\n\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Save it under lib/metasploit/framework/login_scanner/.</p>\n<p><strong>The #attempt_login method</strong></p>\n<p>The #attempt<em>login is called automatically. You can write your entire login code there, but it's better to break in down into multiple methods so that the code is cleaner, and easier to document and rspec. Typically, all you want #attempt</em>login to do is focusing on crafting the Result object, pass it to a custom #login routine, and then return the Result object. It almost always looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">attempt_login</span></span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># Default Result</span>\n  result_opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    credential<span class=\"token punctuation\">:</span> credential<span class=\"token punctuation\">,</span>\n    status<span class=\"token punctuation\">:</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Model</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Login</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Status</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">INCORRECT</span><span class=\"token punctuation\">,</span>\n    proof<span class=\"token punctuation\">:</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span>\n    host<span class=\"token punctuation\">:</span> host<span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">:</span> port<span class=\"token punctuation\">,</span>\n    protocol<span class=\"token punctuation\">:</span> <span class=\"token string\">'tcp'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># Merge login result</span>\n  <span class=\"token comment\"># credential.public is the username</span>\n  <span class=\"token comment\"># credential.private is the password</span>\n  result_opts<span class=\"token punctuation\">.</span>merge<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>do_login<span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">.</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">,</span> credential<span class=\"token punctuation\">.</span><span class=\"token keyword\">private</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># Return the Result object</span>\n  <span class=\"token constant\">Result</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>result_opts<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Notice that:</p>\n<ul>\n<li>By default, our proof is nil.</li>\n<li>The status is Metasploit::Model::Login::Status::INCORRECT.</li>\n<li>We're calling #do_login, which is our custom login method.</li>\n<li>The #do_login method will have to update status and proof before we return the Result object.</li>\n</ul>\n<p><strong>The custom login method</strong></p>\n<p>Ok, now let's talk about building this #do_login method. This is where we send the same HTTP request we sampled earlier.</p>\n<p>If you're already familiar with writing a Metasploit module that sends an HTTP request, the first thing that comes to mind is probably using the <a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-Send-an-HTTP-Request-Using-HTTPClient\">HttpClient</a>. Well, you can't do that at all over here, so we have to fall back to <a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-send-an-HTTP-request-using-Rex%3A%3AProto%3A%3AHttp%3A%3AClient\">Rex::Proto::Http::Client</a>. Fortunately for you, we made all this a little bit easier by creating another request called #send_request, here's an example of how to use that:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">send_request<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'uri'</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token string\">'/'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>You will rely on this method a lot to accomplish most of what you need to do here.</p>\n<p>Ok, now, let's move on and talk about how to use #send_request to send a login request. Remember in the login request, there is actually a PHPSESSID cookie, you should obtain this first. Usually the web application will give you the session cookie when you request the login page for the very first time, and this happens a lot.</p>\n<p>Here's an example of how to grab PHPSESSID:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_session_id</span></span>\n  login_uri <span class=\"token operator\">=</span> normalize_uri<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>uri<span class=\"token delimiter tag\">}</span></span>/spywall/login.php\"</span><span class=\"token punctuation\">)</span>\n  res <span class=\"token operator\">=</span> send_request<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'uri'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> login_uri<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  sid <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>get_cookies<span class=\"token punctuation\">.</span>scan<span class=\"token punctuation\">(</span><span class=\"token regex\">/(PHPSESSID=\\w+);*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span>\n  <span class=\"token keyword\">return</span> sid\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now that you have a session ID, you can finally make the login request. Remember in the sample, we have to submit the username, password, loginBtn as a POST request. So let's do that with #send_request:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">protocol  <span class=\"token operator\">=</span> ssl <span class=\"token operator\">?</span> <span class=\"token string\">'https'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'http'</span>\npeer      <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>host<span class=\"token delimiter tag\">}</span></span>:<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>port<span class=\"token delimiter tag\">}</span></span>\"</span>\nlogin_uri <span class=\"token operator\">=</span> normalize_uri<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>uri<span class=\"token delimiter tag\">}</span></span>/spywall/login.php\"</span><span class=\"token punctuation\">)</span>\n\nres <span class=\"token operator\">=</span> send_request<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'uri'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> login_uri<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'method'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'cookie'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> get_session_id<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'headers'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'Referer'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>protocol<span class=\"token delimiter tag\">}</span></span>://<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>peer<span class=\"token delimiter tag\">}</span></span>/<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>login_uri<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'vars_post'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'USERNAME'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> username<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'PASSWORD'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> password<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'loginBtn'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'Login'</span> <span class=\"token comment\"># Found in the HTML form</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now that the request is sent, we need to check the response (the res variable). Typically, you have a few choices to determine a successful login:</p>\n<ul>\n<li><strong>Check the HTTP response code</strong>. In this case, we have a 302 (redirect), but know that sometimes the response code can lie so this should not be your first choice.</li>\n<li><strong>Check the HTML</strong>. With some web applications, you might get a \"successful login\" message, and you can regex that. This is most likely the most accurate way.</li>\n<li><strong>Check the location header</strong>. In our case, Symantec returns a 302 and contains no body. But it redirects us to a spywall/executive<em>summary.php page in the location header, so we can use that. We can also try to access executive</em>summary.php with a renewed session ID, and make sure we can actually see the admin interface, but requesting an extra page adds more penalty to performance, so this is up to you.</li>\n</ul>\n<p>In the end, your custom login method will probably look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">do_login</span></span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n  protocol  <span class=\"token operator\">=</span> ssl <span class=\"token operator\">?</span> <span class=\"token string\">'https'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'http'</span>\n  peer      <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>host<span class=\"token delimiter tag\">}</span></span>:<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>port<span class=\"token delimiter tag\">}</span></span>\"</span>\n  login_uri <span class=\"token operator\">=</span> normalize_uri<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>uri<span class=\"token delimiter tag\">}</span></span>/spywall/login.php\"</span><span class=\"token punctuation\">)</span>\n\n  res <span class=\"token operator\">=</span> send_request<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'uri'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> login_uri<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'method'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'cookie'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> get_session_id<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'headers'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'Referer'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>protocol<span class=\"token delimiter tag\">}</span></span>://<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>peer<span class=\"token delimiter tag\">}</span></span>/<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>login_uri<span class=\"token delimiter tag\">}</span></span>\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'vars_post'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'USERNAME'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> username<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'PASSWORD'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> password<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'loginBtn'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'Login'</span> <span class=\"token comment\"># Found in the HTML form</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> res <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Location'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token string\">'executive_summary.php'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token symbol\">:status</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token constant\">LOGIN_STATUS</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">SUCCESSFUL</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:proof</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">.</span>to_s<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token punctuation\">{</span><span class=\"token symbol\">:proof</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">.</span>to_s<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <a href=\"https://github.com/rapid7/metasploit-model/blob/d4c4f444c79937698dc703f89c0a4c576cde628c/lib/metasploit/model/login/status.rb\">exact statuses</a> you can return are:</p>\n<table>\n<thead>\n<tr>\n<th>Constant</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Metasploit::Model::Login::Status::DENIED_ACCESS</td>\n<td>Access is denied</td>\n</tr>\n<tr>\n<td>Metasploit::Model::Login::Status::DISABLED</td>\n<td>Account is disabled</td>\n</tr>\n<tr>\n<td>Metasploit::Model::Login::Status::INCORRECT</td>\n<td>Credential is incorrect</td>\n</tr>\n<tr>\n<td>Metasploit::Model::Login::Status::LOCKED_OUT</td>\n<td>Account has been locked out</td>\n</tr>\n<tr>\n<td>Metasploit::Model::Login::Status::NO<em>AUTH</em>REQUIRED</td>\n<td>No authentication</td>\n</tr>\n<tr>\n<td>Metasploit::Model::Login::Status::SUCCESSFUL</td>\n<td>Successful login</td>\n</tr>\n<tr>\n<td>Metasploit::Model::Login::Status::UNABLE<em>TO</em>CONNECT</td>\n<td>Unable to connect to the service</td>\n</tr>\n<tr>\n<td>Metasploit::Model::Login::Status::UNTRIED</td>\n<td>Credential has not been tried</td>\n</tr>\n<tr>\n<td>Metasploit::Model::Login::Status::ALL</td>\n<td>All the above (An array)</td>\n</tr>\n</tbody>\n</table>\n<p>When you're done, your code will look something like this:</p>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/metasploit/framework/login_scanner/symantec_web_gateway.rb\">https://github.com/rapid7/metasploit-framework/blob/master/lib/metasploit/framework/login_scanner/symantec_web_gateway.rb</a></p>\n<h2 id=\"step-4-write-the-auxiliary-module\" style=\"position:relative;\"><a href=\"#step-4-write-the-auxiliary-module\" aria-label=\"step 4 write the auxiliary module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: Write the auxiliary module</h2>\n<p>The auxiliary module acts more like an user-interface. You describe what the module does, handles options, initializes objects, and do reporting.</p>\n<p>A basic auxiliary module template in our case would be something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\">##</span>\n<span class=\"token comment\"># This module requires Metasploit: http://metasploit.com/download</span>\n<span class=\"token comment\"># Current source: https://github.com/rapid7/metasploit-framework</span>\n<span class=\"token comment\">##</span>\n\n<span class=\"token keyword\">require</span> <span class=\"token string\">'msf/core'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'metasploit/framework/login_scanner/symantec_web_gateway'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'metasploit/framework/credential_collection'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MetasploitModule</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Auxiliary</span>\n\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Remote</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HttpClient</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Auxiliary</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">AuthBrute</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Auxiliary</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Report</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Auxiliary</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Scanner</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>update_info<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Name'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'Symantec Web Gateway Login Utility'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Description'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">%q{\n        This module will attempt to authenticate to a Symantec Web Gateway.\n      }</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Author'</span>      <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'sinn3r'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'License'</span>     <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token constant\">MSF_LICENSE</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'DefaultOptions'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">'RPORT'</span>      <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">443</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'SSL'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'SSLVersion'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'TLS1'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">run_host</span></span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Save it under modules/auxiliary/scanner/http/.</p>\n<p>Our main method is #run_host, so we'll begin there. But before we do, we must initialize your LoginScanner object. The following is an example of how you will probably write it.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">scanner</span></span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span>\n  <span class=\"token variable\">@scanner</span> <span class=\"token operator\">||</span><span class=\"token operator\">=</span> lambda <span class=\"token punctuation\">{</span>\n    cred_collection <span class=\"token operator\">=</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">CredentialCollection</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>\n      blank_passwords<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'BLANK_PASSWORDS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      pass_file<span class=\"token punctuation\">:</span>       datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'PASS_FILE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token punctuation\">:</span>        datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      user_file<span class=\"token punctuation\">:</span>       datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USER_FILE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      userpass_file<span class=\"token punctuation\">:</span>   datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USERPASS_FILE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      username<span class=\"token punctuation\">:</span>        datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USERNAME'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      user_as_pass<span class=\"token punctuation\">:</span>    datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USER_AS_PASS'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">LoginScanner</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">SymantecWebGateway</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>\n      configure_http_login_scanner<span class=\"token punctuation\">(</span>\n        host<span class=\"token punctuation\">:</span> ip<span class=\"token punctuation\">,</span>\n        port<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'RPORT'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        cred_details<span class=\"token punctuation\">:</span>       cred_collection<span class=\"token punctuation\">,</span>\n        stop_on_success<span class=\"token punctuation\">:</span>    datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'STOP_ON_SUCCESS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        bruteforce_speed<span class=\"token punctuation\">:</span>   datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'BRUTEFORCE_SPEED'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        connection_timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>call\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Notice that this scanner method can be called multiple times, but the use of <a href=\"http://rubymonk.com/learning/books/1-ruby-primer/chapters/34-lambdas-and-blocks-in-ruby/lessons/77-lambdas-in-ruby\">lambda</a> will allow the LoginScanner object to initialize only once. After that first time, every time the method is called, it will just return @scanner instead of going through the whole initialization process again.</p>\n<p>In some cases you might need to pass more datastore options, maybe not. For example, if you want to allow the URI to be configurable (which is also already an accessor in <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/lib/metasploit/framework/login_scanner/http.rb#L26\">Metasploit::Framework::LoginScanner::HTTP</a>), then you have to create and pass datastore['URI'] to configure<em>http</em>login_scanner too, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">uri<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'URI'</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>And then in your LoginScanner, pass <code class=\"language-text\">uri</code> to #send_request:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">send_request<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'uri'</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>uri<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>At this point, the scanner method holds our Metasploit::Framework::LoginScanner::SymantecWebGateway object. If we call the #scan! method, it will trigger the #attempt_login method we wrote earlier, and then yield the Result object. Basically like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">scanner<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>scan<span class=\"token operator\">!</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>result<span class=\"token operator\">|</span>\n  <span class=\"token comment\"># result = Our Result object</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>With the Result object, we can start reporting. In most cases, you will probably be using #create<em>credential</em>login to report a successful login. And use #invalidate_login to report a bad one.</p>\n<p><strong>Reporting a valid credential</strong></p>\n<p>The credential API knows a lot about a credential, such as when it was used, how it was used, serviced tried, target IP, port, etc, etc. So when we report, that's how much information we are storing for every credential. To make credential reporting easy to use, all you need to do is call the #store<em>valid</em>credential method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">store_valid_credential<span class=\"token punctuation\">(</span>\n  user<span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">.</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">private</span><span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">.</span><span class=\"token keyword\">private</span><span class=\"token punctuation\">,</span>\n  private_type<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:password</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># This is optional</span>\n  proof<span class=\"token punctuation\">:</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># This is optional</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Report an invalid credential</strong></p>\n<p>Here's another example you can use:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\"># Reports a bad credential.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># @param [String] ip Target host</span>\n<span class=\"token comment\"># @param [Fixnum] port Target port</span>\n<span class=\"token comment\"># @param [Result] The Result object</span>\n<span class=\"token comment\"># @return [void]</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">report_bad_cred</span></span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> rport<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n  invalidate_login<span class=\"token punctuation\">(</span>\n    address<span class=\"token punctuation\">:</span> ip<span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">:</span> rport<span class=\"token punctuation\">,</span>\n    protocol<span class=\"token punctuation\">:</span> <span class=\"token string\">'tcp'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">public</span><span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">.</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span><span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">.</span><span class=\"token keyword\">private</span><span class=\"token punctuation\">,</span>\n    realm_key<span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">.</span>realm_key<span class=\"token punctuation\">,</span>\n    realm_value<span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">,</span>\n    status<span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span>\n    proof<span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">.</span>proof\n  <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>At this point, you're pretty much done with the auxiliary module. It will probably look something like this:\n<a href=\"https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/http/symantec_web_gateway_login.rb\">https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/http/symantec_web_gateway_login.rb</a></p>\n<h2 id=\"test\" style=\"position:relative;\"><a href=\"#test\" aria-label=\"test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test</h2>\n<p>And finally, make sure your module actually works.</p>\n<p>Test for a successful login:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(symantec_web_gateway_login) &gt; run\n\n[+] 192.168.1.176:443 SYMANTEC_WEB_GATEWAY - Success: &#39;sinn3r:GoodPassword&#39;\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(symantec_web_gateway_login) &gt; </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Test for a failed login:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(symantec_web_gateway_login) &gt; run\n\n[-] 192.168.1.176:443 SYMANTEC_WEB_GATEWAY - Failed: &#39;sinn3r:BadPass&#39;\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(symantec_web_gateway_login) &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}},"pageContext":{"id":"7887cb6c-71a9-54e9-ab06-eb8ee72c31af"}}}