{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/How-to-use-Metasploit-Framework-Compiler-Windows-to-compile-C-code","result":{"data":{"markdownRemark":{"id":"3ebb0db7-8090-5c78-99d4-df7fb207ffb6","frontmatter":{"title":"How to use Metasploit Framework Compiler Windows to compile C code","root":null},"html":"<h1 id=\"how-to-use-metasploitframeworkcompilerwindows-to-compile-c-code\" style=\"position:relative;\"><a href=\"#how-to-use-metasploitframeworkcompilerwindows-to-compile-c-code\" aria-label=\"how to use metasploitframeworkcompilerwindows to compile c code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use Metasploit::Framework::Compiler::Windows to compile C code</h1>\n<p><code class=\"language-text\">Metasploit::Framework::Compiler::Windows</code> is a wrapper of <a href=\"https://github.com/jjyg/metasm\">Metasm</a> specifically for compiling C code for the Windows platform. The purpose of the wrapper is to support default headers, such as <code class=\"language-text\">stdio.h</code>, <code class=\"language-text\">stdio.h</code>, <code class=\"language-text\">String.h</code>, <code class=\"language-text\">Windows.h</code>, or some other important headers that you might use while writing in C.</p>\n<h1 id=\"exe-example\" style=\"position:relative;\"><a href=\"#exe-example\" aria-label=\"exe example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EXE Example</h1>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">c_template <span class=\"token operator\">=</span> <span class=\"token string\">%Q|#include &lt;Windows.h>\n\nint main(void) {\n  LPCTSTR lpMessage = \"Hello World\";\n  LPCTSTR lpTitle = \"Hi\";\n  MessageBox(NULL, lpMessage, lpTitle, MB_OK);\n  return 0;\n}|</span>\n\n<span class=\"token keyword\">require</span> <span class=\"token string\">'metasploit/framework/compiler/windows'</span>\n\n<span class=\"token comment\"># This will save the binary in variable exe</span>\nexe <span class=\"token operator\">=</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Compiler</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Windows</span><span class=\"token punctuation\">.</span>compile_c<span class=\"token punctuation\">(</span>c_template<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># This will save the binary as a file</span>\n<span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Compiler</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Windows</span><span class=\"token punctuation\">.</span>compile_c_to_file<span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp/test.exe'</span><span class=\"token punctuation\">,</span> c_template<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id=\"dll-example\" style=\"position:relative;\"><a href=\"#dll-example\" aria-label=\"dll example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DLL Example</h1>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">c_template <span class=\"token operator\">=</span> <span class=\"token string\">%Q|#include &lt;Windows.h>\n\nBOOL APIENTRY DllMain __attribute__((export))(HMODULE hModule, DWORD dwReason, LPVOID lpReserved) {\n  switch (dwReason) {\n    case DLL_PROCESS_ATTACH:\n      MessageBox(NULL, \"Hello World\", \"Hello\", MB_OK);\n      break;\n    case DLL_THREAD_ATTACH:\n      break;\n    case DLL_THREAD_DETACH:\n      break;\n    case DLL_PROCESS_DETACH:\n      break;\n  }\n\n  return TRUE;\n}\n\n// This will be a function in the export table\nint Msg __attribute__((export))(void) {\n  MessageBox(NULL, \"Hello World\", \"Hello\", MB_OK);\n  return 0;\n}\n|</span>\n\n<span class=\"token keyword\">require</span> <span class=\"token string\">'metasploit/framework/compiler/windows'</span>\ndll <span class=\"token operator\">=</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Compiler</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Windows</span><span class=\"token punctuation\">.</span>compile_c<span class=\"token punctuation\">(</span>c_template<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:dll</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To load a DLL, you can use the LoadLibrary API:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  HMODULE hMod <span class=\"token operator\">=</span> <span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello_world.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hMod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello_world.dll loaded\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to load hello_world.dll\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Or call the function in export with rundll32:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">rundll32 hell_world.dll,Msg</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h1 id=\"printf\" style=\"position:relative;\"><a href=\"#printf\" aria-label=\"printf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Printf()</h1>\n<p>Note that methods like <code class=\"language-text\">printf()</code> won't actually print anything, because it's not hooked up to stdout. If you want to use <code class=\"language-text\">printf()</code> for debugging purposes, you can consider using <code class=\"language-text\">OutputDebugString</code>, or <code class=\"language-text\">MessageBox</code> instead.</p>\n<h1 id=\"custom-headers\" style=\"position:relative;\"><a href=\"#custom-headers\" aria-label=\"custom headers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Headers</h1>\n<p>Currently, the Metasm wrapper does not support custom headers from an arbitrary location. To work around this, you can place your headers in <code class=\"language-text\">data/headers/windows</code>, and then add that file name in <code class=\"language-text\">lib/metasploit/framework/compiler/headers/windows.h</code>.</p>\n<h1 id=\"code-randomization\" style=\"position:relative;\"><a href=\"#code-randomization\" aria-label=\"code randomization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code Randomization</h1>\n<p><code class=\"language-text\">Metasploit::Framework::Compiler</code> supports obfuscation that randomizes code at the source code level, and then compile. There are two methods we can use: <code class=\"language-text\">Metasploit::Framework::Compiler::Windows.compile_random_c</code>, or <code class=\"language-text\">Metasploit::Framework::Compiler::Windows.compile_random_c_to_file</code>. Using the last as an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'msf/core'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'metasploit/framework/compiler/windows'</span>\n\nc_source_code <span class=\"token operator\">=</span> <span class=\"token string\">%Q|\n#include &lt;Windows.h>\n\nint main() {\n  const char* content = \"Hello World\";\n  const char* title = \"Hi\";\n  MessageBox(0, content, title, MB_OK);\n  return 0;\n}|</span>\n\noutfile <span class=\"token operator\">=</span> <span class=\"token string\">\"/tmp/helloworld.exe\"</span>\nweight <span class=\"token operator\">=</span> <span class=\"token number\">70</span> <span class=\"token comment\"># This value is used to determine how random the code gets.</span>\n<span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Compiler</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Windows</span><span class=\"token punctuation\">.</span>compile_random_c_to_file<span class=\"token punctuation\">(</span>outfile<span class=\"token punctuation\">,</span> c_source_code<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">:</span> weight<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}},"pageContext":{"id":"3ebb0db7-8090-5c78-99d4-df7fb207ffb6"}}}