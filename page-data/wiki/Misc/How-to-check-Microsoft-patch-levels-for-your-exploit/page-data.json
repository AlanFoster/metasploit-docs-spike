{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Misc/How-to-check-Microsoft-patch-levels-for-your-exploit","result":{"data":{"markdownRemark":{"id":"b2bfdc1d-89cf-5dea-a5fd-8402ba598604","frontmatter":{"title":"How to check Microsoft patch levels for your exploit","root":null},"html":"<p>Checking patch levels is an important task for vulnerability research or exploit development. As a bug-hunting kind of guy, you should care about patch levels because say you have an 0day for Internet Explorer 10, you can't always assume it affects all IE 10 builds since its debut (2012). If you realize your 0day only affects one or two builds, how much of a threat is it? Probably not as bad as you think.</p>\n<p>If you're an exploit developer, you're checking patches for another reason: maximum reliability. There are a lot of ways your exploit can fail, a bad <a href=\"http://en.wikipedia.org/wiki/Return-oriented_programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gadget</a> due to a change by a system update is easily one of them. If this update occurred at a pretty early stage, chances are your exploit will fail a lot, too.</p>\n<h2 id=\"how-to-collect-microsoft-patches\" style=\"position:relative;\"><a href=\"#how-to-collect-microsoft-patches\" aria-label=\"how to collect microsoft patches permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to collect Microsoft patches</h2>\n<p>If you're kind of hardcore with patch diffing, you probably maintain your own database of DLLs. But this may require a lot of disk space, for most people it's probably not worth it unless you have to look at these DLLs pretty much everyday. A more economic way is probably have a way to track all these patches, and have some sort of interface to allow quick and easy access to them.</p>\n<p>Luckily, Microsoft maintains a list of all the patches in an Excel file that you can download here:</p>\n<p><a href=\"http://www.microsoft.com/en-us/download/confirmation.aspx?id=36982\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.microsoft.com/en-us/download/confirmation.aspx?id=36982</a></p>\n<p>If you prefer some sort of GUI for searching, you can use Security TechCenter's <a href=\"http://mybulletins.technet.microsoft.com/BulletinPages/Dashboard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">My Security Bulletins Dashboard</a>. You can edit this dashboard to add specific filters, such as the Windows version, Internet Explorer version, Office, etc, etc.</p>\n<p>For example, if I want to find all the Internet Explorer 10 patches for Windows 7 since its debut, I can add the following filters:</p>\n<ul>\n<li>Windows 7</li>\n<li>Internet Explorer</li>\n</ul>\n<p>And then I sort by date from September 2012 to 2014, I get: 22 results. But of course, this number will go up because IE 10 is still supported.</p>\n<p>There are also other desktop or command-line tools that will basically check missing patches for your Windows system, such as <a href=\"https://gallery.technet.microsoft.com/scriptcenter/2d191bcd-3308-4edd-9de2-88dff796b0bc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Windows Update Powershell Module</a>, in some cases this may work better.</p>\n<h2 id=\"patch-extraction\" style=\"position:relative;\"><a href=\"#patch-extraction\" aria-label=\"patch extraction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Patch extraction</h2>\n<ul>\n<li>Old patches used to be packaged as EXEs, and this kind can be extracted by using decompression tools such as <a href=\"http://www.7-zip.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">7zip</a>. Internet Explorer 6 patches, for example, can be extracted this way.</li>\n<li>Newer patches packaged as EXEs support the /X flag for extraction. For example, the following will extract the patch under the same directory. Patches such as Internet Explorer 8 (for XP) can be extracted this way.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Windows[Something]-KB[Something]-x86-ENU.exe /X:.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li>Most patches nowadays are packaged as MSUs. Here's what you have to do:</li>\n<li>Put all your *.msu files under the same directory (in Windows)</li>\n<li>Run <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/tools/extract_msu.bat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tools/extract_msu.bat</a> [absolute directory path to *.msu files)</li>\n<li>extract_msu.bat should automatically extract all the *.msu files. The \"extracted\" sub-directory in each new folder is where you can find the updated components.</li>\n</ul>\n<p>Note: The update folders might be labeled as GDR or QRE. GDR indicates Generation Distribution Release, while QRE means Quick Fix Engineering.</p>\n<h2 id=\"checking-gadgets-in-patches\" style=\"position:relative;\"><a href=\"#checking-gadgets-in-patches\" aria-label=\"checking gadgets in patches permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Checking gadgets in patches</h2>\n<p>The quickest way to check gadgets across different patches is by using Metasploit's msfpescan utility (or msfbinscan, which is smart enough to know it's PE format). It's really easy, all you have to do is put the DLLs in the same directory, and then do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ ./msfbinscan -D -a [address] -A 10 /patches/*.dll</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>What that does is the tool will disassemble all the DLLs under that directory, at that specific address for 10 bytes. You can probably automate a little more to quickly identify which DLLs don't have right gadget, and if that's the case for you, that means the gadget you're using is unsafe. You should find another one that's more reliable.</p>"}},"pageContext":{"id":"b2bfdc1d-89cf-5dea-a5fd-8402ba598604"}}}