{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Contributing/Creating-Metasploit-Framework-LoginScanners","result":{"data":{"markdownRemark":{"id":"12f0d6a3-a148-5604-b5aa-1d64337ebfe0","frontmatter":{"title":"Creating Metasploit Framework LoginScanners","root":null},"html":"<p>So, you want to make a Login Scanner Module in Metasploit, eh? There are a few things you will need to know before you begin. This article will try to illustrate all the moving pieces involved in creating an effective bruteforce/login scanner module.</p>\n<ul>\n<li><a href=\"#credential-objects\">Credential objects</a></li>\n<li><a href=\"#result-objects\">Result objects</a></li>\n<li><a href=\"#credentialcollection\">CredentialCollection</a></li>\n<li>\n<p><a href=\"#loginscanner-base\">LoginScanner Base</a> </p>\n<ul>\n<li><a href=\"#attributes\">Attributes</a></li>\n<li><a href=\"#methods\">Methods</a></li>\n<li><a href=\"#constants\">Constants</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#pulling-it-all-together-in-a-module\">Pulling it all Together in a module</a></p>\n<ul>\n<li><a href=\"#the-cred-collection\">The Cred Collection</a></li>\n<li><a href=\"#initialising-the-scanner\">Initialising the Scanner</a></li>\n<li><a href=\"#the-scan-block\">The scan block</a></li>\n<li><a href=\"#ftp_login-final-view\">ftp_login final view</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"credential-objects\" style=\"position:relative;\"><a href=\"#credential-objects\" aria-label=\"credential objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Credential Objects</h1>\n<p><code class=\"language-text\">Metasploit::Framework::Credential\n(lib/metasploit/framework/credential.rb)</code></p>\n<p>These objects represent the most basic concept of how we now think about Credentials.</p>\n<ul>\n<li><strong>Public</strong>: The public part of a credential refers to the part that can be publicly known. In almost all cases this is the username.</li>\n<li><strong>Private</strong>: The private part of the credential, this is the part that should be a secret. This currently represents: Password, SSH Key, NTLM Hash etc.</li>\n<li><strong>Private Type</strong>: This defines what type of private credential is defined above</li>\n<li><strong>Realm</strong>: This represents an authentication realm that the credential is valid for. This is a tertiary part of the authentication process. Examples include: Active Directory Domain, Postgres Database etc.</li>\n<li><strong>Realm Key</strong>: This defines what type of Realm the Realm Attribute represents.</li>\n<li><strong>Paired</strong>: This attribute is a boolean value that sets whether the Credential must have both a public and private to be valid.</li>\n</ul>\n<p>All LoginScanners use Credential objects as the basis for their attempts.</p>\n<h1 id=\"result-objects\" style=\"position:relative;\"><a href=\"#result-objects\" aria-label=\"result objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Result Objects</h1>\n<p><code class=\"language-text\">Metasploit::Framework::LoginScanner::Result\n(lib/metasploit/framework/login_scanner/result.rb)</code></p>\n<p>These are the objects yielded by the <code class=\"language-text\">scan!</code> method on each <code class=\"language-text\">LoginScanner</code>.  They contain:</p>\n<ul>\n<li><strong>Access Level</strong>: An optional Access Level which can describe the level of access granted by the login attempt. </li>\n<li><strong>Credential</strong> : The Credential object that achieved that result</li>\n<li><strong>Proof</strong>: An optional proof string to show why we think the result is valid</li>\n<li><strong>Status</strong>: The status of the login attempt. These values come from Metasploit::model::Login::Status , examples include \"Incorrect\", \"Unable to Connect\", \"Untried\" etc</li>\n</ul>\n<h1 id=\"credentialcollection\" style=\"position:relative;\"><a href=\"#credentialcollection\" aria-label=\"credentialcollection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CredentialCollection</h1>\n<p><code class=\"language-text\">Metasploit::Framework::CredentialCollection\n(lib/metasploit/framework/credential_collection.rb)</code></p>\n<p>This class is used to take datastore options from a module and yield Credential objects from an each method. It takes wordlist files, as well as direct username and password options. It also takes options for username as pass and blank password. It can be passed in as the <code class=\"language-text\">cred_details</code> on the <code class=\"language-text\">LoginScanner</code>, and responds to #each and yields crafted Credentials.</p>\n<p><strong>Example (from modules/auxiliary/scanner/ftp/ftp_login.rb)</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">cred_collection <span class=\"token operator\">=</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">CredentialCollection</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>\n        blank_passwords<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'BLANK_PASSWORDS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        pass_file<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'PASS_FILE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        password<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        user_file<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USER_FILE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        userpass_file<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USERPASS_FILE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        username<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USERNAME'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        user_as_pass<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USER_AS_PASS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        prepended_creds<span class=\"token punctuation\">:</span> anonymous_creds\n    <span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id=\"loginscanner-base\" style=\"position:relative;\"><a href=\"#loginscanner-base\" aria-label=\"loginscanner base permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LoginScanner Base</h1>\n<p><code class=\"language-text\">Metasploit::Framework::LoginScanner::Base\n(lib/metasploit/framework/login_scanner/base.rb)</code></p>\n<p>This is a Ruby Module that contains all the base behaviour for all <code class=\"language-text\">LoginScanners</code>. All <code class=\"language-text\">LoginScanner</code> classes should include this module.</p>\n<p>The specs for this behaviour are kept in a shared example group. Specs for your <code class=\"language-text\">LoginScanner</code> should use the following syntax to include these tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">it_behaves_like <span class=\"token string\">'Metasploit::Framework::LoginScanner::Base'</span><span class=\"token punctuation\">,</span> has_realm_key<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> has_default_realm<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p> Where <code class=\"language-text\">has_realm_key</code> and <code class=\"language-text\">has_default_realm</code> should be set according to whether your <code class=\"language-text\">LoginScanner</code> has those things. (More on this later)</p>\n<p>LoginScanners always take a collection of Credentials to try and one host and port. So each <code class=\"language-text\">LoginScanner</code> object attempts to login to only one specific service.</p>\n<h2 id=\"attributes\" style=\"position:relative;\"><a href=\"#attributes\" aria-label=\"attributes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attributes</h2>\n<ul>\n<li><strong><code class=\"language-text\">connection_timeout</code></strong>: The time to wait for a connection to timeout</li>\n<li><strong><code class=\"language-text\">cred_details</code></strong>: An object that yields credentials on each (like credentialCollection or an Array)</li>\n<li><strong><code class=\"language-text\">host</code></strong>: The address for the target host</li>\n<li><strong><code class=\"language-text\">port</code></strong>: The port number for the target service</li>\n<li><strong><code class=\"language-text\">proxies</code></strong>: Any proxies to use in the connection (some scanners might not support this)</li>\n<li><strong><code class=\"language-text\">stop_on_success</code></strong>: Whether to stop trying after a successful login is found</li>\n</ul>\n<h2 id=\"methods\" style=\"position:relative;\"><a href=\"#methods\" aria-label=\"methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methods</h2>\n<ul>\n<li><strong><code class=\"language-text\">each_credential</code></strong> : You will not have to worry much about this method, Be aware that it is there. It iterates through whatever is in <code class=\"language-text\">cred_details</code>, does some normalization and tries to make sure each Credential is properly setup for use by the given <code class=\"language-text\">LoginScanner</code>. It yields each Credential in a block.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">each_credential</span></span>\n           cred_details<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>raw_cred<span class=\"token operator\">|</span>\n             <span class=\"token comment\"># This could be a Credential object, or a Credential Core, or an Attempt object</span>\n             <span class=\"token comment\"># so make sure that whatever it is, we end up with a Credential.</span>\n             credential <span class=\"token operator\">=</span> raw_cred<span class=\"token punctuation\">.</span>to_credential\n\n             <span class=\"token keyword\">if</span> credential<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>present<span class=\"token operator\">?</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">REALM_KEY</span><span class=\"token punctuation\">.</span>present<span class=\"token operator\">?</span>\n               credential<span class=\"token punctuation\">.</span>realm_key <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">REALM_KEY</span>\n               <span class=\"token keyword\">yield</span> credential\n             <span class=\"token keyword\">elsif</span> credential<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>blank<span class=\"token operator\">?</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">REALM_KEY</span><span class=\"token punctuation\">.</span>present<span class=\"token operator\">?</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">DEFAULT_REALM</span><span class=\"token punctuation\">.</span>present<span class=\"token operator\">?</span>\n               credential<span class=\"token punctuation\">.</span>realm_key <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">REALM_KEY</span>\n               credential<span class=\"token punctuation\">.</span>realm     <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">DEFAULT_REALM</span>\n               <span class=\"token keyword\">yield</span> credential\n             <span class=\"token keyword\">elsif</span> credential<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>present<span class=\"token operator\">?</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">REALM_KEY</span><span class=\"token punctuation\">.</span>blank<span class=\"token operator\">?</span>\n               second_cred <span class=\"token operator\">=</span> credential<span class=\"token punctuation\">.</span>dup\n               <span class=\"token comment\"># Strip the realm off here, as we don't want it</span>\n               credential<span class=\"token punctuation\">.</span>realm <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n               credential<span class=\"token punctuation\">.</span>realm_key <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n               <span class=\"token keyword\">yield</span> credential\n               <span class=\"token comment\"># Some services can take a domain in the username like this even though</span>\n               <span class=\"token comment\"># they do not explicitly take a domain as part of the protocol.</span>\n               second_cred<span class=\"token punctuation\">.</span><span class=\"token keyword\">public</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>second_cred<span class=\"token punctuation\">.</span>realm<span class=\"token delimiter tag\">}</span></span>\\\\<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>second_cred<span class=\"token punctuation\">.</span><span class=\"token keyword\">public</span><span class=\"token delimiter tag\">}</span></span>\"</span>\n               second_cred<span class=\"token punctuation\">.</span>realm <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n               second_cred<span class=\"token punctuation\">.</span>realm_key <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n               <span class=\"token keyword\">yield</span> second_cred\n             <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">yield</span> credential\n             <span class=\"token keyword\">end</span>\n           <span class=\"token keyword\">end</span>\n         <span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><strong><code class=\"language-text\">set_sane_defaults</code></strong>: This method will be overridden by each specific <code class=\"language-text\">LoginScanner</code>. This is called at the end of the initializer and sets any sane defaults for attributes that have them and were not given a specific value in the initializer.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\"># This is a placeholder method. Each LoginScanner class</span>\n         <span class=\"token comment\"># will override this with any sane defaults specific to</span>\n         <span class=\"token comment\"># its own behaviour.</span>\n         <span class=\"token comment\"># @abstract</span>\n         <span class=\"token comment\"># @return [void]</span>\n         <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">set_sane_defaults</span></span>\n           <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>connection_timeout <span class=\"token operator\">=</span> <span class=\"token number\">30</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>connection_timeout<span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span>\n         <span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><strong><code class=\"language-text\">attempt_login</code></strong>: This method is just a stub on the Base mixin. It will be overridden in each LoginScanner class to contain the logic to take one single Credential object and use it to make a login attempt against the target service. It returns a <code class=\"language-text\">::Metasploit::Framework::LoginScanner::Result</code> object containing all the information about that attempt's result. </li>\n</ul>\n<p>For an example let's look at the attempt<em>login method from `Metasploit::Framework::LoginScanner::FTP (lib/metasploit/framework/login</em>scanner/ftp.rb)`</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\"># (see Base#attempt_login)</span>\n       <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">attempt_login</span></span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">)</span>\n         result_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n             credential<span class=\"token punctuation\">:</span> credential\n         <span class=\"token punctuation\">}</span>\n\n         <span class=\"token keyword\">begin</span>\n           success <span class=\"token operator\">=</span> connect_login<span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">.</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">,</span> credential<span class=\"token punctuation\">.</span><span class=\"token keyword\">private</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">rescue</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">EOFError</span><span class=\"token punctuation\">,</span>  <span class=\"token constant\">Rex</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">AddressInUse</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Rex</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ConnectionError</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Rex</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ConnectionTimeout</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Timeout</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Error</span>\n           result_options<span class=\"token punctuation\">[</span><span class=\"token symbol\">:status</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Model</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Login</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Status</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">UNABLE_TO_CONNECT</span>\n           success <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n         <span class=\"token keyword\">end</span>\n\n\n         <span class=\"token keyword\">if</span> success\n           result_options<span class=\"token punctuation\">[</span><span class=\"token symbol\">:status</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Model</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Login</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Status</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">SUCCESSFUL</span>\n         <span class=\"token keyword\">elsif</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>result_options<span class=\"token punctuation\">.</span>has_key<span class=\"token operator\">?</span> <span class=\"token symbol\">:status</span><span class=\"token punctuation\">)</span>\n           result_options<span class=\"token punctuation\">[</span><span class=\"token symbol\">:status</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Model</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Login</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Status</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">INCORRECT</span>\n         <span class=\"token keyword\">end</span>\n\n         <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">LoginScanner</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Result</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>result_options<span class=\"token punctuation\">)</span>\n\n       <span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><strong><code class=\"language-text\">scan!</code></strong> : This method is the main one you will be concerned with. This method does several things.\n- It calls valid! which will check all of the validations on the class and raise an <code class=\"language-text\">Metasploit::Framework::LoginScanner::Invalid</code> if any of the Validations fail. This exception will contain all the errors messages for any failing validations.\n- it keeps track of the connection error count, and will bail out if we have too many connection errors or too many in a row\n- it runs through all of the credentials by calling each<em>credential with a block\n- in that block it passes each credential to `#attempt</em>login`\n- it yields the Result object into the block it is passed\n- if stop<em>on</em>success is set it will also exit out early if it the result was a success\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\"># Attempt to login with every {Credential credential} in</span>\n          <span class=\"token comment\"># {#cred_details}, by calling {#attempt_login} once for each.</span>\n          <span class=\"token comment\">#</span>\n          <span class=\"token comment\"># If a successful login is found for a user, no more attempts</span>\n          <span class=\"token comment\"># will be made for that user.</span>\n          <span class=\"token comment\">#</span>\n          <span class=\"token comment\"># @yieldparam result [Result] The {Result} object for each attempt</span>\n          <span class=\"token comment\"># @yieldreturn [void]</span>\n          <span class=\"token comment\"># @return [void]</span>\n          <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">scan</span></span><span class=\"token operator\">!</span>\n            valid<span class=\"token operator\">!</span>\n\n            <span class=\"token comment\"># Keep track of connection errors.</span>\n            <span class=\"token comment\"># If we encounter too many, we will stop.</span>\n            consecutive_error_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            total_error_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n            successful_users <span class=\"token operator\">=</span> <span class=\"token constant\">Set</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n\n            each_credential <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>credential<span class=\"token operator\">|</span>\n              <span class=\"token keyword\">next</span> <span class=\"token keyword\">if</span> successful_users<span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">.</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">)</span>\n\n              result <span class=\"token operator\">=</span> attempt_login<span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">)</span>\n              result<span class=\"token punctuation\">.</span>freeze\n\n              <span class=\"token keyword\">yield</span> result <span class=\"token keyword\">if</span> block_given<span class=\"token operator\">?</span>\n\n              <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span>success<span class=\"token operator\">?</span>\n                consecutive_error_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                <span class=\"token keyword\">break</span> <span class=\"token keyword\">if</span> stop_on_success\n                successful_users <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> credential<span class=\"token punctuation\">.</span><span class=\"token keyword\">public</span>\n              <span class=\"token keyword\">else</span>\n                <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Model</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Login</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Status</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">UNABLE_TO_CONNECT</span>\n                  consecutive_error_count <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n                  total_error_count <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n                  <span class=\"token keyword\">break</span> <span class=\"token keyword\">if</span> consecutive_error_count <span class=\"token operator\">>=</span> <span class=\"token number\">3</span>\n                  <span class=\"token keyword\">break</span> <span class=\"token keyword\">if</span> total_error_count <span class=\"token operator\">>=</span> <span class=\"token number\">10</span>\n                <span class=\"token keyword\">end</span>\n              <span class=\"token keyword\">end</span>\n            <span class=\"token keyword\">end</span>\n            <span class=\"token keyword\">nil</span>\n          <span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"constants\" style=\"position:relative;\"><a href=\"#constants\" aria-label=\"constants permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constants</h2>\n<p>Although not defined on Base, each <code class=\"language-text\">LoginScanner</code> has a series of Constants that can be defined on it to assist with critical behaviour.</p>\n<ul>\n<li><strong><code class=\"language-text\">DEFAULT_PORT</code></strong>: <code class=\"language-text\">DEFAULT_PORT</code> is a simple constant for use with <code class=\"language-text\">set_sane_defaults</code>. If the port isn't set by the user it will use <code class=\"language-text\">DEFAULT_PORT</code>. This is put in a constant so it can be quickly referenced from outside the scanner.</li>\n</ul>\n<p>These next two Constants are used by the LoginScanner namespace method classes<em>for</em>services. This method invoked by <code class=\"language-text\">Metasploit::Framework::LoginScanner.classes_for_service(&lt;Mdm::service&gt;)</code> will actually return an array of LoginScanner classes that may be useful to try against that particular Service.</p>\n<ul>\n<li><strong><code class=\"language-text\">LIKELY_PORTS</code></strong> : This constant holds n array of port numbers that it would be likely useful to use this scanner against.</li>\n<li><strong><code class=\"language-text\">LIKELY_SERVICE_NAMES</code></strong> : Like above except with strings for service names instead of port numbers.</li>\n<li><strong><code class=\"language-text\">PRIVATE_TYPES</code></strong> : This contains an array of symbols representing the different Private credential types it supports. It should always match the demodulize result for the Private class i.e :password, <code class=\"language-text\">:ntlm_hash</code>, <code class=\"language-text\">:ssh_key</code></li>\n</ul>\n<p>These constants are fore <code class=\"language-text\">LoginScanners</code> that have to deal with Realms such as AD domains or Database Names.</p>\n<ul>\n<li><strong><code class=\"language-text\">REALM_KEY</code></strong>: The type of Realm this scanner expects to deal with. Should always be a constants from <code class=\"language-text\">Metasploit::Model::Login::Status</code></li>\n<li><strong><code class=\"language-text\">DEFAULT_REALM</code></strong>: Some scanners have a default realm (like WORKSTATION for AD domain stuff). If a credential is given to a scanner that requires a realm, but the credential has no realm, this value will be added to the credential as the realm.</li>\n<li><strong><code class=\"language-text\">CAN_GET_SESSION</code></strong>: this should be either true or false as to whether we expect we could somehow get a session with a Credential found from this scanner.</li>\n</ul>\n<p> <strong>example1 ( Metasploit::Framework::LoginScanner::FTP)</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"> <span class=\"token constant\">DEFAULT_PORT</span>         <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n       <span class=\"token constant\">LIKELY_PORTS</span>         <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token constant\">DEFAULT_PORT</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2121</span> <span class=\"token punctuation\">]</span>\n       <span class=\"token constant\">LIKELY_SERVICE_NAMES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'ftp'</span> <span class=\"token punctuation\">]</span>\n       <span class=\"token constant\">PRIVATE_TYPES</span>        <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token symbol\">:password</span> <span class=\"token punctuation\">]</span>\n       <span class=\"token constant\">REALM_KEY</span>           <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p> <strong>example2 ( Metasploit::Framework::LoginScanner::SMB)</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">  <span class=\"token constant\">CAN_GET_SESSION</span>      <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token constant\">DEFAULT_REALM</span>        <span class=\"token operator\">=</span> <span class=\"token string\">'WORKSTATION'</span>\n        <span class=\"token constant\">LIKELY_PORTS</span>         <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">139</span><span class=\"token punctuation\">,</span> <span class=\"token number\">445</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token constant\">LIKELY_SERVICE_NAMES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"smb\"</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token constant\">PRIVATE_TYPES</span>        <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token symbol\">:password</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:ntlm_hash</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token constant\">REALM_KEY</span>            <span class=\"token operator\">=</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Model</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Realm</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Key</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ACTIVE_DIRECTORY_DOMAIN</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id=\"pulling-it-all-together-in-a-module\" style=\"position:relative;\"><a href=\"#pulling-it-all-together-in-a-module\" aria-label=\"pulling it all together in a module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pulling it all Together in a module</h1>\n<p>So now you hopefully have a good idea of all the moving pieces involved in creating a LoginScanner. The next step is using your brand new LoginScanner in an actual module. </p>\n<p>Let's look at the <code class=\"language-text\">ftp_login</code> module:</p>\n<p><code class=\"language-text\">def run_host(ip)</code></p>\n<p>Every Bruteforce/Login module should be a scanner and should use the run_host method which will run once for each RHOST.</p>\n<h2 id=\"the-cred-collection\" style=\"position:relative;\"><a href=\"#the-cred-collection\" aria-label=\"the cred collection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Cred Collection</h2>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">    cred_collection <span class=\"token operator\">=</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">CredentialCollection</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>\n        blank_passwords<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'BLANK_PASSWORDS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        pass_file<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'PASS_FILE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        password<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        user_file<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USER_FILE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        userpass_file<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USERPASS_FILE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        username<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USERNAME'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        user_as_pass<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USER_AS_PASS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        prepended_creds<span class=\"token punctuation\">:</span> anonymous_creds\n    <span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So here we see the CredentialCollection getting created using the datastore options. We pass in the options for Cred creation such as wordlists, raw usernames and passwords, whether to try the username as a password, and whether to try blank passwords. </p>\n<p>you'll also notice an option here called <code class=\"language-text\">prepended_creds</code>. FTP is one of the only module to make use of this, but it is generally available through the CredentialCollection. This option is an array of <code class=\"language-text\">Metasploit::Framework::Credential</code> objects that should be spit back by the collection before any others. FTP uses this to deal with testing for anon FTP access.</p>\n<h2 id=\"initialising-the-scanner\" style=\"position:relative;\"><a href=\"#initialising-the-scanner\" aria-label=\"initialising the scanner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initialising the Scanner</h2>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">scanner <span class=\"token operator\">=</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">LoginScanner</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FTP</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>\n        host<span class=\"token punctuation\">:</span> ip<span class=\"token punctuation\">,</span>\n        port<span class=\"token punctuation\">:</span> rport<span class=\"token punctuation\">,</span>\n        proxies<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'PROXIES'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        cred_details<span class=\"token punctuation\">:</span> cred_collection<span class=\"token punctuation\">,</span>\n        stop_on_success<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'STOP_ON_SUCCESS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        connection_timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\n    <span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here we actually create our Scanner object. We set the IP and Port based on data the module already knows about. We can pull any user supplied proxy data from the datatstore. we also pull from the datastore whether to stop on a success for this service. The cred details object is populated by our Credentialcollection which will handle all the credential generation for us invisibly.</p>\n<p>This gives us our scanner object, all configured and ready to go.</p>\n<h2 id=\"the-scan-block\" style=\"position:relative;\"><a href=\"#the-scan-block\" aria-label=\"the scan block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Scan Block</h2>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"> scanner<span class=\"token punctuation\">.</span>scan<span class=\"token operator\">!</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>result<span class=\"token operator\">|</span>\n      credential_data <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>to_h\n      credential_data<span class=\"token punctuation\">.</span>merge<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>\n          module_fullname<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>fullname<span class=\"token punctuation\">,</span>\n          workspace_id<span class=\"token punctuation\">:</span> myworkspace_id\n      <span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span>success<span class=\"token operator\">?</span>\n        credential_core <span class=\"token operator\">=</span> create_credential<span class=\"token punctuation\">(</span>credential_data<span class=\"token punctuation\">)</span>\n        credential_data<span class=\"token punctuation\">[</span><span class=\"token symbol\">:core</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> credential_core\n        create_credential_login<span class=\"token punctuation\">(</span>credential_data<span class=\"token punctuation\">)</span>\n\n        print_good <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>ip<span class=\"token delimiter tag\">}</span></span>:<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>rport<span class=\"token delimiter tag\">}</span></span> - LOGIN SUCCESSFUL: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token punctuation\">.</span>credential<span class=\"token delimiter tag\">}</span></span>\"</span>\n      <span class=\"token keyword\">else</span>\n        invalidate_login<span class=\"token punctuation\">(</span>credential_data<span class=\"token punctuation\">)</span>\n        print_status <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>ip<span class=\"token delimiter tag\">}</span></span>:<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>rport<span class=\"token delimiter tag\">}</span></span> - LOGIN FAILED: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token punctuation\">.</span>credential<span class=\"token delimiter tag\">}</span></span> (<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token punctuation\">.</span>status<span class=\"token delimiter tag\">}</span></span>: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token punctuation\">.</span>proof<span class=\"token delimiter tag\">}</span></span>)\"</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is the real heart of the matter here. We call s<code class=\"language-text\">can!</code> on our scanner, and pass it a block. As we mentioned before, the scanner yields each attempt's Result object into that block. We check the result's status to see if it was successful or not.</p>\n<p>The result object now as a <code class=\"language-text\">.to_h</code> method which returns a hash compatible with our credential creation methods. We take that hash and merge in our module specific information and workspace id.</p>\n<p>In the case of a success we build some info hashes and call <code class=\"language-text\">create_credential</code>. This is a method found in the metasploit-credential gem under <code class=\"language-text\">lib/metasploit/credential/creation.rb</code> in a mixin called <code class=\"language-text\">Metasploit::Credential::Creation</code>. This mixin is included in the Report mixin, so if your module includes that mixin you'll get these methods for free.</p>\n<p><code class=\"language-text\">create_credential</code> creates a <code class=\"language-text\">Metasploit::Credential::Core</code>. We then take that core, the service data, and merge it with some additional data. This additional data includes the access level, the current time (to update last<em>attempted</em>at on the <code class=\"language-text\">Metasploit::Credential::Login</code>), the the status. </p>\n<p>Finally, for a success, we output the result to the console.</p>\n<p>In the case of a failure, we call the <code class=\"language-text\">invalidate_login</code> method. This method also comes from the Creation mixin. This method looks to see if a Login object already exists for this credential:service pair. If it does, it updates the status to the status we got back from the scanner. This is primarily to account for Login objects created by things like Post modules that have an untried status.</p>\n<h2 id=\"ftp_login-final-view\" style=\"position:relative;\"><a href=\"#ftp_login-final-view\" aria-label=\"ftp_login final view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">ftp_login</code> Final View</h2>\n<p>Pulling it all together, we get a new <code class=\"language-text\">ftp_login</code> module that looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token comment\">##</span>\n<span class=\"token comment\"># This module requires Metasploit: http//metasploit.com/download</span>\n<span class=\"token comment\"># Current source: https://github.com/rapid7/metasploit-framework</span>\n<span class=\"token comment\">##</span>\n\n<span class=\"token keyword\">require</span> <span class=\"token string\">'msf/core'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'metasploit/framework/credential_collection'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'metasploit/framework/login_scanner/ftp'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Metasploit3</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Auxiliary</span>\n\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Exploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Remote</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Ftp</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Auxiliary</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Scanner</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Auxiliary</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Report</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Msf</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Auxiliary</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">AuthBrute</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">proto</span></span>\n    <span class=\"token string\">'ftp'</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'Name'</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'FTP Authentication Scanner'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Description'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">%q{\n        This module will test FTP logins on a range of machines and\n        report successful logins.  If you have loaded a database plugin\n        and connected to a database this module will record successful\n        logins and hosts so you can track your access.\n      }</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Author'</span>      <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'todb'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'References'</span>     <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">[</span> <span class=\"token string\">'CVE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1999-0502'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># Weak password</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'License'</span>     <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token constant\">MSF_LICENSE</span>\n    <span class=\"token punctuation\">)</span>\n\n    register_options<span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">[</span>\n        <span class=\"token constant\">Opt</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">RPORT</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">OptBool</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">'RECORD_GUEST'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Record anonymous/guest logins to the database\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\n    register_advanced_options<span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">[</span>\n        <span class=\"token constant\">OptBool</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SINGLE_SESSION'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Disconnect after every login attempt'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n\n    deregister_options<span class=\"token punctuation\">(</span><span class=\"token string\">'FTPUSER'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'FTPPASS'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Can use these, but should use 'username' and 'password'</span>\n    <span class=\"token variable\">@accepts_all_logins</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">run_host</span></span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span>\n    print_status<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>ip<span class=\"token delimiter tag\">}</span></span>:<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>rport<span class=\"token delimiter tag\">}</span></span> - Starting FTP login sweep\"</span><span class=\"token punctuation\">)</span>\n\n    cred_collection <span class=\"token operator\">=</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">CredentialCollection</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>\n        blank_passwords<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'BLANK_PASSWORDS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        pass_file<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'PASS_FILE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        password<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        user_file<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USER_FILE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        userpass_file<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USERPASS_FILE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        username<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USERNAME'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        user_as_pass<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'USER_AS_PASS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        prepended_creds<span class=\"token punctuation\">:</span> anonymous_creds\n    <span class=\"token punctuation\">)</span>\n\n    scanner <span class=\"token operator\">=</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">LoginScanner</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FTP</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>\n        host<span class=\"token punctuation\">:</span> ip<span class=\"token punctuation\">,</span>\n        port<span class=\"token punctuation\">:</span> rport<span class=\"token punctuation\">,</span>\n        proxies<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'PROXIES'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        cred_details<span class=\"token punctuation\">:</span> cred_collection<span class=\"token punctuation\">,</span>\n        stop_on_success<span class=\"token punctuation\">:</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'STOP_ON_SUCCESS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        connection_timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\n    <span class=\"token punctuation\">)</span>\n\n    scanner<span class=\"token punctuation\">.</span>scan<span class=\"token operator\">!</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>result<span class=\"token operator\">|</span>\n      credential_data <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>to_h\n      credential_data<span class=\"token punctuation\">.</span>merge<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>\n          module_fullname<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>fullname<span class=\"token punctuation\">,</span>\n          workspace_id<span class=\"token punctuation\">:</span> myworkspace_id\n      <span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span>success<span class=\"token operator\">?</span>\n        credential_core <span class=\"token operator\">=</span> create_credential<span class=\"token punctuation\">(</span>credential_data<span class=\"token punctuation\">)</span>\n        credential_data<span class=\"token punctuation\">[</span><span class=\"token symbol\">:core</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> credential_core\n        create_credential_login<span class=\"token punctuation\">(</span>credential_data<span class=\"token punctuation\">)</span>\n\n        print_good <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>ip<span class=\"token delimiter tag\">}</span></span>:<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>rport<span class=\"token delimiter tag\">}</span></span> - LOGIN SUCCESSFUL: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token punctuation\">.</span>credential<span class=\"token delimiter tag\">}</span></span>\"</span>\n      <span class=\"token keyword\">else</span>\n        invalidate_login<span class=\"token punctuation\">(</span>credential_data<span class=\"token punctuation\">)</span>\n        print_status <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>ip<span class=\"token delimiter tag\">}</span></span>:<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>rport<span class=\"token delimiter tag\">}</span></span> - LOGIN FAILED: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token punctuation\">.</span>credential<span class=\"token delimiter tag\">}</span></span> (<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token punctuation\">.</span>status<span class=\"token delimiter tag\">}</span></span>: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token punctuation\">.</span>proof<span class=\"token delimiter tag\">}</span></span>)\"</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">end</span>\n\n\n  <span class=\"token comment\"># Always check for anonymous access by pretending to be a browser.</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">anonymous_creds</span></span>\n    anon_creds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> datastore<span class=\"token punctuation\">[</span><span class=\"token string\">'RECORD_GUEST'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">'IEUser@'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'User@'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mozilla@example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chrome@example.com'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>password<span class=\"token operator\">|</span>\n        anon_creds <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token constant\">Metasploit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Framework</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Credential</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'anonymous'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span><span class=\"token punctuation\">:</span> password<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    anon_creds\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_ftp_access</span></span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>scanner<span class=\"token punctuation\">)</span>\n    dir <span class=\"token operator\">=</span> <span class=\"token constant\">Rex</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Text</span><span class=\"token punctuation\">.</span>rand_text_alpha<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    write_check <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span>send_cmd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'MKD'</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> write_check <span class=\"token keyword\">and</span> write_check <span class=\"token operator\">=</span><span class=\"token operator\">~</span> <span class=\"token regex\">/^2/</span>\n      scanner<span class=\"token punctuation\">.</span>send_cmd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'RMD'</span><span class=\"token punctuation\">,</span>dir<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n      print_status<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>rhost<span class=\"token delimiter tag\">}</span></span>:<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>rport<span class=\"token delimiter tag\">}</span></span> - User '<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>user<span class=\"token delimiter tag\">}</span></span>' has READ/WRITE access\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'Read/Write'</span>\n    <span class=\"token keyword\">else</span>\n      print_status<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>rhost<span class=\"token delimiter tag\">}</span></span>:<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>rport<span class=\"token delimiter tag\">}</span></span> - User '<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>user<span class=\"token delimiter tag\">}</span></span>' has READ access\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'Read-only'</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}},"pageContext":{"id":"12f0d6a3-a148-5604-b5aa-1d64337ebfe0"}}}