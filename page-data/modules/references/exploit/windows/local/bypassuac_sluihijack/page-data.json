{"componentChunkName":"component---src-templates-module-references-template-tsx","path":"/modules/references/exploit/windows/local/bypassuac_sluihijack","result":{"data":{"moduleMetadataJson":{"id":"19aeebe1-0eac-50c5-b0da-3d198a82dc4c","name":"Windows UAC Protection Bypass (Via Slui File Handler Hijack)","fullname":"exploit/windows/local/bypassuac_sluihijack","description":"This module will bypass UAC on Windows 8-10 by hijacking a special key in the Registry under\n          the Current User hive, and inserting a custom command that will get invoked when any binary\n          (.exe) application is launched. But slui.exe is an auto-elevated binary that is vulnerable\n          to file handler hijacking. When we run slui.exe with changed Registry key\n          (HKCU:\\Software\\Classes\\exefile\\shell\\open\\command), it will run our custom command as Admin\n          instead of slui.exe.\n\n          The module modifies the registry in order for this exploit to work. The modification is\n          reverted once the exploitation attempt has finished.\n\n          The module does not require the architecture of the payload to match the OS. If\n          specifying EXE::Custom your DLL should call ExitProcess() after starting the\n          payload in a different process.","rank":600,"fields":{"detailsSlug":"/modules/details/exploit/windows/local/bypassuac_sluihijack","documentationSlug":"/modules/documentation/exploit/windows/local/bypassuac_sluihijack","referencesSlug":"/modules/references/exploit/windows/local/bypassuac_sluihijack"},"references":["https://github.com/bytecode-77/slui-file-handler-hijack-privilege-escalation","https://github.com/gushmazuko/WinBypass/blob/master/SluiHijackBypass.ps1"]}},"pageContext":{"id":"19aeebe1-0eac-50c5-b0da-3d198a82dc4c"}}}