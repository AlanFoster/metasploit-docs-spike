{"componentChunkName":"component---src-templates-module-references-template-tsx","path":"/modules/references/auxiliary/fuzzers/ntp/ntp_protocol_fuzzer","result":{"data":{"moduleMetadataJson":{"id":"9eafbeb2-daae-5643-934c-fb039ed986ff","name":"NTP Protocol Fuzzer","fullname":"auxiliary/fuzzers/ntp/ntp_protocol_fuzzer","description":"A simplistic fuzzer for the Network Time Protocol that sends the\n        following probes to understand NTP and look for anomalous NTP behavior:\n\n        * All possible combinations of NTP versions and modes, even if not\n          allowed or specified in the RFCs\n        * Short versions of the above\n        * Short, invalid datagrams\n        * Full-size, random datagrams\n        * All possible NTP control messages\n        * All possible NTP private messages\n\n        This findings of this fuzzer are not necessarily indicative of bugs,\n        let alone vulnerabilities, rather they point out interesting things\n        that might deserve more attention.  Furthermore, this module is not\n        particularly intelligent and there are many more areas of NTP that\n        could be explored, including:\n\n        * Warn if the response is 100% identical to the request\n        * Warn if the \"mode\" (if applicable) doesn't align with what we expect,\n        * Filter out the 12-byte mode 6 unsupported opcode errors.\n        * Fuzz the control message payload offset/size/etc.  There be bugs","rank":300,"fields":{"detailsSlug":"/modules/details/auxiliary/fuzzers/ntp/ntp_protocol_fuzzer","documentationSlug":"/modules/documentation/auxiliary/fuzzers/ntp/ntp_protocol_fuzzer","referencesSlug":"/modules/references/auxiliary/fuzzers/ntp/ntp_protocol_fuzzer"},"references":[]}},"pageContext":{"id":"9eafbeb2-daae-5643-934c-fb039ed986ff"}}}