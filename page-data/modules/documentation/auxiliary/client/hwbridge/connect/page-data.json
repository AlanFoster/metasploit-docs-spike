{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/auxiliary/client/hwbridge/connect","result":{"data":{"moduleMetadataJson":{"id":"c3ebd311-e96d-5e93-8a85-82641904ca64","name":"Hardware Bridge Session Connector","fullname":"auxiliary/client/hwbridge/connect","description":"The Hardware Bridge (HWBridge) is a standardized method for\n          Metasploit to interact with Hardware Devices.  This extends\n          the normal exploit capabilities to the non-ethernet realm and\n          enables direct hardware and alternative bus manipulations.  You\n          must have compatible bridging hardware attached to this machine or\n          reachable on your network to use any HWBridge exploits.\n\n          Use this exploit module to connect the physical HWBridge which\n          will start an interactive hwbridge session.  You can launch a hwbridge\n          server locally by using compliant hardware and executing the local_hwbridge\n          module.  After that module has started, pass the HWBRIDGE_BASE_URL\n          options to this connector module.","rank":300,"fields":{"detailsSlug":"/modules/details/auxiliary/client/hwbridge/connect","documentationSlug":"/modules/documentation/auxiliary/client/hwbridge/connect"},"documentation":{"html":"<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p>This module connects to any Hardware device that supports the HWBridge API.  For details\non the HWBridge API see <a href=\"http://opengarages.org/hwbridge\">API Reference</a>.  On successful connection to a HWBridge a\nHWBridge session will be established.</p>\n<h2 id=\"devices\" style=\"position:relative;\"><a href=\"#devices\" aria-label=\"devices permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Devices</h2>\n<p>When run on linux you can use the auxiliary/server/local<em>hwbridge to talk to any device supported by SocketCAN.\nIt will work with natively supported devices (can), serial devices (slcan) and even virtual devices (vcan). For\na list of supported SocketCAN hardware see the [eLinux website](<a href=\"http://elinux.org/CAN\">http://elinux.org/CAN</a></em>Bus).</p>\n<p>Any ELM327 or STN1100 interface will work with the HWBridge. If you pick up any device that uses either of\nthese chipsets can can connect via serial (USB or Bluetooth) it will work.  These are popular and inexpensive\ndevices.  They are not as fast as some of the native CAN devices but they are plentiful and cheap.</p>\n<p>This module was also tested with the <a href=\"https://Particle.io\">Particle</a> Photon board.  To utilize a Particle.io Photon board you\nwill want to add the spark-msf-relay library to your project.  See the library examples for details on\nhow to extend your project to integrate it with Metasploit.  If you are building an automotive project\nand you are using the <a href=\"https://carloop.io\">Carloop</a> then the spark-msf-relay library also includes an example app for carloop\nthat you can simply flash to the device for full support.</p>\n<ol start=\"2\">\n<li>Generic ELM327: <a href=\"http://www.ebay.com/itm/like/221821719820\">ebay</a></li>\n</ol>\n<h2 id=\"bluetooth-adapter-connection\" style=\"position:relative;\"><a href=\"#bluetooth-adapter-connection\" aria-label=\"bluetooth adapter connection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bluetooth Adapter Connection</h2>\n<p>Bluetooth HWBridge adapters, depending on the Operating System, may take several additional steps to establish a connection and communications bus.\nThe following steps were <a href=\"https://github.com/rapid7/metasploit-framework/pull/7795#issuecomment-274302326\">recorded during the testing of this module</a>\non setting up the <a href=\"https://bafxpro.com/products/obdreader\">BAFX 34t5</a> with Kali Linux 2016.2 (rolling).</p>\n<ol>\n<li>Most Bluetooth HWBridge adapters, speak serial. So you will need to get the ruby gem \"serialport\": <code class=\"language-text\">gem install serialport</code></li>\n<li>Ensure no locks on the Bluetooth device via: <code class=\"language-text\">rfkill list</code> (and subsequent <code class=\"language-text\">unblock</code> commands)</li>\n<li>Make sure Bluetooth service is started: <code class=\"language-text\">/etc/init.d/bluetooth start</code>, or <code class=\"language-text\">bluetoothd</code></li>\n<li>Start bluetoothctl: <code class=\"language-text\">bluetoothctl</code></li>\n<li>Turn on scanning: <code class=\"language-text\">scan on</code></li>\n<li>Turn on agent: <code class=\"language-text\">agent on</code></li>\n<li>Make sure we can see OBDII: <code class=\"language-text\">devices</code></li>\n<li>Attempt to pair: <code class=\"language-text\">[bluetooth]# pair 00:0D:18:AA:AA:AA</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Attempting to pair with 00:0D:18:AA:AA:AA\n[CHG] Device 00:0D:18:AA:AA:AA Connected: yes</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ol start=\"9\">\n<li>If prompted for pin: <code class=\"language-text\">1234</code></li>\n<li>Trust the device in order to not put in the pin again: <code class=\"language-text\">trust 00:0D:18:AA:AA:AA</code></li>\n<li>Use rfcomm to make the connection and serial interface in a different window (not bluetoothctl): <code class=\"language-text\">rfcomm connect /dev/rfcomm1 &quot;00:0D:18:AA:AA:AA&quot;</code></li>\n</ol>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p> <strong>TARGETURI</strong></p>\n<p> Specifies the base target URI to communicate to the HWBridge API.  By default this is '/' but it\ncould be things such as '/api' or the randomly generated URI from the local_hwbridge module</p>\n<p> <strong>DEBUGJSON</strong></p>\n<p> Prints out all the JSON packets that come from the HWBridge API.  Useful for troubleshooting\na device.</p>\n<p> This module also supports all the other HTTP Client options typical to Metaplsoit.</p>\n<h2 id=\"sample-connection\" style=\"position:relative;\"><a href=\"#sample-connection\" aria-label=\"sample connection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sample Connection</h2>\n<p>For an example, lets say we connect to a HW Bridge that is designed for automotive use\nand has support for multiple CAN buses.  The remote device in our example is called 'carhax'</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use auxiliary/client/hwbridge/connect \nmsf auxiliary(connect) &gt; set rhost carhax\nrhost =&gt; carhax\nmsf auxiliary(connect) &gt; run\n\n[*] Attempting to connect to carhax...\n[*] Hardware bridge interface session 1 opened (127.0.0.1 -&gt; 127.0.0.1) at 2016-12-29 13:49:55 -0800\n[+] HWBridge session established\n[*] HW Specialty: {&quot;automotive&quot;=&gt;true}  Capabilities: {&quot;can&quot;=&gt;true, &quot;custom_methods&quot;=&gt;true}\n[!] NOTICE:  You are about to leave the matrix.  All actions performed on this hardware bridge\n[!]          could have real world consequences.  Use this module in a controlled testing\n[!]          environment and with equipment you are authorized to perform testing on.\n[*] Auxiliary module execution completed</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>On successful connection to a Hardware device you will be prompted with a special notice to\nremind you that any action you take on the HWBridge could have physical affects and consequences.\nOur lawyers asked us to put that there.  You can verify the session was created by type 'sessions'</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(connect) &gt; sessions\n\nActive sessions\n===============\n\n  Id  Type                   Information  Connection\n  --  ----                   -----------  ----------\n  1   hwbridge cmd/hardware  automotive   127.0.0.1 -&gt; 127.0.0.1 (10.1.10.21)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"automotive-extension\" style=\"position:relative;\"><a href=\"#automotive-extension\" aria-label=\"automotive extension permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Automotive Extension</h2>\n<p>If a device specifies a hw_specialty then it can load custom extensions.  For instance, if\na defice defines its specialty is automotive then Metasploit will load a custom automotive\nextension that gives you a few generic commands you can use on autotive systems such as the\nability to send arbitrary CAN packets down the bus.  It also allows you to run any\npost/hardware/automotive modules.</p>\n<p>For instance you can run post/hardware/automtive/getvinfo to retrieve vehicle information\nvia UDS Mode $9 commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">hwbridge &gt; run post/hardware/automotive/getvinfo CANBUS=can2\n\n[*] Supported PIDS: [2, 4, 6, 8]\n[*] VIN: 1G1ZT53826F109149\n[*] Calibration ID: x\n[*] PID 6 Response: [&quot;00&quot;, &quot;00&quot;, &quot;C4&quot;, &quot;E9&quot;, &quot;00&quot;, &quot;00&quot;, &quot;17&quot;, &quot;33&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;]\n[*] PID 8 Response: [&quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>run 'supported_buses' for a list of available buses provided by your hardware.  And as always you can\ntype 'help' for a list of available commands and each command should support '-h' to additional\nargument help.</p>\n<h2 id=\"custom-method-extension\" style=\"position:relative;\"><a href=\"#custom-method-extension\" aria-label=\"custom method extension permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Method Extension</h2>\n<p>It is possible for the hardware device to report functionality that Metasploit has no knowledge\nof.  For instance, perhaps the device has a unique capability that isn't standard or can be done\n100% in hardware.  In order to utilize that functionality the HW device can report that it has\ncustom_methods as a capability.  At which point Metasploit will then query the custom methods\nand their argument syntax.  These methods will become available as command line options\nwithin the hardware bridge.</p>\n<p>For a simple example of a custom method see auxiliary/server/local_hwbridge for a more complete\nlist on how to define custom methods see the <a href=\"http://opengarages.org/hwbridge\">API Reference</a>.</p>"}}},"pageContext":{"id":"c3ebd311-e96d-5e93-8a85-82641904ca64"}}}