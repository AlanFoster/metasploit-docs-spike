{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/auxiliary/server/local_hwbridge","result":{"data":{"moduleMetadataJson":{"id":"04e0fdf4-2039-5082-b84f-998785b51bc3","name":"Hardware Bridge Server","fullname":"auxiliary/server/local_hwbridge","description":"This module sets up a web server to bridge communications between\n        Metasploit and physically attached hardware.\n        Currently this module supports: automotive","rank":300,"fields":{"detailsSlug":"/modules/details/auxiliary/server/local_hwbridge","documentationSlug":"/modules/documentation/auxiliary/server/local_hwbridge","referencesSlug":"/modules/references/auxiliary/server/local_hwbridge"},"documentation":{"html":"<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p>This is a sample hardware bridge that demonstrates how to connect the HWBridge API to metasploit.\nIt demonstrates some bare minimum capabilities to report back to the hardware connector and\nestablish a hwbridge session.  This module provides an example on how to connect any hardware\ncomponent to Metasploit.  It is also a fully functional interface to SocketCAN and will work\nto create an automotive HW Bridge.</p>\n<h2 id=\"setup-a-test\" style=\"position:relative;\"><a href=\"#setup-a-test\" aria-label=\"setup a test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup a Test</h2>\n<p>To experimient with using Metasploit to send automtovie CAN bus packets you can use\nthe SocketCAN capabilities of Linux to create a virtual CAN device.  NOTE: If you have a\nsupported CAN sniffer you could also use a real can device.</p>\n<p>In order for the local_hwbridge to inteface with SocketCAN you will need:</p>\n<ul>\n<li>can-utils</li>\n</ul>\n<p>Once those are installed you can setup a virtual CAN inteface using:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">sudo modprobe can\nsudo modprobe vcan\nsudo ip link add dev vcan0 type vcan\nsudo ip link set up vcan0</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Once that is setup you can simply launch the module and it should auto detect any\nCAN intefaces you have active on the system.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use auxiliary/server/local_hwbridge \nmsf auxiliary(local_hwbridge) &gt; run\n[*] Auxiliary module execution completed\n\n[*] Using URL: http://0.0.0.0:8080/xaUKu68Va\n[*] Local IP: http://10.1.10.21:8080/xaUKu68Va\n[*] Server started.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>By default it will create a random URI, in this case it's xaUKu68Va.</p>\n<h2 id=\"connecting-to-the-hwbridge\" style=\"position:relative;\"><a href=\"#connecting-to-the-hwbridge\" aria-label=\"connecting to the hwbridge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connecting to the HWBridge</h2>\n<p>You will need to use the auxiliary/client/hwbridge/connect to connect\nto the local<em>hwbridge.  You can either use the same machine or another machine to\nconnect to your local</em>hwbridge.  Just make sure the TARGETURI matches the randomly\ngenerated URI</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set TARGETURI xaUKu68Va</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Then simply type run and you should connect to the HW bridge and a hwbridge session\nshould be established.  You can switch to the hwbridge session to interact with\nthis module.</p>\n<p>See the documentation for auxiliary/client/hwbridge/connect for more information on\nthe hwbridge sessions.</p>"}}},"pageContext":{"id":"04e0fdf4-2039-5082-b84f-998785b51bc3"}}}