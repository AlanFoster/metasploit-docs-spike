{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/auxiliary/server/browser_autopwn2","result":{"data":{"moduleMetadataJson":{"id":"4f34e5ae-a6a9-5943-8000-5200a64a0182","name":"HTTP Client Automatic Exploiter 2 (Browser Autopwn)","fullname":"auxiliary/server/browser_autopwn2","description":"This module will automatically serve browser exploits. Here are the options you can\n        configure:\n\n        The INCLUDE_PATTERN option allows you to specify the kind of exploits to be loaded. For example,\n        if you wish to load just Adobe Flash exploits, then you can set Include to 'adobe_flash'.\n\n        The EXCLUDE_PATTERN option will ignore exploits. For example, if you don't want any Adobe Flash\n        exploits, you can set this. Also note that the Exclude option will always be evaluated\n        after the Include option.\n\n        The MaxExploitCount option specifies the max number of exploits to load by Browser Autopwn.\n        By default, 20 will be loaded. But note that the client will probably not be vulnerable\n        to all 20 of them, so only some will actually be served to the client.\n\n        The HTMLContent option allows you to provide a basic webpage. This is what the user behind\n        the vulnerable browser will see. You can simply set a string, or you can do the file://\n        syntax to load an HTML file. Note this option might break exploits so try to keep it\n        as simple as possible.\n\n        The MaxSessionCount option is used to limit how many sessions Browser Autopwn is allowed to\n        get. The default -1 means unlimited. Combining this with other options such as RealList\n        and Custom404, you can get information about which visitors (IPs) clicked on your malicious\n        link, what exploits they might be vulnerable to, redirect them to your own internal\n        training website without actually attacking them.\n\n        For more information about Browser Autopwn, please see the referenced blog post.","rank":300,"fields":{"detailsSlug":"/modules/details/auxiliary/server/browser_autopwn2","documentationSlug":"/modules/documentation/auxiliary/server/browser_autopwn2"},"documentation":{"html":"<p>Browser Autopwn 2 is a complete redesign from the first one, so quite a few things will look and\nfeel different for you. Here are the features you should know about before using.</p>\n<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>Browser Autopwn 2 is capable of targeting popular browsers and 3rd party plugins, such as:</p>\n<ul>\n<li>Internet Explorer</li>\n<li>Mozilla Firefox</li>\n<li>Adobe Flash</li>\n<li>Java</li>\n<li>ActiveX</li>\n<li>Silverlight</li>\n</ul>\n<h2 id=\"exploit-urls\" style=\"position:relative;\"><a href=\"#exploit-urls\" aria-label=\"exploit urls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exploit URLs</h2>\n<p>Normally, the only URL you need to care about is the <strong>BrowserAutoPwn URL</strong>. This is the URL\nyou should send to the targets you wish to attack.</p>\n<p>For debugging purposes, you can also see each browser exploit's specific URL path. You can do so\nby setting the VERBOSE option to true in msfconsole, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set VERBOSE true</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>And then when you run the module, there will be a list showing all the exploits that might be\nused, including the URLs.</p>\n<h2 id=\"browser-autopwn-2-options\" style=\"position:relative;\"><a href=\"#browser-autopwn-2-options\" aria-label=\"browser autopwn 2 options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Browser Autopwn 2 Options</h2>\n<p><strong>The HTMLContent Option</strong></p>\n<p>The HTMLContent option allows you to serve a basic HTML web page to the browser instead of having a\nblank one. It supports two syntaxes.</p>\n<p>This example will basically print \"Hello world!\" on the browser while exploits are tested against\nit.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set HTMLContent Hello world!  </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>This example will load file /tmp/hello_world.html and that's what the browser will see. Most likely\nthe second syntax is how you'd want to use the Content option.</p>\n<p>Keep in mind that you should probably try to keep HTMLContent as simple as possible, otherwise\nthere is a possibility that it might actually influence the reliability of the exploits, especially\nthe ones that do memory corruption.</p>\n<p><strong>The EXCLUDE_PATTERN option</strong></p>\n<p>The EXCLUDE_PATTERN option is used for excluding exploit file names you don't want Browser\nAutopwn 2 to use. This is a regex type option, you can be creative about this.</p>\n<p>For example, Adobe Flash exploits in Metasploit tend to have the same file name that begins with:\n\"adobe<em>flash</em>\", so to exclude those, you can do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set EXCLUDE_PATTERN adobe_flash  </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>The INCLUDE_PATTERN option</strong></p>\n<p>The INCLUDE_PATTERN option is for loading specific exploits that you want Browser Autopwn 2 to use.\nLet's reuse the Adobe Flash file name example, if you only want Flash exploits, you can do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set INCLUDE_PATTERN adobe_flash  </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>If you set both INCLUDE<em>PATTERN and EXCLUDE</em>PATTERN, the evaluation for INCLUDE<em>PATTERN will kick\nin first, followed by EXCLUDE</em>PATTERN.</p>\n<p><strong>The MaxExploitCount option</strong></p>\n<p>The MaxExploitCount option is for specifying how many exploits you want Browser Autopwn 2 to load.\nBy default, it's 21. But you can try to bump it up a little bit if you wish to try more exploits.\nNote that by doing so you are also allowing more lower ranking modules to kick in, you will have\nto figure out the sweet spot for it. An example of setting it:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set MaxExploitCount 30 </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>The MaxSessionCount option</strong></p>\n<p>The MaxSessionCount option is for limiting how many sessions to get. It may sound a little odd at\nfirst because why would you want to do that, right? Well, a use case for this is when you don't\nactually want to pop shells, instead you just want to know what exploits could be used, this is\nsomething you can try. You can also use this if you don't want your attack to stay open the whole\ntime:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set MaxSessionCount 10  </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>The ShowExploitList option</strong></p>\n<p>The ShowExploitList option means displaying a list of exploits specific to each browser/client.\nAs we've explained before, when BAP2 loads 21 exploits, probably not all 21 will be served to\nthe browser, only some of them. In order to see those ones, you need to set this option:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set ShowExploitList true</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>The AllowedAddresses option</strong></p>\n<p>The AllowedAddresses option is for attacking a specific range of IPs as a way to avoid penetration\ntesting accidents. For example, when you send a malicious link to a specific person, that person\nmay actually share it with his friends, family or other people, and those people aren't your\ntargets so you shouldn't hit them. Well, Browser Autopwn doesn't know that, so one of the ways to\navoid that is to create a whitelist.</p>\n<p>The option also supports two syntaxes. This is most likely how you will set it:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set AllowedAddresses file:///tmp/ip_list.txt  </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The above will load file ip_list.txt. In that file, one IP per line.</p>\n<p><strong>The ExploitReloadTimeout option</strong></p>\n<p>The ExploitReloadTimeout is for setting how long BAP2 should wait before loading the next exploit.\nBy default, it's 3 seconds, but in case some exploits need more time (for example, longer time to\ngroom the heap, load other things, or it's doing a sleep somewhere), you will need to set this.\nIn most cases, you shouldn't have to.</p>\n<p>Here's an example of setting it to 5 seconds:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set ExploitReloadTimeout 5000</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<p>By default, Browser Autopwn 2 goes through the entire exploit module tree, and will try to use\ndifferent types of exploits - Firefox, Internet Explorer, Adobe Flash, Android, etc. If you want to\ntest a specific application, basically all you need to do is setting the\nINCLUDE<em>PATTERN option (or maybe EXCLUDE</em>PATTERN).</p>\n<p>However, there is another trick to make this task even easier. BAP2 also comes with the following\nresource scripts that can automatically do this:</p>\n<ul>\n<li>bap<em>firefox</em>only.rc - For testing Firefox</li>\n<li>bap<em>flash</em>only.rc - Fore testing Adobe Flash</li>\n<li>bap<em>ie</em>only.rc - For testing Internet Explorer</li>\n<li>bap<em>dryrun</em>only.rc - Rickrolls the target, and shows you all the suitable exploits against that target. No exploits will actually be fired.</li>\n</ul>\n<p>Here's an example of using bap<em>flash</em>only.rc to test Adobe Flash vulnerabilities:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ ./msfconsole -q -r scripts/resource/bap_flash_only.rc   </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"logging\" style=\"position:relative;\"><a href=\"#logging\" aria-label=\"logging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging</h2>\n<p>In addition, when a browser connects to BAP, this link-clicking event is also logged to the\ndatabase as a \"bap.clicks\" note type. If the ShowExploitList option is set to true, that will also\nsave the exploit list information so that after testing you can go back to the database and see\nwhich users are vulnerable to what exploits.</p>\n<p>Even if you don't set the ShowExploitList option, the logged link-clicking event data is more than\nenough to prove that the user was social-engineered, which is still a security risk.</p>\n<p>To see all the bap.clicks events, in msfconsole do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">notes -t bap.clicks</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>From there, you can do additional analysis of these notes, put it on your report, and hopefully\ndo something about it.</p>"}}},"pageContext":{"id":"4f34e5ae-a6a9-5943-8000-5200a64a0182"}}}