{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/windows/browser/ms13_059_cflatmarkuppointer","result":{"data":{"moduleMetadataJson":{"id":"0cfea2fb-7ca0-5d64-a7f1-ddc1f8ebc061","name":"MS13-059 Microsoft Internet Explorer CFlatMarkupPointer Use-After-Free","fullname":"exploit/windows/browser/ms13_059_cflatmarkuppointer","description":"This is a memory corruption bug found in Microsoft Internet Explorer. On IE 9,\n        it seems to only affect certain releases of mshtml.dll, ranging from a newly\n        installed IE9 (9.0.8112.16446), to 9.00.8112.16502 (July 2013 update). IE8\n        requires a different way to trigger the vulnerability, but not currently covered\n        by this module.\n\n        The issue is specific to the browser's IE7 document compatibility, which can be\n        defined in X-UA-Compatible, and the content editable mode must be enabled. An\n        \"onmove\" event handler is also necessary to be able to trigger the bug, and the\n        event will be run twice before the crash. The first time is due to the position\n        change of the body element, which is also when a MSHTML!CFlatMarkupPointer::`vftable'\n        object is created during a \"SelectAll\" command, and this object will be used later\n        on for the crash. The second onmove event seems to be triggered by a InsertButton\n        (or Insert-whatever) command, which is also responsible for the free of object\n        CFlatMarkupPointer during page rendering. The EnsureRecalcNotify() function will\n        then still return an invalid reference to CFlatMarkupPointer (stored in EBX), and\n        then passes this on to the next functions (GetLineInfo -> QIClassID).  When this\n        reference arrives in function QIClassID, an access violation finally occurs when\n        the function is trying to call QueryInterface() with the bad reference, and this\n        results a crash. Successful control of the freed memory may leverage arbitrary code\n        execution under the context of the user.\n\n        Note: It is also possible to see a different object being freed and used, doesn't\n        always have to be CFlatMarkupPointer.","rank":300,"fields":{"detailsSlug":"/modules/details/exploit/windows/browser/ms13_059_cflatmarkuppointer","documentationSlug":"/modules/documentation/exploit/windows/browser/ms13_059_cflatmarkuppointer","referencesSlug":"/modules/references/exploit/windows/browser/ms13_059_cflatmarkuppointer"},"documentation":null}},"pageContext":{"id":"0cfea2fb-7ca0-5d64-a7f1-ddc1f8ebc061"}}}