{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/windows/misc/commvault_cmd_exec","result":{"data":{"moduleMetadataJson":{"id":"89dc6073-a3a2-56ef-9aa7-1b2987332788","name":"Commvault Communications Service (cvd) Command Injection","fullname":"exploit/windows/misc/commvault_cmd_exec","description":"This module exploits a command injection vulnerability\n        discovered in Commvault Service v11 SP5 and earlier versions (tested in v11 SP5\n        and v10). The vulnerability exists in the cvd.exe service and allows an\n        attacker to execute arbitrary commands in the context of the service. By\n        default, the Commvault Communications service installs and runs as SYSTEM in\n        Windows and does not require authentication. This vulnerability was discovered\n        in the Windows version. The Linux version wasn't tested.","rank":400,"fields":{"detailsSlug":"/modules/details/exploit/windows/misc/commvault_cmd_exec","documentationSlug":"/modules/documentation/exploit/windows/misc/commvault_cmd_exec","referencesSlug":"/modules/references/exploit/windows/misc/commvault_cmd_exec"},"documentation":{"html":"<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>Commvault is a data protection and information management software; an enterprise-level data\nplatform that contains modules to back up, restore, archive, replicate, and search data.</p>\n<p>According to public documentation, the data is protected by installing agent software on the\nphysical or virtual hosts, which use the OS or application native APIs to protect data in a\nconsistent state. Production data is processed by the agent on client computers and backed\nup through a data manager (the MediaAgent) to disk, tape, or cloud storage. All data\nmanagement activity in the environment is tracked by a centralized server (called CommServe),\nand can be managed by administrators through a central user interface. End users can access\nprotected data using web browsers or mobile devices.</p>\n<p>One of the base services of Commvault is vulnerable to a remote command injection attack,\nspecifically the cvd service.</p>\n<p>Commvault v11 SP5 or prior are vulnerable to this vulnerability. The specific vulnerable\nversion I tested was 11.0.80.0.</p>\n<p>The version of the vulnerable DLL is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">    Image path: C:\\Program Files\\Commvault\\ContentStore\\Base\\CVDataPipe.dll\n    Image name: CVDataPipe.dll\n    Timestamp:        Wed Dec 21 11:59:21 2016 (585AC2F9)\n    CheckSum:         002ED404\n    ImageSize:        002F0000\n    File version:     11.80.50.60437\n    Product version:  11.0.0.0\n    File flags:       1 (Mask 3F) Debug\n    File OS:          40004 NT Win32\n    File type:        1.0 App\n    File date:        00000000.00000000\n    Translations:     0409.04b0\n    CompanyName:      Commvault\n    ProductName:      Commvault\n    InternalName:     CVDataPipe\n    OriginalFilename: CVDataPipe.dll\n    ProductVersion:   11.0.0.0\n    FileVersion:      11.80.50.60437\n    PrivateBuild:     \n    SpecialBuild:     \n    FileDescription:  \n    LegalCopyright:   Copyright (c) 2000-2016\n    LegalTrademarks:\n    Comments:</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"root-cause-analysis\" style=\"position:relative;\"><a href=\"#root-cause-analysis\" aria-label=\"root cause analysis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Cause Analysis</h3>\n<p>Usually, there are two ways to execute a command in a C/C++ application, one of them is <code class=\"language-text\">WinExec()</code>,\nand the other one is <code class=\"language-text\">CreateProcess()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">BOOL WINAPI CreateProcess(\n  _In_opt_    LPCTSTR               lpApplicationName,\n  _Inout_opt_ LPTSTR                lpCommandLine,\n  _In_opt_    LPSECURITY_ATTRIBUTES lpProcessAttributes,\n  _In_opt_    LPSECURITY_ATTRIBUTES lpThreadAttributes,\n  _In_        BOOL                  bInheritHandles,\n  _In_        DWORD                 dwCreationFlags,\n  _In_opt_    LPVOID                lpEnvironment,\n  _In_opt_    LPCTSTR               lpCurrentDirectory,\n  _In_        LPSTARTUPINFO         lpStartupInfo,\n  _Out_       LPPROCESS_INFORMATION lpProcessInformation\n);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Since <code class=\"language-text\">CreateProcess()</code> is meant to replace <code class=\"language-text\">WinExec()</code> according to Microsoft, we can create a\nbreakpoint there first in our debugger (WinDBG), and we hit it:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">0:044&gt; g\nBreakpoint 3 hit\nkernel32!CreateProcessA:\n00000000`76fe8730 4c8bdc          mov     r11,rsp</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Looking at the callstack of this <code class=\"language-text\">kernel32!CreateProcessA</code>, we already have a pretty good idea\nlocating the vulnerability:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">0:044&gt; k\nChild-SP          RetAddr           Call Site\n00000000`11a36b78 000007fe`f378a40f kernel32!CreateProcessA\n00000000`11a36b80 000007fe`f377714e CVDataPipe!execCmd+0x7af\n00000000`11a3f340 000007fe`f3777a69 CVDataPipe!CVDMessageHandler+0x78e\n00000000`11a3fbd0 000007fe`f9cdc58d CVDataPipe!CVDMessageHandler+0x10a9\n00000000`11a3fd40 000007fe`f9cdc1b1 CvBasicLib!CvThreadPool::th_defaultWorkerObj+0x3cd\n00000000`11a3fe40 000007fe`f9cd2073 CvBasicLib!CvThreadPool::th_defaultWorker+0x51\n00000000`11a3fe90 000007fe`f9a84f7f CvBasicLib!CvThread::~CvThread+0x63\n00000000`11a3fee0 000007fe`f9a85126 MSVCR120!_callthreadstartex+0x17 [f:\\dd\\vctools\\crt\\crtw32\\startup\\threadex.c @ 376]\n00000000`11a3ff10 00000000`76f6f56d MSVCR120!_threadstartex+0x102 [f:\\dd\\vctools\\crt\\crtw32\\startup\\threadex.c @ 354]\n00000000`11a3ff40 00000000`770a3281 kernel32!BaseThreadInitThunk+0xd\n00000000`11a3ff70 00000000`00000000 ntdll!RtlUserThreadStart+0x1d</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>There are two things that are interesting. One of them is <code class=\"language-text\">CVDataPipe!CVDMessageHandler</code>, and the\nother one is <code class=\"language-text\">CVDataPipe!execCmd</code>.</p>\n<p><code class=\"language-text\">CVDataPipe!CVDMessageHandler</code> is basically a function that handles our packet's message type.\nThe Metasploit exploit specifically sends a code of <code class=\"language-text\">9h</code>, which is the message type for <code class=\"language-text\">execCmd</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">.text:0000000180147103 loc_180147103:                          ; CODE XREF: CVDMessageHandler(int,selectStruct_t *,CQiSocket,void *):loc_180146D78\u0018j\n.text:0000000180147103                 lea     rax, [rsp+888h+var_220] ; jumptable 0000000180146D78 case 9\n.text:000000018014710B                 mov     [rsp+888h+var_600], rax\n.text:0000000180147113                 mov     rdx, [rsp+888h+sock]\n.text:000000018014711B                 mov     rcx, [rsp+888h+var_600]\n.text:0000000180147123                 call    cs:??0CQiSocket@@QEAA@AEBV0@@Z ; CQiSocket::CQiSocket(CQiSocket const &amp;)\n.text:0000000180147129                 mov     [rsp+888h+var_5F0], rax\n.text:0000000180147131                 mov     r8, [rsp+888h+arg_18]\n.text:0000000180147139                 mov     rdx, [rsp+888h+var_5F0]\n.text:0000000180147141                 mov     rcx, [rsp+888h+structSelect]\n.text:0000000180147149                 call    ?execCmd@@YAXPEAUselectStruct_t@@VCQiSocket@@PEAX@Z ; execCmd(selectStruct_t *,CQiSocket,void *)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If we take a closer look at the <code class=\"language-text\">execCmd</code> function, we can tell the purpose of it is for processes such as:</p>\n<ul>\n<li>ifind (For restoring purposes)</li>\n<li>BackupShadow.exe (For archiving)</li>\n<li>Pub (Map file)</li>\n<li>createIndex (A Commvault process for building index)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">.text:0000000180159F1B loc_180159F1B:                          ; CODE XREF: execCmd(selectStruct_t *,CQiSocket,void *)+261\u0018j\n.text:0000000180159F1B                                         ; DATA XREF: .rdata:0000000180286258\u0019o\n.text:0000000180159F1B                 lea     rdx, aIfind     ; &quot;ifind&quot;\n.text:0000000180159F22                 lea     rcx, [rsp+87B8h+ApplicationName] ; Str\n.text:0000000180159F2A                 call    cs:strstr\n.text:0000000180159F30                 test    rax, rax\n.text:0000000180159F33                 jnz     short loc_180159F6D\n.text:0000000180159F35                 lea     rdx, aBackupshadow_e ; &quot;BackupShadow.exe&quot;\n.text:0000000180159F3C                 lea     rcx, [rsp+87B8h+ApplicationName] ; Str\n.text:0000000180159F44                 call    cs:strstr\n.text:0000000180159F4A                 test    rax, rax\n.text:0000000180159F4D                 jnz     short loc_180159F6D\n.text:0000000180159F4F                 lea     rdx, aPub       ; &quot;Pub&quot;\n.text:0000000180159F56                 lea     rcx, [rsp+87B8h+ApplicationName] ; Str\n.text:0000000180159F5E                 call    cs:strstr\n...\n.text:000000018015A0BA loc_18015A0BA:                          ; CODE XREF: execCmd(selectStruct_t *,CQiSocket,void *)+307\u0018j\n.text:000000018015A0BA                 lea     rdx, aCreateindex ; &quot;createIndex&quot;\n.text:000000018015A0C1                 lea     rcx, [rsp+87B8h+ApplicationName] ; Str\n.text:000000018015A0C9                 call    cs:strstr\n.text:000000018015A0CF                 test    rax, rax\n.text:000000018015A0D2                 jz      loc_18015A220</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>However, if you don't call one of these processes, the <code class=\"language-text\">execCmd</code> will assume you want to run your\ncustom process, and pass it to <code class=\"language-text\">CreateProcess</code> anyway:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">.text:000000018015A361 loc_18015A361:                          ; CODE XREF: execCmd(selectStruct_t *,CQiSocket,void *)+675\u0018j\n.text:000000018015A361                 call    cs:GetEnvironmentStrings\n.text:000000018015A367                 mov     [rsp+87B8h+var_86A8], rax\n.text:000000018015A36F                 lea     rax, [rsp+87B8h+StartupInfo]\n.text:000000018015A377                 mov     rdi, rax\n.text:000000018015A37A                 xor     eax, eax\n.text:000000018015A37C                 mov     ecx, 68h\n.text:000000018015A381                 rep stosb\n.text:000000018015A383                 mov     [rsp+87B8h+StartupInfo.cb], 68h\n.text:000000018015A38E                 lea     rax, [rsp+87B8h+ProcessInformation]\n.text:000000018015A396                 mov     rdi, rax\n.text:000000018015A399                 xor     eax, eax\n.text:000000018015A39B                 mov     ecx, 18h\n.text:000000018015A3A0                 rep stosb\n.text:000000018015A3A2                 mov     [rsp+87B8h+StartupInfo.dwFlags], 1\n.text:000000018015A3AD                 xor     eax, eax\n.text:000000018015A3AF                 mov     [rsp+87B8h+StartupInfo.wShowWindow], ax\n.text:000000018015A3B7                 lea     rax, [rsp+87B8h+ProcessInformation]\n.text:000000018015A3BF                 mov     [rsp+87B8h+lpProcessInformation], rax ; lpProcessInformation\n.text:000000018015A3C4                 lea     rax, [rsp+87B8h+StartupInfo]\n.text:000000018015A3CC                 mov     [rsp+87B8h+lpStartupInfo], rax ; lpStartupInfo\n.text:000000018015A3D1                 mov     [rsp+87B8h+lpCurrentDirectory], 0 ; lpCurrentDirectory\n.text:000000018015A3DA                 mov     [rsp+87B8h+lpEnvironment], 0 ; lpEnvironment\n.text:000000018015A3E3                 mov     [rsp+87B8h+dwCreationFlags], 10h ; dwCreationFlags\n.text:000000018015A3EB                 mov     [rsp+87B8h+bInheritHandles], 0 ; bInheritHandles\n.text:000000018015A3F3                 xor     r9d, r9d        ; lpThreadAttributes\n.text:000000018015A3F6                 xor     r8d, r8d        ; lpProcessAttributes\n.text:000000018015A3F9                 lea     rdx, [rsp+87B8h+CommandLine] ; lpCommandLine\n.text:000000018015A401                 lea     rcx, [rsp+87B8h+ApplicationName] ; lpApplicationName\n.text:000000018015A409                 call    cs:CreateProcessA</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>It is unclear whether allowing an arbitrary custom process is intentional or not, it is unsafe\nanyway considering the cvd process binds to 0.0.0.0, so anybody can gain access to it under the\ncontext of SYSTEM.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<ol>\n<li>Start msfconsole</li>\n<li><code class=\"language-text\">use exploit/windows/misc/commvault_cmd_exec</code></li>\n<li><code class=\"language-text\">set RHOST [ip]</code></li>\n<li><code class=\"language-text\">exploit</code></li>\n<li>shellz :)</li>\n</ol>"}}},"pageContext":{"id":"89dc6073-a3a2-56ef-9aa7-1b2987332788"}}}