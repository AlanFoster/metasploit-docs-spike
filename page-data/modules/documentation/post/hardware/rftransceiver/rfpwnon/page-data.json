{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/post/hardware/rftransceiver/rfpwnon","result":{"data":{"moduleMetadataJson":{"id":"2025ba12-ab2e-51d3-a3c7-f289b750e3c3","name":"Brute Force AM/OOK (ie: Garage Doors)","fullname":"post/hardware/rftransceiver/rfpwnon","description":"Post Module for HWBridge RFTranscievers.  Brute forces AM OOK or raw\n                               binary signals.  This is a port of the rfpwnon tool by Corey Harding.\n                               (https://github.com/exploitagency/github-rfpwnon/blob/master/rfpwnon.py)","rank":300,"fields":{"detailsSlug":"/modules/details/post/hardware/rftransceiver/rfpwnon","documentationSlug":"/modules/documentation/post/hardware/rftransceiver/rfpwnon"},"documentation":{"html":"<p>Port of a brute force utility by Corey Harding of LegacySecurityGroup.com, the original can be found\n<a href=\"https://github.com/exploitagency/github-rfpwnon/blob/master/rfpwnon.py\">here</a>.\nIt's a generic AM/OOK brute forcer with PWM translations.  It has been\ndemonstrated to work against static key garage door openers.</p>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p>  <strong>FREQ</strong></p>\n<p>  Frequency to brute force.</p>\n<p>  <strong>BAUD</strong></p>\n<p>  Baud rate.  Default: 2000</p>\n<p>  <strong>BINLENGTH</strong></p>\n<p>  Binary bit-length for bruteforcing.  Default: 8</p>\n<p>  <strong>REPEAT</strong></p>\n<p>  How many times to repeat the sending of the packet.  Default: 5</p>\n<p>  <strong>PPAD</strong></p>\n<p>  Binary data to append to packet.  (Example: \"0101\")  Default: None</p>\n<p>  <strong>TPAD</strong></p>\n<p>  Binary data to add to end of packet.  (Example: \"0101\")  Default: None</p>\n<p>  <strong>RAW</strong></p>\n<p>  Do not do PWM encoding on packet.  Default: False</p>\n<p>  <strong>TRI</strong></p>\n<p>  Use trinary signals.  Default: False</p>\n<p>  <strong>EXTRAVERBOSE</strong></p>\n<p>  Adds some extra status messages.</p>\n<p>  <strong>INDEX</strong></p>\n<p>  USB Index number.  Default: 0</p>\n<p>  <strong>DELAY</strong></p>\n<p>  How many milliseconds to delay before transmission.  Too fast tends to lock up the device.  Default: 500 (0.5 seconds)</p>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<p>  Run a brute force of 6 characters long with 2 repeats:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">hwbridge &gt; run post/hardware/rftransceiver/rfpwnon FREQ=915000000 BINLEGTH=6 REPEAT=2\n\n[*] Generating de bruijn sequence...\n[*] Brute forcing frequency: 915000000\n[*] Transmitting...\n[*] Binary before PWM encoding:\n[*] 00000000\n[*] Binary after PWM encoding:\n[*] 11101110111011101110111011101110\n[*] Transmitting...\n[*] Binary before PWM encoding:\n[*] 00000000\n[*] Binary after PWM encoding:\n[*] 11101110111011101110111011101110\n[*] Transmitting...\n[*] Binary before PWM encoding:\n[*] 00000001\n[*] Binary after PWM encoding:\n[*] 11101110111011101110111011101000\n[*] Transmitting...\n[*] Binary before PWM encoding:\n[*] 00000001\n[*] Binary after PWM encoding:\n[*] 11101110111011101110111011101000\n[*] Transmitting...\n[*] Binary before PWM encoding:\n[*] 00000010\n[*] Binary after PWM encoding:\n[*] 11101110111011101110111010001110\n[*] Transmitting...\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"2025ba12-ab2e-51d3-a3c7-f289b750e3c3"}}}