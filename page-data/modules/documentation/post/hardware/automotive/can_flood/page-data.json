{"componentChunkName":"component---src-templates-module-documentation-template-tsx","path":"/modules/documentation/post/hardware/automotive/can_flood","result":{"data":{"moduleMetadataJson":{"id":"51562e3c-ba7a-5684-acd3-ffa1879e4f20","name":"CAN Flood","fullname":"post/hardware/automotive/can_flood","description":"This module floods a CAN interface with supplied frames.","rank":300,"fields":{"detailsSlug":"/modules/details/post/hardware/automotive/can_flood","documentationSlug":"/modules/documentation/post/hardware/automotive/can_flood"},"documentation":{"html":"<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>CAN Flood is a post-exploitation module that floods a CAN interface for a number of rounds. Both the interface and the number of rounds are to be provided as inputs. An example list of frames also is part of the inputs, and sources the flooding at each round. The module therefore is general as it is parametric in the frame list.</p>\n<h2 id=\"verification-steps\" style=\"position:relative;\"><a href=\"#verification-steps\" aria-label=\"verification steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verification Steps</h2>\n<p>First, start up a virtual CAN bus:</p>\n<ol>\n<li><code class=\"language-text\">sudo modprobe can</code></li>\n<li><code class=\"language-text\">sudo modprobe vcan</code></li>\n<li><code class=\"language-text\">sudo ip link add dev vcan0 type vcan</code></li>\n<li><code class=\"language-text\">sudo ip link set up vcan0</code></li>\n</ol>\n<p>Then do the thing:</p>\n<ol start=\"5\">\n<li>Start <code class=\"language-text\">msfconsole</code></li>\n<li><code class=\"language-text\">use auxiliary/server/local_hwbridge</code></li>\n<li><code class=\"language-text\">set uripath trycanbus</code></li>\n<li><code class=\"language-text\">run</code></li>\n<li><code class=\"language-text\">use auxiliary/client/hwbridge/connect</code></li>\n<li><code class=\"language-text\">set targeturi trycanbus</code></li>\n<li><code class=\"language-text\">run</code></li>\n<li><code class=\"language-text\">use post/hardware/automotive/can_flood</code></li>\n<li><code class=\"language-text\">set canbus vcan0</code></li>\n<li><code class=\"language-text\">set session 1</code></li>\n<li><code class=\"language-text\">run</code></li>\n</ol>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p><strong>CANBUS</strong>\nDetermines which CAN interface to use.</p>\n<p><strong>FRAMELIST</strong>\nPath of the file that contains the list of frames. Default is \"/usr/share/metasploit-framework/data/wordlists/can<em>flood</em>frames.txt\".</p>\n<p><strong>ROUNDS</strong>\nNumber of executed rounds. Default is 200.</p>\n<p><strong>SESSION</strong>\nThe session to run this module on.</p>\n<h2 id=\"scenarios\" style=\"position:relative;\"><a href=\"#scenarios\" aria-label=\"scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenarios</h2>\n<p>The user must know a list of frames that generate an effect on the car. This is because the module is general as it is parametric in the frame list.\nYou can test the module by setting a virtual CAN interface and then execute the commands, thus obtaining the underlying output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">msf5 &gt; use auxiliary/server/local_hwbridge\nmsf5 auxiliary(server/local_hwbridge) &gt; run\n[*] Auxiliary module running as background job 0.\n\n[*] Using URL: http://0.0.0.0:8080/trycanbus\n[*] Local IP: http://10.0.2.15:8080/trycanbus\n[*] Server started.\nmsf5 auxiliary(server/local_hwbridge) &gt; use auxiliary/client/hwbridge/connect\nmsf5 auxiliary(client/hwbridge/connect) &gt; set targeturi trycanbus\ntargeturi =&gt; trycanbus\nmsf5 auxiliary(client/hwbridge/connect) &gt; run\n\n[*] Attempting to connect to 127.0.0.1...\n[*] Hardware bridge interface session 1 opened (127.0.0.1 -&gt; 127.0.0.1) at 2019-03-20 03:17:55 -0400\n[+] HWBridge session established\n[*] HW Specialty: {&quot;automotive&quot;=&gt;true}  Capabilities: {&quot;can&quot;=&gt;true, &quot;custom_methods&quot;=&gt;true}\n[!] NOTICE:  You are about to leave the matrix.  All actions performed on this hardware bridge\n[!]          could have real world consequences.  Use this module in a controlled testing\n[!]          environment and with equipment you are authorized to perform testing on.\n[*] Auxiliary module execution completed\nmsf5 auxiliary(client/hwbridge/connect) &gt; use post/hardware/automotive/can_flood \nmsf5 post(hardware/automotive/can_flood) &gt; set canbus vcan0\ncanbus =&gt; vcan0\nmsf5 post(hardware/automotive/can_flood) &gt; set session 1\nsession =&gt; 1\nmsf5 post(hardware/automotive/can_flood) &gt; run\n\n[*]  -- FLOODING -- \n[*] Post module execution completed</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}}},"pageContext":{"id":"51562e3c-ba7a-5684-acd3-ffa1879e4f20"}}}