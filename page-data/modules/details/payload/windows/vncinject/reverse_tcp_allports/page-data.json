{"componentChunkName":"component---src-templates-module-details-template-tsx","path":"/modules/details/payload/windows/vncinject/reverse_tcp_allports","result":{"data":{"moduleMetadataJson":{"id":"0a9fd387-1542-5317-bcfe-a5519452e482","name":"VNC Server (Reflective Injection), Reverse All-Port TCP Stager","fullname":"payload/windows/vncinject/reverse_tcp_allports","description":"Inject a VNC Dll via a reflective loader (staged). Try to connect back to the attacker, on all possible ports (1-65535, slowly)","rank":300,"fields":{"detailsSlug":"/modules/details/payload/windows/vncinject/reverse_tcp_allports","documentationSlug":"/modules/documentation/payload/windows/vncinject/reverse_tcp_allports","referencesSlug":"/modules/references/payload/windows/vncinject/reverse_tcp_allports"},"author":["sf <stephen_fewer@harmonysecurity.com>","hdm <x@hdm.io>","skape <mmiller@hick.org>"],"notes":{"SideEffects":null,"Reliability":null,"Stability":null},"options":[{"advanced":true,"evasion":false,"name":"WORKSPACE","required":false,"default":"","description":"Specify the workspace for this module"},{"advanced":true,"evasion":false,"name":"VERBOSE","required":false,"default":"false","description":"Enable detailed status messages"},{"advanced":false,"evasion":false,"name":"LHOST","required":true,"default":"","description":"The listen address (an interface may be specified)"},{"advanced":false,"evasion":false,"name":"LPORT","required":true,"default":"1","description":"The starting port number to connect back on"},{"advanced":true,"evasion":false,"name":"ReverseListenerBindPort","required":false,"default":"","description":"The port to bind to on the local system if different from LPORT"},{"advanced":true,"evasion":false,"name":"ReverseAllowProxy","required":true,"default":"false","description":"Allow reverse tcp even with Proxies specified. Connect back will NOT go through proxy but directly to LHOST"},{"advanced":true,"evasion":false,"name":"ReverseListenerComm","required":false,"default":"","description":"The specific communication channel to use for this listener"},{"advanced":true,"evasion":false,"name":"ReverseListenerBindAddress","required":false,"default":"","description":"The specific IP address to bind to on the local system"},{"advanced":true,"evasion":false,"name":"ReverseListenerThreaded","required":true,"default":"false","description":"Handle every connection in a new thread (experimental)"},{"advanced":true,"evasion":false,"name":"StagerRetryCount","required":false,"default":"10","description":"The number of times the stager should retry if the first connect fails"},{"advanced":true,"evasion":false,"name":"StagerRetryWait","required":false,"default":"5","description":"Number of seconds to wait for the stager between reconnect attempts"},{"advanced":true,"evasion":false,"name":"PingbackRetries","required":true,"default":"0","description":"How many additional successful pingbacks"},{"advanced":true,"evasion":false,"name":"PingbackSleep","required":true,"default":"30","description":"Time (in seconds) to sleep between pingbacks"},{"advanced":true,"evasion":false,"name":"PayloadUUIDSeed","required":false,"default":"","description":"A string to use when generating the payload UUID (deterministic)"},{"advanced":true,"evasion":false,"name":"PayloadUUIDRaw","required":false,"default":"","description":"A hex string representing the raw 8-byte PUID value for the UUID"},{"advanced":true,"evasion":false,"name":"PayloadUUIDName","required":false,"default":"","description":"A human-friendly name to reference this unique payload (requires tracking)"},{"advanced":true,"evasion":false,"name":"PayloadUUIDTracking","required":true,"default":"false","description":"Whether or not to automatically register generated UUIDs"},{"advanced":true,"evasion":false,"name":"EnableStageEncoding","required":false,"default":"false","description":"Encode the second stage payload"},{"advanced":true,"evasion":false,"name":"StageEncoder","required":false,"default":"","description":"Encoder to use if EnableStageEncoding is set"},{"advanced":true,"evasion":false,"name":"StageEncoderSaveRegisters","required":false,"default":"","description":"Additional registers to preserve in the staged payload if EnableStageEncoding is set"},{"advanced":true,"evasion":false,"name":"StageEncodingFallback","required":false,"default":"true","description":"Fallback to no encoding if the selected StageEncoder is not compatible"},{"advanced":true,"evasion":false,"name":"PrependMigrate","required":true,"default":"false","description":"Spawns and runs shellcode in new process"},{"advanced":true,"evasion":false,"name":"PrependMigrateProc","required":false,"default":"","description":"Process to spawn and run shellcode in"},{"advanced":false,"evasion":false,"name":"EXITFUNC","required":true,"default":"process","description":"Exit technique (Accepted: '', seh, thread, process, none)"},{"advanced":false,"evasion":false,"name":"VNCPORT","required":true,"default":"5900","description":"The local port to use for the VNC proxy"},{"advanced":false,"evasion":false,"name":"VNCHOST","required":true,"default":"127.0.0.1","description":"The local host to use for the VNC proxy"},{"advanced":false,"evasion":false,"name":"DisableCourtesyShell","required":false,"default":"true","description":"Disables the Metasploit Courtesy shell"},{"advanced":false,"evasion":false,"name":"ViewOnly","required":false,"default":"true","description":"Runs the viewer in view mode"},{"advanced":false,"evasion":false,"name":"AUTOVNC","required":true,"default":"true","description":"Automatically launch VNC viewer if present"},{"advanced":true,"evasion":false,"name":"DisableSessionTracking","required":false,"default":"false","description":"Disables the VNC payload from following the active session as users log in an out of the input desktop"}]}},"pageContext":{"id":"0a9fd387-1542-5317-bcfe-a5519452e482"}}}