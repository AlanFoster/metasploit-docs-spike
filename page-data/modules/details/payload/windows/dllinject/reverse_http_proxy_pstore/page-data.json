{"componentChunkName":"component---src-templates-module-details-template-tsx","path":"/modules/details/payload/windows/dllinject/reverse_http_proxy_pstore","result":{"data":{"moduleMetadataJson":{"id":"b5529e88-fde0-5931-810c-a048aa5e0b35","name":"Reflective DLL Injection, Reverse HTTP Stager Proxy","fullname":"payload/windows/dllinject/reverse_http_proxy_pstore","description":"Inject a DLL via a reflective loader. Tunnel communication over HTTP","rank":300,"fields":{"detailsSlug":"/modules/details/payload/windows/dllinject/reverse_http_proxy_pstore","documentationSlug":"/modules/documentation/payload/windows/dllinject/reverse_http_proxy_pstore","referencesSlug":"/modules/references/payload/windows/dllinject/reverse_http_proxy_pstore"},"author":["sf <stephen_fewer@harmonysecurity.com>","hdm <x@hdm.io>"],"notes":{"SideEffects":null,"Reliability":null,"Stability":null},"options":[{"advanced":true,"evasion":false,"name":"WORKSPACE","required":false,"default":"","description":"Specify the workspace for this module"},{"advanced":true,"evasion":false,"name":"VERBOSE","required":false,"default":"false","description":"Enable detailed status messages"},{"advanced":false,"evasion":false,"name":"LHOST","required":true,"default":"","description":"The local listener hostname"},{"advanced":false,"evasion":false,"name":"LPORT","required":true,"default":"8080","description":"The local listener port"},{"advanced":true,"evasion":false,"name":"ReverseListenerBindPort","required":false,"default":"","description":"The port to bind to on the local system if different from LPORT"},{"advanced":true,"evasion":false,"name":"ReverseAllowProxy","required":true,"default":"false","description":"Allow reverse tcp even with Proxies specified. Connect back will NOT go through proxy but directly to LHOST"},{"advanced":true,"evasion":false,"name":"PingbackRetries","required":true,"default":"0","description":"How many additional successful pingbacks"},{"advanced":true,"evasion":false,"name":"PingbackSleep","required":true,"default":"30","description":"Time (in seconds) to sleep between pingbacks"},{"advanced":false,"evasion":false,"name":"LURI","required":false,"default":"","description":"The HTTP Path"},{"advanced":true,"evasion":false,"name":"ReverseListenerBindAddress","required":false,"default":"","description":"The specific IP address to bind to on the local system"},{"advanced":true,"evasion":false,"name":"OverrideRequestHost","required":true,"default":"false","description":"Forces a specific host and port instead of using what the client requests, defaults to LHOST:LPORT"},{"advanced":true,"evasion":false,"name":"OverrideLHOST","required":false,"default":"","description":"When OverrideRequestHost is set, use this value as the host name for secondary requests"},{"advanced":true,"evasion":false,"name":"OverrideLPORT","required":false,"default":"","description":"When OverrideRequestHost is set, use this value as the port number for secondary requests"},{"advanced":true,"evasion":false,"name":"OverrideScheme","required":false,"default":"","description":"When OverrideRequestHost is set, use this value as the scheme for secondary requests, e.g http or https"},{"advanced":true,"evasion":false,"name":"HttpUserAgent","required":false,"default":"Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko","description":"The user-agent that the payload should use for communication Max parameter length: 255 characters"},{"advanced":true,"evasion":false,"name":"HttpServerName","required":false,"default":"Apache","description":"The server header that the handler will send in response to requests"},{"advanced":true,"evasion":false,"name":"HttpUnknownRequestResponse","required":false,"default":"<html><body><h1>It works!</h1></body></html>","description":"The returned HTML response body when the handler receives a request that is not from a payload"},{"advanced":true,"evasion":false,"name":"IgnoreUnknownPayloads","required":true,"default":"false","description":"Whether to drop connections from payloads using unknown UUIDs"},{"advanced":true,"evasion":false,"name":"PayloadUUIDSeed","required":false,"default":"","description":"A string to use when generating the payload UUID (deterministic)"},{"advanced":true,"evasion":false,"name":"PayloadUUIDRaw","required":false,"default":"","description":"A hex string representing the raw 8-byte PUID value for the UUID"},{"advanced":true,"evasion":false,"name":"PayloadUUIDName","required":false,"default":"","description":"A human-friendly name to reference this unique payload (requires tracking)"},{"advanced":true,"evasion":false,"name":"PayloadUUIDTracking","required":true,"default":"false","description":"Whether or not to automatically register generated UUIDs"},{"advanced":true,"evasion":false,"name":"EnableStageEncoding","required":false,"default":"false","description":"Encode the second stage payload"},{"advanced":true,"evasion":false,"name":"StageEncoder","required":false,"default":"","description":"Encoder to use if EnableStageEncoding is set"},{"advanced":true,"evasion":false,"name":"StageEncoderSaveRegisters","required":false,"default":"","description":"Additional registers to preserve in the staged payload if EnableStageEncoding is set"},{"advanced":true,"evasion":false,"name":"StageEncodingFallback","required":false,"default":"true","description":"Fallback to no encoding if the selected StageEncoder is not compatible"},{"advanced":true,"evasion":false,"name":"PrependMigrate","required":true,"default":"false","description":"Spawns and runs shellcode in new process"},{"advanced":true,"evasion":false,"name":"PrependMigrateProc","required":false,"default":"","description":"Process to spawn and run shellcode in"},{"advanced":false,"evasion":false,"name":"EXITFUNC","required":true,"default":"process","description":"Exit technique (Accepted: '', seh, thread, process, none)"},{"advanced":false,"evasion":false,"name":"DLL","required":true,"default":"","description":"The local path to the Reflective DLL to upload"}]}},"pageContext":{"id":"b5529e88-fde0-5931-810c-a048aa5e0b35"}}}