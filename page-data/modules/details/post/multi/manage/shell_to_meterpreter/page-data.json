{"componentChunkName":"component---src-templates-module-details-template-tsx","path":"/modules/details/post/multi/manage/shell_to_meterpreter","result":{"data":{"moduleMetadataJson":{"id":"b52c9b57-9879-52f6-8b7f-6dd70a9c814e","name":"Shell to Meterpreter Upgrade","fullname":"post/multi/manage/shell_to_meterpreter","description":"This module attempts to upgrade a command shell to meterpreter. The shell\n          platform is automatically detected and the best version of meterpreter for\n          the target is selected. Currently meterpreter/reverse_tcp is used on Windows\n          and Linux, with 'python/meterpreter/reverse_tcp' used on all others.","rank":300,"fields":{"detailsSlug":"/modules/details/post/multi/manage/shell_to_meterpreter","documentationSlug":"/modules/documentation/post/multi/manage/shell_to_meterpreter","referencesSlug":"/modules/references/post/multi/manage/shell_to_meterpreter"},"author":["Tom Sellers <tom@fadedcode.net>"],"notes":{"SideEffects":null,"Reliability":null,"Stability":null},"options":[{"advanced":true,"evasion":false,"name":"WORKSPACE","required":false,"default":"","description":"Specify the workspace for this module"},{"advanced":true,"evasion":false,"name":"VERBOSE","required":false,"default":"false","description":"Enable detailed status messages"},{"advanced":false,"evasion":false,"name":"SESSION","required":true,"default":"","description":"The session to run this module on."},{"advanced":true,"evasion":false,"name":"Powershell::persist","required":true,"default":"false","description":"Run the payload in a loop"},{"advanced":true,"evasion":false,"name":"Powershell::prepend_sleep","required":false,"default":"","description":"Prepend seconds of sleep"},{"advanced":true,"evasion":false,"name":"Powershell::prepend_protections_bypass","required":true,"default":"false","description":"Prepend AMSI/SBL bypass"},{"advanced":true,"evasion":false,"name":"Powershell::strip_comments","required":true,"default":"true","description":"Strip comments"},{"advanced":true,"evasion":false,"name":"Powershell::strip_whitespace","required":true,"default":"false","description":"Strip whitespace"},{"advanced":true,"evasion":false,"name":"Powershell::sub_vars","required":true,"default":"false","description":"Substitute variable names"},{"advanced":true,"evasion":false,"name":"Powershell::sub_funcs","required":true,"default":"false","description":"Substitute function names"},{"advanced":true,"evasion":false,"name":"Powershell::exec_in_place","required":true,"default":"false","description":"Produce PSH without executable wrapper"},{"advanced":true,"evasion":false,"name":"Powershell::exec_rc4","required":true,"default":"false","description":"Encrypt PSH with RC4"},{"advanced":true,"evasion":false,"name":"Powershell::remove_comspec","required":true,"default":"false","description":"Produce script calling powershell directly"},{"advanced":true,"evasion":false,"name":"Powershell::noninteractive","required":true,"default":"true","description":"Execute powershell without interaction"},{"advanced":true,"evasion":false,"name":"Powershell::encode_final_payload","required":true,"default":"false","description":"Encode final payload for -EncodedCommand"},{"advanced":true,"evasion":false,"name":"Powershell::encode_inner_payload","required":true,"default":"false","description":"Encode inner payload for -EncodedCommand"},{"advanced":true,"evasion":false,"name":"Powershell::wrap_double_quotes","required":true,"default":"true","description":"Wraps the -Command argument in single quotes"},{"advanced":true,"evasion":false,"name":"Powershell::no_equals","required":true,"default":"false","description":"Pad base64 until no \"=\" remains"},{"advanced":true,"evasion":false,"name":"Powershell::method","required":true,"default":"reflection","description":"Payload delivery method (Accepted: net, reflection, old, msil)"},{"advanced":true,"evasion":false,"name":"Powershell::Post::timeout","required":true,"default":"15","description":"Powershell execution timeout, set < 0 to run async without termination"},{"advanced":true,"evasion":false,"name":"Powershell::Post::log_output","required":true,"default":"false","description":"Write output to log file"},{"advanced":true,"evasion":false,"name":"Powershell::Post::dry_run","required":true,"default":"false","description":"Return encoded output to caller"},{"advanced":true,"evasion":false,"name":"Powershell::Post::force_wow64","required":true,"default":"false","description":"Force WOW64 execution"},{"advanced":false,"evasion":false,"name":"LHOST","required":false,"default":"","description":"IP of host that will receive the connection from the payload (Will try to auto detect)."},{"advanced":false,"evasion":false,"name":"LPORT","required":true,"default":"4433","description":"Port for payload to connect to."},{"advanced":false,"evasion":false,"name":"HANDLER","required":true,"default":"true","description":"Start an exploit/multi/handler to receive the connection"},{"advanced":true,"evasion":false,"name":"HANDLE_TIMEOUT","required":true,"default":"30","description":"How long to wait (in seconds) for the session to come back."},{"advanced":true,"evasion":false,"name":"WIN_TRANSFER","required":true,"default":"POWERSHELL","description":"Which method to try first to transfer files on a Windows target. (Accepted: POWERSHELL, VBS)"},{"advanced":true,"evasion":false,"name":"PAYLOAD_OVERRIDE","required":false,"default":"","description":"Define the payload to use (meterpreter/reverse_tcp by default) ."},{"advanced":true,"evasion":false,"name":"BOURNE_PATH","required":false,"default":"","description":"Remote path to drop binary"},{"advanced":true,"evasion":false,"name":"BOURNE_FILE","required":false,"default":"","description":"Remote filename to use for dropped binary"}]}},"pageContext":{"id":"b52c9b57-9879-52f6-8b7f-6dd70a9c814e"}}}