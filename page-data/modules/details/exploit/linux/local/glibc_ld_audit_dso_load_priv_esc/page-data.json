{"componentChunkName":"component---src-templates-module-details-template-tsx","path":"/modules/details/exploit/linux/local/glibc_ld_audit_dso_load_priv_esc","result":{"data":{"moduleMetadataJson":{"id":"969c47a7-fb0b-597f-8d31-1c716c95eb2c","name":"glibc LD_AUDIT Arbitrary DSO Load Privilege Escalation","fullname":"exploit/linux/local/glibc_ld_audit_dso_load_priv_esc","description":"This module attempts to gain root privileges on Linux systems by abusing\n        a vulnerability in the GNU C Library (glibc) dynamic linker.\n\n        glibc ld.so in versions before 2.11.3, and 2.12.x before 2.12.2 does not\n        properly restrict use of the LD_AUDIT environment variable when loading\n        setuid executables. This allows loading arbitrary shared objects from\n        the trusted library search path with the privileges of the suid user.\n\n        This module uses LD_AUDIT to load the libpcprofile.so shared object,\n        distributed with some versions of glibc, and leverages arbitrary file\n        creation functionality in the library constructor to write a root-owned\n        world-writable file to a system trusted search path (usually /lib).\n        The file is then overwritten with a shared object then loaded with\n        LD_AUDIT resulting in arbitrary code execution.\n\n        This module has been tested successfully on glibc version 2.11.1 on\n        Ubuntu 10.04 x86_64 and version 2.7 on Debian 5.0.4 i386.\n\n        RHEL 5 is reportedly affected, but untested. Some glibc distributions\n        do not contain the libpcprofile.so library required for successful\n        exploitation.","rank":600,"fields":{"detailsSlug":"/modules/details/exploit/linux/local/glibc_ld_audit_dso_load_priv_esc","documentationSlug":"/modules/documentation/exploit/linux/local/glibc_ld_audit_dso_load_priv_esc","referencesSlug":"/modules/references/exploit/linux/local/glibc_ld_audit_dso_load_priv_esc"},"author":["Tavis Ormandy","zx2c4","Marco Ivaldi","Todor Donev","bcoles <bcoles@gmail.com>"],"notes":{"SideEffects":null,"Reliability":null,"Stability":null},"options":[{"advanced":true,"evasion":false,"name":"WORKSPACE","required":false,"default":"","description":"Specify the workspace for this module"},{"advanced":true,"evasion":false,"name":"VERBOSE","required":false,"default":"false","description":"Enable detailed status messages"},{"advanced":true,"evasion":false,"name":"WfsDelay","required":false,"default":"0","description":"Additional delay when waiting for a session"},{"advanced":true,"evasion":false,"name":"EnableContextEncoding","required":false,"default":"false","description":"Use transient context when encoding payloads"},{"advanced":true,"evasion":false,"name":"ContextInformationFile","required":false,"default":"","description":"The information file that contains context information"},{"advanced":true,"evasion":false,"name":"DisablePayloadHandler","required":false,"default":"false","description":"Disable the handler code for the selected payload"},{"advanced":false,"evasion":false,"name":"SESSION","required":true,"default":"","description":"The session to run this module on."},{"advanced":true,"evasion":false,"name":"EXE::EICAR","required":false,"default":"false","description":"Generate an EICAR file instead of regular payload exe"},{"advanced":true,"evasion":false,"name":"EXE::Custom","required":false,"default":"","description":"Use custom exe instead of automatically generating a payload exe"},{"advanced":true,"evasion":false,"name":"EXE::Path","required":false,"default":"","description":"The directory in which to look for the executable template"},{"advanced":true,"evasion":false,"name":"EXE::Template","required":false,"default":"","description":"The executable template file name."},{"advanced":true,"evasion":false,"name":"EXE::Inject","required":false,"default":"false","description":"Set to preserve the original EXE function"},{"advanced":true,"evasion":false,"name":"EXE::OldMethod","required":false,"default":"false","description":"Set to use the substitution EXE generation method."},{"advanced":true,"evasion":false,"name":"EXE::FallBack","required":false,"default":"false","description":"Use the default template in case the specified one is missing"},{"advanced":true,"evasion":false,"name":"MSI::EICAR","required":false,"default":"false","description":"Generate an EICAR file instead of regular payload msi"},{"advanced":true,"evasion":false,"name":"MSI::Custom","required":false,"default":"","description":"Use custom msi instead of automatically generating a payload msi"},{"advanced":true,"evasion":false,"name":"MSI::Path","required":false,"default":"","description":"The directory in which to look for the msi template"},{"advanced":true,"evasion":false,"name":"MSI::Template","required":false,"default":"","description":"The msi template file name"},{"advanced":true,"evasion":false,"name":"MSI::UAC","required":false,"default":"false","description":"Create an MSI with a UAC prompt (elevation to SYSTEM if accepted)"},{"advanced":true,"evasion":false,"name":"FileDropperDelay","required":false,"default":"","description":"Delay in seconds before attempting cleanup"},{"advanced":false,"evasion":false,"name":"SUID_EXECUTABLE","required":true,"default":"/bin/ping","description":"Path to a SUID executable"},{"advanced":true,"evasion":false,"name":"WritableDir","required":true,"default":"/tmp","description":"A directory where we can write files"}]}},"pageContext":{"id":"969c47a7-fb0b-597f-8d31-1c716c95eb2c"}}}