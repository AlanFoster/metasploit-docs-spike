{"componentChunkName":"component---src-templates-module-details-template-tsx","path":"/modules/details/exploit/osx/browser/safari_file_policy","result":{"data":{"moduleMetadataJson":{"id":"9545acf6-cb99-59c7-a52f-368e5874b7f6","name":"Apple Safari file:// Arbitrary Code Execution","fullname":"exploit/osx/browser/safari_file_policy","description":"This module exploits a vulnerability found in Apple Safari on OS X platform.\n        A policy issue in the handling of file:// URLs may allow arbitrary remote code\n        execution under the context of the user.\n\n          In order to trigger arbitrary remote code execution, the best way seems to\n        be opening a share on the victim machine first (this can be SMB/WebDav/FTP, or\n        a file format that OS X might automount), and then execute it in /Volumes/[share].\n        If there's some kind of bug that leaks the victim machine's current username,\n        then it's also possible to execute the payload in /Users/[username]/Downloads/,\n        or else bruteforce your way to getting that information.\n\n          Please note that non-java payloads (*.sh extension) might get launched by\n        Xcode instead of executing it, in that case please try the Java ones instead.","rank":300,"fields":{"detailsSlug":"/modules/details/exploit/osx/browser/safari_file_policy","documentationSlug":"/modules/documentation/exploit/osx/browser/safari_file_policy"},"author":["Aaron Sigel","sinn3r <sinn3r@metasploit.com>"],"notes":{"SideEffects":null,"Reliability":null,"Stability":null},"options":[{"name":"WORKSPACE","required":false,"default":"","description":"Specify the workspace for this module"},{"name":"VERBOSE","required":false,"default":"false","description":"Enable detailed status messages"},{"name":"EnableContextEncoding","required":false,"default":"false","description":"Use transient context when encoding payloads"},{"name":"ContextInformationFile","required":false,"default":"","description":"The information file that contains context information"},{"name":"DisablePayloadHandler","required":false,"default":"false","description":"Disable the handler code for the selected payload"},{"name":"SRVHOST","required":true,"default":"0.0.0.0","description":"The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses."},{"name":"SRVPORT","required":true,"default":"21","description":"The local port to use for the FTP server (Do not change)"},{"name":"ListenerComm","required":false,"default":"","description":"The specific communication channel to use for this service"},{"name":"SSL","required":false,"default":"false","description":"Negotiate SSL for incoming connections"},{"name":"SSLCert","required":false,"default":"","description":"Path to a custom SSL certificate (default is randomly generated)"},{"name":"SSLCompression","required":false,"default":"false","description":"Enable SSL/TLS-level compression"},{"name":"SSLCipher","required":false,"default":"","description":"String for SSL cipher spec - \"DHE-RSA-AES256-SHA\" or \"ADH\""},{"name":"TCP::max_send_size","required":false,"default":"0","description":"Maximum tcp segment size.  (0 = disable)"},{"name":"TCP::send_delay","required":false,"default":"0","description":"Delays inserted before every send.  (0 = disable)"},{"name":"PASVPORT","required":false,"default":"0","description":"The local PASV data port to listen on (0 is random)"},{"name":"URIPATH","required":false,"default":"","description":"The URI to use for this exploit (default is random)"},{"name":"HTTPPORT","required":true,"default":"80","description":"The HTTP server port"}]}},"pageContext":{"id":"9545acf6-cb99-59c7-a52f-368e5874b7f6"}}}