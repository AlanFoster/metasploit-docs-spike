{"componentChunkName":"component---src-templates-module-details-template-tsx","path":"/modules/details/exploit/multi/misc/wireshark_lwres_getaddrbyname_loop","result":{"data":{"moduleMetadataJson":{"id":"96200d27-18aa-5ad8-ab50-1318a57d2138","name":"Wireshark LWRES Dissector getaddrsbyname_request Buffer Overflow (loop)","fullname":"exploit/multi/misc/wireshark_lwres_getaddrbyname_loop","description":"The LWRES dissector in Wireshark version 0.9.15 through 1.0.10 and 1.2.0 through\n        1.2.5 allows remote attackers to execute arbitrary code due to a stack-based buffer\n        overflow. This bug found and reported by babi.\n\n        This particular exploit targets the dissect_getaddrsbyname_request function. Several\n        other functions also contain potentially exploitable stack-based buffer overflows.\n\n        The Windows version (of 1.2.5 at least) is compiled with /GS, which prevents\n        exploitation via the return address on the stack. Sending a larger string allows\n        exploitation using the SEH bypass method. However, this packet will usually get\n        fragmented, which may cause additional complications.\n\n        NOTE: The vulnerable code is reached only when the packet dissection is rendered.\n        If the packet is fragmented, all fragments must be captured and reassembled to\n        exploit this issue.\n\n        This version loops, sending the packet every X seconds until the job is killed.","rank":500,"fields":{"detailsSlug":"/modules/details/exploit/multi/misc/wireshark_lwres_getaddrbyname_loop","documentationSlug":"/modules/documentation/exploit/multi/misc/wireshark_lwres_getaddrbyname_loop","referencesSlug":"/modules/references/exploit/multi/misc/wireshark_lwres_getaddrbyname_loop"},"author":["babi","jduck <jduck@metasploit.com>","redsand"],"notes":{"SideEffects":null,"Reliability":null,"Stability":null},"options":[{"advanced":true,"evasion":false,"name":"WORKSPACE","required":false,"default":"","description":"Specify the workspace for this module"},{"advanced":true,"evasion":false,"name":"VERBOSE","required":false,"default":"false","description":"Enable detailed status messages"},{"advanced":true,"evasion":false,"name":"EnableContextEncoding","required":false,"default":"false","description":"Use transient context when encoding payloads"},{"advanced":true,"evasion":false,"name":"ContextInformationFile","required":false,"default":"","description":"The information file that contains context information"},{"advanced":true,"evasion":false,"name":"DisablePayloadHandler","required":false,"default":"false","description":"Disable the handler code for the selected payload"},{"advanced":false,"evasion":false,"name":"RHOSTS","required":true,"default":"239.255.255.250","description":"The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'"},{"advanced":false,"evasion":false,"name":"RPORT","required":true,"default":"921","description":"The target port"},{"advanced":true,"evasion":false,"name":"CPORT","required":false,"default":"","description":"The local client port"},{"advanced":true,"evasion":false,"name":"CHOST","required":false,"default":"","description":"The local client address"},{"advanced":true,"evasion":false,"name":"DynamicSehRecord","required":false,"default":"false","description":"Generate a dynamic SEH record (more stealthy)"},{"advanced":false,"evasion":false,"name":"INTERFACE","required":false,"default":"","description":"The name of the interface"},{"advanced":false,"evasion":false,"name":"SNAPLEN","required":true,"default":"65535","description":"The number of bytes to capture"},{"advanced":false,"evasion":false,"name":"TIMEOUT","required":true,"default":"500","description":"The number of seconds to wait for new data"},{"advanced":true,"evasion":false,"name":"SECRET","required":true,"default":"1297303073","description":"A 32-bit cookie for probe requests."},{"advanced":true,"evasion":false,"name":"GATEWAY_PROBE_HOST","required":true,"default":"8.8.8.8","description":"Send a TTL=1 random UDP datagram to this host to discover the default gateway's MAC"},{"advanced":true,"evasion":false,"name":"GATEWAY_PROBE_PORT","required":false,"default":"","description":"The port on GATEWAY_PROBE_HOST to send a random UDP probe to (random if 0 or unset)"},{"advanced":false,"evasion":false,"name":"SHOST","required":false,"default":"","description":"This option can be used to specify a spoofed source address"},{"advanced":false,"evasion":false,"name":"DELAY","required":true,"default":"5","description":"This option sets the delay between sent packets"},{"advanced":true,"evasion":false,"name":"ExitOnSession","required":false,"default":"true","description":"Return from the exploit after a session has been created"}]}},"pageContext":{"id":"96200d27-18aa-5ad8-ab50-1318a57d2138"}}}