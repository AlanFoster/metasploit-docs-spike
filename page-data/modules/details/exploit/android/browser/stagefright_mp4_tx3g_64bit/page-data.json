{"componentChunkName":"component---src-templates-module-details-template-tsx","path":"/modules/details/exploit/android/browser/stagefright_mp4_tx3g_64bit","result":{"data":{"moduleMetadataJson":{"id":"348a3595-ff05-5e2c-8a7c-c2f5f5b6240b","name":"Android Stagefright MP4 tx3g Integer Overflow","fullname":"exploit/android/browser/stagefright_mp4_tx3g_64bit","description":"This module exploits an integer overflow vulnerability in the Stagefright\n        Library (libstagefright.so). The vulnerability occurs when parsing specially\n        crafted MP4 files. While a wide variety of remote attack vectors exist, this\n        particular exploit is designed to work within an HTML5 compliant browser.\n\n          Exploitation is done by supplying a specially crafted MP4 file with two\n        tx3g atoms that, when their sizes are summed, cause an integer overflow when\n        processing the second atom. As a result, a temporary buffer is allocated\n        with insufficient size and a memcpy call leads to a heap overflow.\n\n          This version of the exploit uses a two-stage information leak based on\n        corrupting the MetaData that the browser reads from mediaserver. This method\n        is based on a technique published in NorthBit's Metaphor paper. First,\n        we use a variant of their technique to read the address of a heap buffer\n        located adjacent to a SampleIterator object as the video HTML element's\n        videoHeight. Next, we read the vtable pointer from an empty Vector within\n        the SampleIterator object using the video element's duration. This gives\n        us a code address that we can use to determine the base address of\n        libstagefright and construct a ROP chain dynamically.\n\n        NOTE: the mediaserver process on many Android devices (Nexus, for example) is\n        constrained by SELinux and thus cannot use the execve system call. To avoid\n        this problem, the original exploit uses a kernel exploit payload that disables\n        SELinux and spawns a shell as root. Work is underway to make the framework\n        more amenable to these types of situations. Until that work is complete, this\n        exploit will only yield a shell on devices without SELinux or with SELinux in\n        permissive mode.","rank":300,"fields":{"detailsSlug":"/modules/details/exploit/android/browser/stagefright_mp4_tx3g_64bit","documentationSlug":"/modules/documentation/exploit/android/browser/stagefright_mp4_tx3g_64bit"},"author":["jduck <jduck@metasploit.com>","NorthBit"],"notes":{"SideEffects":null,"Reliability":null,"Stability":null},"options":[{"name":"WORKSPACE","required":false,"default":"","description":"Specify the workspace for this module"},{"name":"VERBOSE","required":false,"default":"false","description":"Enable detailed status messages"},{"name":"EnableContextEncoding","required":false,"default":"false","description":"Use transient context when encoding payloads"},{"name":"ContextInformationFile","required":false,"default":"","description":"The information file that contains context information"},{"name":"DisablePayloadHandler","required":false,"default":"false","description":"Disable the handler code for the selected payload"},{"name":"SRVHOST","required":true,"default":"0.0.0.0","description":"The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses."},{"name":"SRVPORT","required":true,"default":"8080","description":"The local port to listen on."},{"name":"ListenerComm","required":false,"default":"","description":"The specific communication channel to use for this service"},{"name":"SSL","required":false,"default":"false","description":"Negotiate SSL for incoming connections"},{"name":"SSLCert","required":false,"default":"","description":"Path to a custom SSL certificate (default is randomly generated)"},{"name":"SSLCompression","required":false,"default":"false","description":"Enable SSL/TLS-level compression"},{"name":"SSLCipher","required":false,"default":"","description":"String for SSL cipher spec - \"DHE-RSA-AES256-SHA\" or \"ADH\""},{"name":"TCP::max_send_size","required":false,"default":"0","description":"Maximum tcp segment size.  (0 = disable)"},{"name":"TCP::send_delay","required":false,"default":"0","description":"Delays inserted before every send.  (0 = disable)"},{"name":"URIPATH","required":false,"default":"","description":"The URI to use for this exploit (default is random)"},{"name":"HTTP::no_cache","required":false,"default":"false","description":"Disallow the browser to cache HTTP content"},{"name":"HTTP::chunked","required":false,"default":"false","description":"Enable chunking of HTTP responses via \"Transfer-Encoding: chunked\""},{"name":"HTTP::header_folding","required":false,"default":"false","description":"Enable folding of HTTP headers"},{"name":"HTTP::junk_headers","required":false,"default":"false","description":"Enable insertion of random junk HTTP headers"},{"name":"HTTP::compression","required":false,"default":"none","description":"Enable compression of HTTP responses via content encoding (Accepted: none, gzip, deflate)"},{"name":"HTTP::server_name","required":true,"default":"Apache","description":"Configures the Server header of all outgoing replies"},{"name":"URIHOST","required":false,"default":"","description":"Host to use in URI (useful for tunnels)"},{"name":"URIPORT","required":false,"default":"","description":"Port to use in URI (useful for tunnels)"},{"name":"SendRobots","required":false,"default":"false","description":"Return a robots.txt file if asked for one"},{"name":"HTML::unicode","required":false,"default":"none","description":"Enable HTTP obfuscation via unicode (Accepted: none, utf-16le, utf-16be, utf-16be-marker, utf-32le, utf-32be)"},{"name":"HTML::base64","required":false,"default":"none","description":"Enable HTML obfuscation via an embeded base64 html object (IE not supported) (Accepted: none, plain, single_pad, double_pad, random_space_injection)"},{"name":"HTML::javascript::escape","required":false,"default":"0","description":"Enable HTML obfuscation via HTML escaping (number of iterations)"}]}},"pageContext":{"id":"348a3595-ff05-5e2c-8a7c-c2f5f5b6240b"}}}