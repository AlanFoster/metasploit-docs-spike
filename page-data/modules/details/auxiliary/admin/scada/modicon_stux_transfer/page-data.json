{"componentChunkName":"component---src-templates-module-details-template-tsx","path":"/modules/details/auxiliary/admin/scada/modicon_stux_transfer","result":{"data":{"moduleMetadataJson":{"id":"d2f3a026-28b3-5070-8238-ca53fe555ffb","name":"Schneider Modicon Ladder Logic Upload/Download","fullname":"auxiliary/admin/scada/modicon_stux_transfer","description":"The Schneider Modicon with Unity series of PLCs use Modbus function\n        code 90 (0x5a) to send and receive ladder logic.  The protocol is\n        unauthenticated, and allows a rogue host to retrieve the existing\n        logic and to upload new logic.\n\n        Two modes are supported: \"SEND\" and \"RECV,\" which behave as one might\n        expect -- use 'set mode ACTIONAME' to use either mode of operation.\n\n        In either mode, FILENAME must be set to a valid path to an existing\n        file (for SENDing) or a new file (for RECVing), and the directory must\n        already exist.  The default, 'modicon_ladder.apx' is a blank\n        ladder logic file which can be used for testing.\n\n        This module is based on the original 'modiconstux.rb' Basecamp module from\n        DigitalBond.","rank":300,"fields":{"detailsSlug":"/modules/details/auxiliary/admin/scada/modicon_stux_transfer","documentationSlug":"/modules/documentation/auxiliary/admin/scada/modicon_stux_transfer"},"author":["K. Reid Wightman <wightman@digitalbond.com>","todb <todb@metasploit.com>"],"notes":{"SideEffects":null,"Reliability":null,"Stability":null},"options":[{"name":"WORKSPACE","required":false,"default":"","description":"Specify the workspace for this module"},{"name":"VERBOSE","required":false,"default":"false","description":"Enable detailed status messages"},{"name":"RHOSTS","required":true,"default":"","description":"The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'"},{"name":"RPORT","required":true,"default":"502","description":"The target port"},{"name":"SSL","required":false,"default":"false","description":"Negotiate SSL/TLS for outgoing connections"},{"name":"SSLVersion","required":true,"default":"Auto","description":"Specify the version of SSL/TLS to be used (Auto, TLS and SSL23 are auto-negotiate) (Accepted: Auto, TLS, SSL23, SSL3, TLS1, TLS1.1, TLS1.2)"},{"name":"SSLVerifyMode","required":false,"default":"PEER","description":"SSL verification method (Accepted: CLIENT_ONCE, FAIL_IF_NO_PEER_CERT, NONE, PEER)"},{"name":"SSLCipher","required":false,"default":"","description":"String for SSL cipher - \"DHE-RSA-AES256-SHA\" or \"ADH\""},{"name":"Proxies","required":false,"default":"","description":"A proxy chain of format type:host:port[,type:host:port][...]"},{"name":"CPORT","required":false,"default":"","description":"The local client port"},{"name":"CHOST","required":false,"default":"","description":"The local client address"},{"name":"ConnectTimeout","required":true,"default":"10","description":"Maximum number of seconds to establish a TCP connection"},{"name":"TCP::max_send_size","required":false,"default":"0","description":"Maxiumum tcp segment size.  (0 = disable)"},{"name":"TCP::send_delay","required":false,"default":"0","description":"Delays inserted before every send.  (0 = disable)"},{"name":"FILENAME","required":true,"default":"/Users/alan/Documents/code/metasploit-framework/data/exploits/modicon_ladder.apx","description":"The file to send or receive"},{"name":"MODE","required":true,"default":"SEND","description":"File transfer operation (Accepted: SEND, RECV)"}]}},"pageContext":{"id":"d2f3a026-28b3-5070-8238-ca53fe555ffb"}}}